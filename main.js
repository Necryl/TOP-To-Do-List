/*! For license information please see main.js.LICENSE.txt */
(()=>{var n={250:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".alertView {\n    position: fixed;\n    z-index: 4;\n    top: 0%;\n    left: 0%;\n    height: 100%;\n    width: 100%;\n\n    display: none; /* will be 'grid' via javascript */\n    place-content: center;\n\n    background-color: rgba(0, 0, 0, 0.589);\n}\n\n.alertBox {\n    background-color: rgb(110, 45, 45);\n\n    width: min(100vw, 400px);\n    padding: 3vw;\n    border: 2px solid rgb(204, 71, 71);\n    border-radius: 0.5rem;\n\n    display: grid;\n    gap: 1rem;\n}\n\n.alert-title {\n    color: aqua;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n.alert-message {\n    font-size: 1.75rem;\n    text-align: center;\n    color: rgb(238, 236, 218);\n}\n\n.alertBtns-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-around;\n}\n\n.alertBtns-container button {\n    padding: 0.25em 0.5em;\n    \n    font-size: 1.2rem;\n    font-weight: bold;\n\n    background-color: rgb(231, 167, 48);\n    border: 2px solid rgb(0, 0, 0);\n    border-radius: 0.25em;\n    color: black;\n\n    transition: 100ms;\n}\n.alertBtns-container button:hover {\n    background-color: rgb(221, 61, 69);\n    outline: 1px solid black;\n    /* color: white; */\n    scale: 105%;\n}\n.alertBtns-container button:active {\n    scale: 97%;\n    transition: 50ms;\n}","",{version:3,sources:["webpack://./src/styles/alertView.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,UAAU;IACV,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,WAAW;;IAEX,aAAa,EAAE,kCAAkC;IACjD,qBAAqB;;IAErB,sCAAsC;AAC1C;;AAEA;IACI,kCAAkC;;IAElC,wBAAwB;IACxB,YAAY;IACZ,kCAAkC;IAClC,qBAAqB;;IAErB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,qBAAqB;;IAErB,iBAAiB;IACjB,iBAAiB;;IAEjB,mCAAmC;IACnC,8BAA8B;IAC9B,qBAAqB;IACrB,YAAY;;IAEZ,iBAAiB;AACrB;AACA;IACI,kCAAkC;IAClC,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;AACf;AACA;IACI,UAAU;IACV,gBAAgB;AACpB",sourcesContent:[".alertView {\n    position: fixed;\n    z-index: 4;\n    top: 0%;\n    left: 0%;\n    height: 100%;\n    width: 100%;\n\n    display: none; /* will be 'grid' via javascript */\n    place-content: center;\n\n    background-color: rgba(0, 0, 0, 0.589);\n}\n\n.alertBox {\n    background-color: rgb(110, 45, 45);\n\n    width: min(100vw, 400px);\n    padding: 3vw;\n    border: 2px solid rgb(204, 71, 71);\n    border-radius: 0.5rem;\n\n    display: grid;\n    gap: 1rem;\n}\n\n.alert-title {\n    color: aqua;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n.alert-message {\n    font-size: 1.75rem;\n    text-align: center;\n    color: rgb(238, 236, 218);\n}\n\n.alertBtns-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-around;\n}\n\n.alertBtns-container button {\n    padding: 0.25em 0.5em;\n    \n    font-size: 1.2rem;\n    font-weight: bold;\n\n    background-color: rgb(231, 167, 48);\n    border: 2px solid rgb(0, 0, 0);\n    border-radius: 0.25em;\n    color: black;\n\n    transition: 100ms;\n}\n.alertBtns-container button:hover {\n    background-color: rgb(221, 61, 69);\n    outline: 1px solid black;\n    /* color: white; */\n    scale: 105%;\n}\n.alertBtns-container button:active {\n    scale: 97%;\n    transition: 50ms;\n}"],sourceRoot:""}]);const l=a},540:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".contentView-container.hide {\n    display: none;\n}\n\n.contentView {\n    background-color: var(--contentViewCol);\n    \n    padding: 4px 10px;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    gap: 10px;\n\n    position: relative;\n    z-index: 0;\n}\n\n.contentView.hide {\n    display: none;\n}\n\n.contentView .title-wrapper {\n    display: grid;\n    grid-template-columns: 1fr;\n    overflow: visible;\n}\n\n.contentView.single .title-wrapper {\n    grid-template-columns: auto 1fr;\n}\n\n.contentView #return {\n    background-color: transparent;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    opacity: 75%;\n    display: grid;\n    place-content: center;\n    position: relative;\n}\n\n.contentView #return:hover {\n    opacity: 100%;\n}\n\n.contentView #return img {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    top: 0%;\n    right: 0%;\n}\n\n.contentView ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--fontCol);\n    opacity: 0.5; /* Firefox */\n  }\n\n.contentView .description-wrapper {\n    position: relative;\n    background-color: red;\n    height: max-content;\n}\n\n.contentView textarea {\n    min-height: 13em;\n    width: 100%;\n\n    resize: none;\n}\n\n.contentView .itemTitle, .contentView textarea {\n    border-radius: 5px;\n\n    padding: 6px;\n\n    font-size: 1rem;\n\n    border: 2px solid rgb(80, 98, 104);\n\n    background-color: var(--insideCol);\n}\n\n.contentView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    justify-content: end;\n    align-self: start;\n    gap: 1ch;\n}\n\n.contentView .options * {\n    font-size: 1rem;\n}\n\n.contentView .options input[type='date'] {\n    min-width: 13ch;\n}\n\n.contentView .options input, .contentView .options select {\n    background-color: var(--insideCol);\n    border-radius: 3px;\n    border: none;\n    padding: 3px;\n}\n\n.contentView #delete {\n    background-color: rgb(182, 17, 44);\n    border: 2px solid rgb(201, 140, 61);\n    color: rgb(255, 228, 206);\n    border-radius: 4px;\n    padding: 3px 20px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n\n.contentView #delete:hover {\n    border-color: rgb(219, 184, 139);\n    background-color: rgb(167, 0, 0);\n    color: white;\n}\n.contentView #delete:active {\n    background-color: black;\n    border-color: white;\n}\n\n.contentView #return {\n    display: none;\n    max-height: 2.5rem;\n}\n\n.contentView.single #return {\n    display: initial;\n}\n\n.contentView .clear {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    padding: 0px 20px;\n\n    background-color: rgba(0, 0, 0, 0.281);\n\n    display: grid;\n    place-content: center;\n\n}\n\n.contentView .clear p {\n    text-align: center;\n    user-select: none;\n    font-size: 1.5rem;\n\n    background-color: rgba(0, 0, 0, 0.384);\n    padding: 0.5em;\n    border-radius: 0.35em;\n}\n\n.contentView.note .options :is(select, input) {\n    display: none;\n}","",{version:3,sources:["webpack://./src/styles/contentView.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;;AAEA;IACI,uCAAuC;;IAEvC,iBAAiB;;IAEjB,aAAa;IACb,iCAAiC;IACjC,SAAS;;IAET,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,6BAA6B;IAC7B,6BAA6B;IAC7B,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,SAAS;AACb;;AAEA,6BAA6B,yCAAyC;IAClE,qBAAqB;IACrB,YAAY,EAAE,YAAY;EAC5B;;AAEF;IACI,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,WAAW;;IAEX,YAAY;AAChB;;AAEA;IACI,kBAAkB;;IAElB,YAAY;;IAEZ,eAAe;;IAEf,kCAAkC;;IAElC,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,oBAAoB;IACpB,iBAAiB;IACjB,QAAQ;AACZ;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kCAAkC;IAClC,kBAAkB;IAClB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kCAAkC;IAClC,mCAAmC;IACnC,yBAAyB;IACzB,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;;IAEf,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;IAChC,gCAAgC;IAChC,YAAY;AAChB;AACA;IACI,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,iBAAiB;;IAEjB,sCAAsC;;IAEtC,aAAa;IACb,qBAAqB;;AAEzB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;;IAEjB,sCAAsC;IACtC,cAAc;IACd,qBAAqB;AACzB;;AAEA;IACI,aAAa;AACjB",sourcesContent:[".contentView-container.hide {\n    display: none;\n}\n\n.contentView {\n    background-color: var(--contentViewCol);\n    \n    padding: 4px 10px;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    gap: 10px;\n\n    position: relative;\n    z-index: 0;\n}\n\n.contentView.hide {\n    display: none;\n}\n\n.contentView .title-wrapper {\n    display: grid;\n    grid-template-columns: 1fr;\n    overflow: visible;\n}\n\n.contentView.single .title-wrapper {\n    grid-template-columns: auto 1fr;\n}\n\n.contentView #return {\n    background-color: transparent;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    opacity: 75%;\n    display: grid;\n    place-content: center;\n    position: relative;\n}\n\n.contentView #return:hover {\n    opacity: 100%;\n}\n\n.contentView #return img {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    top: 0%;\n    right: 0%;\n}\n\n.contentView ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--fontCol);\n    opacity: 0.5; /* Firefox */\n  }\n\n.contentView .description-wrapper {\n    position: relative;\n    background-color: red;\n    height: max-content;\n}\n\n.contentView textarea {\n    min-height: 13em;\n    width: 100%;\n\n    resize: none;\n}\n\n.contentView .itemTitle, .contentView textarea {\n    border-radius: 5px;\n\n    padding: 6px;\n\n    font-size: 1rem;\n\n    border: 2px solid rgb(80, 98, 104);\n\n    background-color: var(--insideCol);\n}\n\n.contentView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    justify-content: end;\n    align-self: start;\n    gap: 1ch;\n}\n\n.contentView .options * {\n    font-size: 1rem;\n}\n\n.contentView .options input[type='date'] {\n    min-width: 13ch;\n}\n\n.contentView .options input, .contentView .options select {\n    background-color: var(--insideCol);\n    border-radius: 3px;\n    border: none;\n    padding: 3px;\n}\n\n.contentView #delete {\n    background-color: rgb(182, 17, 44);\n    border: 2px solid rgb(201, 140, 61);\n    color: rgb(255, 228, 206);\n    border-radius: 4px;\n    padding: 3px 20px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n\n.contentView #delete:hover {\n    border-color: rgb(219, 184, 139);\n    background-color: rgb(167, 0, 0);\n    color: white;\n}\n.contentView #delete:active {\n    background-color: black;\n    border-color: white;\n}\n\n.contentView #return {\n    display: none;\n    max-height: 2.5rem;\n}\n\n.contentView.single #return {\n    display: initial;\n}\n\n.contentView .clear {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    padding: 0px 20px;\n\n    background-color: rgba(0, 0, 0, 0.281);\n\n    display: grid;\n    place-content: center;\n\n}\n\n.contentView .clear p {\n    text-align: center;\n    user-select: none;\n    font-size: 1.5rem;\n\n    background-color: rgba(0, 0, 0, 0.384);\n    padding: 0.5em;\n    border-radius: 0.35em;\n}\n\n.contentView.note .options :is(select, input) {\n    display: none;\n}"],sourceRoot:""}]);const l=a},973:(n,t,e)=>{"use strict";e.d(t,{Z:()=>p});var r=e(537),i=e.n(r),o=e(645),a=e.n(o),l=e(667),s=e.n(l),u=new URL(e(535),e.b),A=a()(i()),c=s()(u);A.push([n.id,".listView-container.hide {\n    display: none;\n}\n\n.listView {\n    background-color: var(--listViewCol);\n    display: grid;\n    align-content: start;\n    gap: 15px;\n\n    padding: 10px;\n\n    position: relative;\n    z-index: 1;\n}\n\n.listView.hide {\n    display: none;\n}\n\n.listView .title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n}\n\n.listView.triple #open-menu {\n    display: none;\n}\n\n.listView #open-menu {\n    max-height: 2.5rem;\n    background-color: transparent;\n    border: 2px solid white;\n    border-radius: 5px;\n    opacity: 75%;\n}\n\n.listView #open-menu:hover {\n    opacity: 100%;\n}\n\n.listView #open-menu>img {\n    height: 100%;\n    width: 100%;\n}\n\n.listView .title {\n    font-size: 2.5rem;\n}\n\n.listView.triple .title {\n    display: none;\n}\n\n.listView .listNameWrapper {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 10px;\n}\n\n.listView .listNameWrapper .newBtn {\n    background-color: rgb(49, 71, 100);\n    color: rgba(255, 255, 255, 0.788);\n    border: 1px solid rgba(114, 151, 207, 0.281);\n    border-radius: 5px;\n    font-size: 0.9rem;\n    padding: 6px 15px;\n    align-self: center;\n\n    transition: 100ms;\n}\n\n.listView .listNameWrapper .newBtn:hover {\n    border-color: rgba(255, 255, 255, 0.473);\n    background-color: rgba(95, 149, 170, 0.527);\n}\n.listView .listNameWrapper .newBtn:active {\n    background-color: white;\n}\n\n#listName {\n    background-color: transparent;\n    border: none;\n    font-size: 1.75rem;\n    border-bottom: 1px solid transparent;\n    width: 100%;\n    min-width: min-content;\n}\n#listName:focus {\n    outline: none;\n    border-bottom-color: rgba(255, 255, 255, 0.781);\n    border-radius: 0%;\n}\n\n.listView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    gap: 1ch;\n}\n\n.listView .options, .listView .options * {\n    overflow: visible;\n}\n\n.listView .options :is(.sort, .show) {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 0.5ch;\n}\n\n.listView .sort span {\n    min-width: max-content;\n}\n\n.listView :is(.sort, .show) input {\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n}\n.listView :is(.sort, .show) input::before {\n    background-color: transparent;\n    border: 1px solid white;\n    padding: 3px 5px;\n    border-radius: 5px;\n}\n\n.listView :is(#sortPriority, #showPriority)::before {\n    content: 'Priority';\n}\n.listView :is(#sortDate, #showDate)::before {\n    content: 'Date';\n}\n.listView :is(.sort, .show) input:hover::before {\n    background-color: rgba(255, 255, 255, 0.096);\n}\n.listView :is(.sort, .show) input:checked::before {\n    background-color: white;\n    color: black;\n}\n\n.listView ul {\n    display: grid;\n    gap: 7px;\n    margin-bottom: 10px;\n}\n\n.listView ul li {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-auto-flow: column;\n    justify-content: start;\n    gap: 10px;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    padding: 3px 10px;\n    transition: 250ms;\n    background-color: rgba(129, 205, 255, 0.123);\n}\n.listView ul li.note {\n    grid-template-columns: 1fr;\n}\n.listView ul li.selected {\n    border-color: rgba(255, 255, 255, 0.623);\n}\n\n.listView.single ul li .textContainer {\n    position: relative;\n}\n\n.listView.single ul li .textContainer::before {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n}\n\n.listView ul li:hover {\n    border-color: rgba(255, 255, 255, 0.308);\n}\n.listView ul li:focus-within {\n    border-bottom-color: white;\n}\n\n.listView ul li * {\n    background-color: transparent;\n    border: none;\n    font-size: 1rem;\n}\n.listView ul li *:focus {\n    outline: none;\n}\n\n.listView ul li input[type='checkbox'] {\n    -webkit-appearance: none;\n    appearance: none;\n    --size: 18px;\n    width: var(--size);\n    height: var(--size);\n    align-self: center;\n\n    --col: rgb(255, 255, 255);\n    opacity: 40%;\n    border: 2px solid var(--col);\n    border-radius: 5px;\n\n    position: relative;\n    overflow: visible;\n\n    transition: 200ms;\n}\n.listView ul li input[type='checkbox']:hover {\n    opacity: 60%;\n}\n\n.listView ul li input[type='checkbox']::before {\n    position: absolute;\n    content: '';\n    background-color: rgb(145, 178, 209);\n    translate: -1px -4px;\n}\n\n.listView .completedItems li input[type='checkbox']::before {\n    color: rgb(134, 139, 255);\n}\n\n.listView ul li input[type='checkbox']:checked::before {\n    content: '';\n\n    --image: url("+c+");\n    --size: 20px;\n    mask-image: var(--image);\n    mask-repeat: no-repeat;\n    mask-size: var(--size);\n    -webkit-mask-image: var(--image);\n    -webkit-mask-repeat: no-repeat;\n    -webkit-mask-size: var(--size);\n\n    background-color: var(--col);\n    width: var(--size);\n    height: var(--size);\n}\n\n.listView ul li input[type='text'] {\n    padding: 5px 0px;\n    width: 100%;\n    min-width: 5ch;\n    text-overflow: ellipsis;\n}\n\n.listView ul li select {\n    border-radius: 3px;\n}\n\n.listView ul li select:focus {\n    background-color: var(--listViewCol);\n}\n\n.listView ul li input[type='date'] {\n    font-family: inherit;\n    text-align: end;\n    width: 14ch;\n    position: relative;\n    z-index: 2;\n}\n\n.listView ul li .date-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: end;\n    height: 100%;\n    align-items: center;\n    position: relative;\n}\n\n.listView ul li .date-container input~span {\n    display: none;\n}\n.listView ul li .date-container:hover input~span {\n    display: initial;\n    --size: 18px;\n    height: var(--size);\n    width: var(--size);\n    border-radius: 3px;\n    background-color: rgba(234, 241, 241, 0.74);\n\n    position: absolute;\n    z-index: 1;\n    right: 0;\n    translate: -1px 0px;\n}\n\n.listView ul li .date-container p {\n    position: absolute;\n}\n\n.listView ul li .date-container input[type='date']~p {\n    visibility: hidden;\n}\n\n.listView ul li .date-container:not(:hover) input[type='date'].noDate {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n}\n\n.listView ul li .date-container:hover input[type='date'].noDate {\n    visibility: visible;\n    animation: fadeIn 100ms ease-out forwards;\n}\n\n.listView ul li .date-container:not(:hover) input[type='date'].noDate+p {\n    position: absolute;\n    right: 0%;\n    animation: fadeIn 100ms ease-out forwards;\n    visibility: visible;\n    color: white;\n}\n\n.listView ul li .date-container:hover input[type='date'].noDate+p {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n    color: transparent;\n}\n\n@keyframes fadeIn {\n    0% {\n        color: rgba(255, 255, 255, 0);\n        visibility: visible;\n    }\n    99% {\n        color: white;\n    }\n    100% {\n        color: white;\n    }\n}\n@keyframes fadeOut {\n    0% {\n        visibility: visible;\n        color: white;\n    }\n    99% {\n        visibility: visible;\n        color: rgba(255, 255, 255, 0);\n    }\n    100% {\n        visibility: hidden;\n        color: rgba(255, 255, 255, 0);\n    }\n}\n\n.completedTitle-wrapper {\n    position: relative;\n\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-areas: \"TITLE\";\n    align-items: center;\n\n    overflow: visible;\n}\n\n#completedTitle {\n    grid-area: TITLE;\n    width: 100%;\n    padding: 7px 0px;\n    border-radius: 6px;\n    background-color: transparent;\n    text-align: start;\n    font-size: 1.2rem;\n    --col: white;\n    color: var(--col);\n    border: none;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-areas: \"SYMBOL TITLE\"\n    \"BAR BAR\";\n    gap: 0ch 0.5ch;\n    \n    --transitionMS: 300ms;\n    transition: var(--transitionMS);\n}\n\n#completedTitle>svg {\n    grid-area: SYMBOL;\n    height: 0.65em;\n    margin-left: 0.1em;\n    align-self: center;\n    rotate: 90deg;\n    transition: 100ms;\n    aspect-ratio: 1/1;\n}\n\n#completedTitle>svg * {\n    fill: var(--col) !important;\n}\n\n\n#completedTitle.collapse>svg {\n    rotate: 0deg;\n}\n\n#completedTitle::after {\n    grid-area: BAR;\n    display: block;\n    margin-top: 3px;\n    content: '';\n    background-color: rgba(255, 255, 255, 0.795);\n    height: 1px;\n    \n    transition: 500ms;\n    width: 0%;\n}\n#completedTitle:hover {\n    --col: rgb(118, 179, 248);\n}\n#completedTitle:active {\n    --col: rgb(153, 226, 226);\n}\n#completedTitle:hover::after {\n    width: 100%;\n    background-color: var(--col);\n}\n\n.listView .completedTitle-wrapper #removeCompleted {\n    position: absolute;\n    right: 0%;\n    translate: 0px -3px;\n    padding: 2px 8px;\n    background-color: rgb(84, 72, 128);\n    color: rgb(240, 198, 248);\n    border: 1px solid rgb(145, 174, 187);\n    border-radius: 3px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n.listView .completedTitle-wrapper #removeCompleted:hover {\n    border-color: rgb(120, 143, 161);\n    background-color: rgb(167, 42, 42);\n}\n.listView .completedTitle-wrapper #removeCompleted:active {\n    background-color: white;\n    color: black;\n}\n\n.listView .completedItems li {\n    background-color: rgba(31, 36, 44, 0.425);\n    color: rgba(255, 255, 255, 0.637);\n}\n\n.listView .completedItems li input[type='text'] {\n    text-decoration: line-through;\n    color: inherit;\n}\n\n.listView.hidePriority select {\n    display: none;\n}\n.listView.hideDate .date-container {\n    display: none;\n}\n\n.listView .listItems .task:not(.task.checked) {\n    animation: welcome-to-unchecked 200ms ease-out;\n    animation-iteration-count: 1;\n}\n@keyframes welcome-to-unchecked {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .listItems .task.checked {\n    animation: move-to-completed 200ms;\n}\n@keyframes move-to-completed {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems .task.checked {\n    animation: welcome-to-checked 200ms ease-out;\n}\n@keyframes welcome-to-checked {\n    0% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .completedItems .task:not(.task.checked) {\n    animation: move-to-unchecked 200ms;\n}\n@keyframes move-to-unchecked {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems.collapse {\n    animation: completed-collapse 300ms ease-out forwards;\n    pointer-events: none;\n}\n@keyframes completed-collapse {\n    100% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n    }\n}\n.listView .completedItems:not(.collapse) {\n    animation: completed-expand 300ms ease-out forwards;\n}\n@keyframes completed-expand {\n    0% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n        pointer-events: none;\n    }\n    99% {\n        pointer-events: none;\n    }\n    100% {\n        transform: translateY(0rem);\n        opacity: 100%;\n        pointer-events: initial;\n    }\n}\n\n.listView :is(.listItems, .completedItems) li.removing {\n    justify-self: end;\n    animation: removing 300ms ease-in-out forwards !important;\n    max-height: 0em;\n    opacity: 0%;\n}\n@keyframes removing {\n    0% {\n        width: 100%;\n        opacity: 100%;\n        max-height: 3em;\n    }\n    70% {\n        width: 50%;\n        opacity: 0%;\n        max-height: 3em;\n    }\n    100% {\n        max-height: 0em;\n    }\n}","",{version:3,sources:["webpack://./src/styles/listView.css"],names:[],mappings:"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tC;AACA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,yCAAyC;IACzC,iCAAiC;AACrC;;AAEA;IACI,6BAA6B;IAC7B,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;;AAEA;IACI,8CAA8C;IAC9C,4BAA4B;AAChC;AACA;IACI;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,eAAe;IACnB;IACA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI,kCAAkC;AACtC;AACA;IACI;QACI,eAAe;IACnB;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,4CAA4C;AAChD;AACA;IACI;QACI,WAAW;QACX,eAAe;IACnB;IACA;QACI,eAAe;IACnB;IACA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI,kCAAkC;AACtC;AACA;IACI;QACI,eAAe;IACnB;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,qDAAqD;IACrD,oBAAoB;AACxB;AACA;IACI;QACI,4BAA4B;QAC5B,kBAAkB;QAClB,WAAW;IACf;AACJ;AACA;IACI,mDAAmD;AACvD;AACA;IACI;QACI,4BAA4B;QAC5B,kBAAkB;QAClB,WAAW;QACX,oBAAoB;IACxB;IACA;QACI,oBAAoB;IACxB;IACA;QACI,2BAA2B;QAC3B,aAAa;QACb,uBAAuB;IAC3B;AACJ;;AAEA;IACI,iBAAiB;IACjB,yDAAyD;IACzD,eAAe;IACf,WAAW;AACf;AACA;IACI;QACI,WAAW;QACX,aAAa;QACb,eAAe;IACnB;IACA;QACI,UAAU;QACV,WAAW;QACX,eAAe;IACnB;IACA;QACI,eAAe;IACnB;AACJ",sourcesContent:[".listView-container.hide {\n    display: none;\n}\n\n.listView {\n    background-color: var(--listViewCol);\n    display: grid;\n    align-content: start;\n    gap: 15px;\n\n    padding: 10px;\n\n    position: relative;\n    z-index: 1;\n}\n\n.listView.hide {\n    display: none;\n}\n\n.listView .title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n}\n\n.listView.triple #open-menu {\n    display: none;\n}\n\n.listView #open-menu {\n    max-height: 2.5rem;\n    background-color: transparent;\n    border: 2px solid white;\n    border-radius: 5px;\n    opacity: 75%;\n}\n\n.listView #open-menu:hover {\n    opacity: 100%;\n}\n\n.listView #open-menu>img {\n    height: 100%;\n    width: 100%;\n}\n\n.listView .title {\n    font-size: 2.5rem;\n}\n\n.listView.triple .title {\n    display: none;\n}\n\n.listView .listNameWrapper {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 10px;\n}\n\n.listView .listNameWrapper .newBtn {\n    background-color: rgb(49, 71, 100);\n    color: rgba(255, 255, 255, 0.788);\n    border: 1px solid rgba(114, 151, 207, 0.281);\n    border-radius: 5px;\n    font-size: 0.9rem;\n    padding: 6px 15px;\n    align-self: center;\n\n    transition: 100ms;\n}\n\n.listView .listNameWrapper .newBtn:hover {\n    border-color: rgba(255, 255, 255, 0.473);\n    background-color: rgba(95, 149, 170, 0.527);\n}\n.listView .listNameWrapper .newBtn:active {\n    background-color: white;\n}\n\n#listName {\n    background-color: transparent;\n    border: none;\n    font-size: 1.75rem;\n    border-bottom: 1px solid transparent;\n    width: 100%;\n    min-width: min-content;\n}\n#listName:focus {\n    outline: none;\n    border-bottom-color: rgba(255, 255, 255, 0.781);\n    border-radius: 0%;\n}\n\n.listView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    gap: 1ch;\n}\n\n.listView .options, .listView .options * {\n    overflow: visible;\n}\n\n.listView .options :is(.sort, .show) {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 0.5ch;\n}\n\n.listView .sort span {\n    min-width: max-content;\n}\n\n.listView :is(.sort, .show) input {\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n}\n.listView :is(.sort, .show) input::before {\n    background-color: transparent;\n    border: 1px solid white;\n    padding: 3px 5px;\n    border-radius: 5px;\n}\n\n.listView :is(#sortPriority, #showPriority)::before {\n    content: 'Priority';\n}\n.listView :is(#sortDate, #showDate)::before {\n    content: 'Date';\n}\n.listView :is(.sort, .show) input:hover::before {\n    background-color: rgba(255, 255, 255, 0.096);\n}\n.listView :is(.sort, .show) input:checked::before {\n    background-color: white;\n    color: black;\n}\n\n.listView ul {\n    display: grid;\n    gap: 7px;\n    margin-bottom: 10px;\n}\n\n.listView ul li {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-auto-flow: column;\n    justify-content: start;\n    gap: 10px;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    padding: 3px 10px;\n    transition: 250ms;\n    background-color: rgba(129, 205, 255, 0.123);\n}\n.listView ul li.note {\n    grid-template-columns: 1fr;\n}\n.listView ul li.selected {\n    border-color: rgba(255, 255, 255, 0.623);\n}\n\n.listView.single ul li .textContainer {\n    position: relative;\n}\n\n.listView.single ul li .textContainer::before {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n}\n\n.listView ul li:hover {\n    border-color: rgba(255, 255, 255, 0.308);\n}\n.listView ul li:focus-within {\n    border-bottom-color: white;\n}\n\n.listView ul li * {\n    background-color: transparent;\n    border: none;\n    font-size: 1rem;\n}\n.listView ul li *:focus {\n    outline: none;\n}\n\n.listView ul li input[type='checkbox'] {\n    -webkit-appearance: none;\n    appearance: none;\n    --size: 18px;\n    width: var(--size);\n    height: var(--size);\n    align-self: center;\n\n    --col: rgb(255, 255, 255);\n    opacity: 40%;\n    border: 2px solid var(--col);\n    border-radius: 5px;\n\n    position: relative;\n    overflow: visible;\n\n    transition: 200ms;\n}\n.listView ul li input[type='checkbox']:hover {\n    opacity: 60%;\n}\n\n.listView ul li input[type='checkbox']::before {\n    position: absolute;\n    content: '';\n    background-color: rgb(145, 178, 209);\n    translate: -1px -4px;\n}\n\n.listView .completedItems li input[type='checkbox']::before {\n    color: rgb(134, 139, 255);\n}\n\n.listView ul li input[type='checkbox']:checked::before {\n    content: '';\n\n    --image: url('../assets/images/check.svg');\n    --size: 20px;\n    mask-image: var(--image);\n    mask-repeat: no-repeat;\n    mask-size: var(--size);\n    -webkit-mask-image: var(--image);\n    -webkit-mask-repeat: no-repeat;\n    -webkit-mask-size: var(--size);\n\n    background-color: var(--col);\n    width: var(--size);\n    height: var(--size);\n}\n\n.listView ul li input[type='text'] {\n    padding: 5px 0px;\n    width: 100%;\n    min-width: 5ch;\n    text-overflow: ellipsis;\n}\n\n.listView ul li select {\n    border-radius: 3px;\n}\n\n.listView ul li select:focus {\n    background-color: var(--listViewCol);\n}\n\n.listView ul li input[type='date'] {\n    font-family: inherit;\n    text-align: end;\n    width: 14ch;\n    position: relative;\n    z-index: 2;\n}\n\n.listView ul li .date-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: end;\n    height: 100%;\n    align-items: center;\n    position: relative;\n}\n\n.listView ul li .date-container input~span {\n    display: none;\n}\n.listView ul li .date-container:hover input~span {\n    display: initial;\n    --size: 18px;\n    height: var(--size);\n    width: var(--size);\n    border-radius: 3px;\n    background-color: rgba(234, 241, 241, 0.74);\n\n    position: absolute;\n    z-index: 1;\n    right: 0;\n    translate: -1px 0px;\n}\n\n.listView ul li .date-container p {\n    position: absolute;\n}\n\n.listView ul li .date-container input[type='date']~p {\n    visibility: hidden;\n}\n\n.listView ul li .date-container:not(:hover) input[type='date'].noDate {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n}\n\n.listView ul li .date-container:hover input[type='date'].noDate {\n    visibility: visible;\n    animation: fadeIn 100ms ease-out forwards;\n}\n\n.listView ul li .date-container:not(:hover) input[type='date'].noDate+p {\n    position: absolute;\n    right: 0%;\n    animation: fadeIn 100ms ease-out forwards;\n    visibility: visible;\n    color: white;\n}\n\n.listView ul li .date-container:hover input[type='date'].noDate+p {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n    color: transparent;\n}\n\n@keyframes fadeIn {\n    0% {\n        color: rgba(255, 255, 255, 0);\n        visibility: visible;\n    }\n    99% {\n        color: white;\n    }\n    100% {\n        color: white;\n    }\n}\n@keyframes fadeOut {\n    0% {\n        visibility: visible;\n        color: white;\n    }\n    99% {\n        visibility: visible;\n        color: rgba(255, 255, 255, 0);\n    }\n    100% {\n        visibility: hidden;\n        color: rgba(255, 255, 255, 0);\n    }\n}\n\n.completedTitle-wrapper {\n    position: relative;\n\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-areas: \"TITLE\";\n    align-items: center;\n\n    overflow: visible;\n}\n\n#completedTitle {\n    grid-area: TITLE;\n    width: 100%;\n    padding: 7px 0px;\n    border-radius: 6px;\n    background-color: transparent;\n    text-align: start;\n    font-size: 1.2rem;\n    --col: white;\n    color: var(--col);\n    border: none;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-areas: \"SYMBOL TITLE\"\n    \"BAR BAR\";\n    gap: 0ch 0.5ch;\n    \n    --transitionMS: 300ms;\n    transition: var(--transitionMS);\n}\n\n#completedTitle>svg {\n    grid-area: SYMBOL;\n    height: 0.65em;\n    margin-left: 0.1em;\n    align-self: center;\n    rotate: 90deg;\n    transition: 100ms;\n    aspect-ratio: 1/1;\n}\n\n#completedTitle>svg * {\n    fill: var(--col) !important;\n}\n\n\n#completedTitle.collapse>svg {\n    rotate: 0deg;\n}\n\n#completedTitle::after {\n    grid-area: BAR;\n    display: block;\n    margin-top: 3px;\n    content: '';\n    background-color: rgba(255, 255, 255, 0.795);\n    height: 1px;\n    \n    transition: 500ms;\n    width: 0%;\n}\n#completedTitle:hover {\n    --col: rgb(118, 179, 248);\n}\n#completedTitle:active {\n    --col: rgb(153, 226, 226);\n}\n#completedTitle:hover::after {\n    width: 100%;\n    background-color: var(--col);\n}\n\n.listView .completedTitle-wrapper #removeCompleted {\n    position: absolute;\n    right: 0%;\n    translate: 0px -3px;\n    padding: 2px 8px;\n    background-color: rgb(84, 72, 128);\n    color: rgb(240, 198, 248);\n    border: 1px solid rgb(145, 174, 187);\n    border-radius: 3px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n.listView .completedTitle-wrapper #removeCompleted:hover {\n    border-color: rgb(120, 143, 161);\n    background-color: rgb(167, 42, 42);\n}\n.listView .completedTitle-wrapper #removeCompleted:active {\n    background-color: white;\n    color: black;\n}\n\n.listView .completedItems li {\n    background-color: rgba(31, 36, 44, 0.425);\n    color: rgba(255, 255, 255, 0.637);\n}\n\n.listView .completedItems li input[type='text'] {\n    text-decoration: line-through;\n    color: inherit;\n}\n\n.listView.hidePriority select {\n    display: none;\n}\n.listView.hideDate .date-container {\n    display: none;\n}\n\n.listView .listItems .task:not(.task.checked) {\n    animation: welcome-to-unchecked 200ms ease-out;\n    animation-iteration-count: 1;\n}\n@keyframes welcome-to-unchecked {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .listItems .task.checked {\n    animation: move-to-completed 200ms;\n}\n@keyframes move-to-completed {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems .task.checked {\n    animation: welcome-to-checked 200ms ease-out;\n}\n@keyframes welcome-to-checked {\n    0% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .completedItems .task:not(.task.checked) {\n    animation: move-to-unchecked 200ms;\n}\n@keyframes move-to-unchecked {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems.collapse {\n    animation: completed-collapse 300ms ease-out forwards;\n    pointer-events: none;\n}\n@keyframes completed-collapse {\n    100% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n    }\n}\n.listView .completedItems:not(.collapse) {\n    animation: completed-expand 300ms ease-out forwards;\n}\n@keyframes completed-expand {\n    0% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n        pointer-events: none;\n    }\n    99% {\n        pointer-events: none;\n    }\n    100% {\n        transform: translateY(0rem);\n        opacity: 100%;\n        pointer-events: initial;\n    }\n}\n\n.listView :is(.listItems, .completedItems) li.removing {\n    justify-self: end;\n    animation: removing 300ms ease-in-out forwards !important;\n    max-height: 0em;\n    opacity: 0%;\n}\n@keyframes removing {\n    0% {\n        width: 100%;\n        opacity: 100%;\n        max-height: 3em;\n    }\n    70% {\n        width: 50%;\n        opacity: 0%;\n        max-height: 3em;\n    }\n    100% {\n        max-height: 0em;\n    }\n}"],sourceRoot:""}]);const p=A},11:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".loading-container {\n    position: fixed;\n    top: 0%;\n    left: 0%;\n\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    place-content: center;\n\n    background-color: rgba(13, 23, 119, 0.932);\n\n    z-index: 4;\n\n    opacity: 0%;\n\n    transition: 100ms;\n}\n\n.loading {\n    /* background-color: aqua; */\n    pointer-events: inherit;\n\n    display: grid;\n}\n\n.loading h1 {\n    pointer-events: inherit;\n    font-size: 55px;\n    text-align: center;\n\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10 and IE 11 */\n    user-select: none; /* Standard syntax */\n}\n\n.loading h1::after {\n    content: '...';\n    animation: dots 2300ms;\n    animation-iteration-count: infinite;\n}\n\n@keyframes dots {\n    0% {\n        content: '.';\n    }\n    25% {\n        content: '.';\n    }\n    50% {\n        content: '..';\n    }\n    75% {\n        content: '...';\n    }\n    100% {\n        content: '...';\n    }\n}\n\n","",{version:3,sources:["webpack://./src/styles/loading.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,OAAO;IACP,QAAQ;;IAER,YAAY;IACZ,WAAW;;IAEX,aAAa;IACb,qBAAqB;;IAErB,0CAA0C;;IAE1C,UAAU;;IAEV,WAAW;;IAEX,iBAAiB;AACrB;;AAEA;IACI,4BAA4B;IAC5B,uBAAuB;;IAEvB,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,kBAAkB;;IAElB,yBAAyB,EAAE,WAAW;IACtC,qBAAqB,EAAE,oBAAoB;IAC3C,iBAAiB,EAAE,oBAAoB;AAC3C;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,mCAAmC;AACvC;;AAEA;IACI;QACI,YAAY;IAChB;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;IACA;QACI,cAAc;IAClB;IACA;QACI,cAAc;IAClB;AACJ",sourcesContent:[".loading-container {\n    position: fixed;\n    top: 0%;\n    left: 0%;\n\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    place-content: center;\n\n    background-color: rgba(13, 23, 119, 0.932);\n\n    z-index: 4;\n\n    opacity: 0%;\n\n    transition: 100ms;\n}\n\n.loading {\n    /* background-color: aqua; */\n    pointer-events: inherit;\n\n    display: grid;\n}\n\n.loading h1 {\n    pointer-events: inherit;\n    font-size: 55px;\n    text-align: center;\n\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10 and IE 11 */\n    user-select: none; /* Standard syntax */\n}\n\n.loading h1::after {\n    content: '...';\n    animation: dots 2300ms;\n    animation-iteration-count: infinite;\n}\n\n@keyframes dots {\n    0% {\n        content: '.';\n    }\n    25% {\n        content: '.';\n    }\n    50% {\n        content: '..';\n    }\n    75% {\n        content: '...';\n    }\n    100% {\n        content: '...';\n    }\n}\n\n"],sourceRoot:""}]);const l=a},756:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Mukta:wght@200;300;400;500;600;700;800&display=swap);"]),a.push([n.id,"/* Roboto font */\n\n/* Mukta Font */\n\nhtml, body {\n    margin: 0%;\n    padding: 0%;\n    height: 100vh;\n    width: 100vw;\n}\n\n:root * {\n    box-sizing: border-box;\n    margin: 0%;\n    padding: 0%;\n\n    --fontTitle: 'Mukta', sans-serif;\n    --fontMain: 'Roboto', sans-serif;\n\n    --menuCol: rgb(27, 31, 51);\n    --listViewCol: rgb(6, 48, 83);\n    --contentViewCol: rgb(29, 68, 105);\n    --insideCol: rgb(67, 108, 128);\n\n    --mainContentCol: white;\n    --fontCol: var(--mainContentCol);\n}\n\nbody {\n    --colMinusOne: 2;\n    --firstCol: 1;\n    display: grid;\n    grid-template-columns: auto 1fr 1fr;\n    overflow: visible;\n}\n\nbody.double {\n    grid-template-columns: 1fr 1fr;\n}\n\nbody.single {\n    grid-template-columns: 1fr;\n}\n\nbody * {\n    color: var(--fontCol);\n    font-family: var(--fontMain);\n}\n\nbody > :is(.menu-container, .listView-container, .contentView-container) {\n    overflow: auto;\n    display: grid;\n    height: 100%;\n}\nbody > :is(.menu-container, .listView-container, .contentView-container) > * {\n    min-width: min(44ch, 100vw);\n    height: 100%;\n}\n\nspan.seperator {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    height: 1px;\n    width: 80%;\n    justify-self: center;\n    background-color: rgba(255, 255, 255, 0.384);\n}\n\n.title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    gap: 1ch;\n}\n\n.title-wrapper button {\n    color: black;\n    height: 100%;\n    aspect-ratio: 1/1;\n}\n\n.title {\n    font-family: var(--fontTitle);\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA,gBAAgB;;AAGhB,eAAe;;AAGf;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,WAAW;;IAEX,gCAAgC;IAChC,gCAAgC;;IAEhC,0BAA0B;IAC1B,6BAA6B;IAC7B,kCAAkC;IAClC,8BAA8B;;IAE9B,uBAAuB;IACvB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,aAAa;IACb,mCAAmC;IACnC,iBAAiB;AACrB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,qBAAqB;IACrB,4BAA4B;AAChC;;AAEA;IACI,cAAc;IACd,aAAa;IACb,YAAY;AAChB;AACA;IACI,2BAA2B;IAC3B,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,oBAAoB;IACpB,4CAA4C;AAChD;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;AACjC",sourcesContent:["/* Roboto font */\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\n/* Mukta Font */\n@import url('https://fonts.googleapis.com/css2?family=Mukta:wght@200;300;400;500;600;700;800&display=swap');\n\nhtml, body {\n    margin: 0%;\n    padding: 0%;\n    height: 100vh;\n    width: 100vw;\n}\n\n:root * {\n    box-sizing: border-box;\n    margin: 0%;\n    padding: 0%;\n\n    --fontTitle: 'Mukta', sans-serif;\n    --fontMain: 'Roboto', sans-serif;\n\n    --menuCol: rgb(27, 31, 51);\n    --listViewCol: rgb(6, 48, 83);\n    --contentViewCol: rgb(29, 68, 105);\n    --insideCol: rgb(67, 108, 128);\n\n    --mainContentCol: white;\n    --fontCol: var(--mainContentCol);\n}\n\nbody {\n    --colMinusOne: 2;\n    --firstCol: 1;\n    display: grid;\n    grid-template-columns: auto 1fr 1fr;\n    overflow: visible;\n}\n\nbody.double {\n    grid-template-columns: 1fr 1fr;\n}\n\nbody.single {\n    grid-template-columns: 1fr;\n}\n\nbody * {\n    color: var(--fontCol);\n    font-family: var(--fontMain);\n}\n\nbody > :is(.menu-container, .listView-container, .contentView-container) {\n    overflow: auto;\n    display: grid;\n    height: 100%;\n}\nbody > :is(.menu-container, .listView-container, .contentView-container) > * {\n    min-width: min(44ch, 100vw);\n    height: 100%;\n}\n\nspan.seperator {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    height: 1px;\n    width: 80%;\n    justify-self: center;\n    background-color: rgba(255, 255, 255, 0.384);\n}\n\n.title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    gap: 1ch;\n}\n\n.title-wrapper button {\n    color: black;\n    height: 100%;\n    aspect-ratio: 1/1;\n}\n\n.title {\n    font-family: var(--fontTitle);\n}"],sourceRoot:""}]);const l=a},195:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".menu-container {\n    position: relative;\n    z-index: 2;\n}\nbody:not(body.triple) .menu-container {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n}\nbody:not(body.triple) .menu-container.visible {\n    background-color: rgba(0, 0, 0, 0.185);\n    pointer-events: initial;    \n}\n.menu {\n    overflow: auto;\n    min-width: initial !important;\n    background-color: var(--menuCol);\n\n    height: 100%;\n    width: min(250px, 100vw);\n\n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: repeat(4, auto) 1fr;\n    gap: 1rem;\n\n    position: relative;\n    min-width: initial;\n}\n\n.menu:not(.menu.triple) {\n    position: absolute;\n    top: 0%;\n    right: 100%;\n    transition: 300ms;\n}\n\n.menu.visible {\n    translate: 100%;\n}\n\n.menu.triple {\n    display: grid;\n    position: relative;\n}\n\n.menu .title-wrapper {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr;\n\n    margin-bottom: 15px;\n\n    overflow: visible;\n}\n\n.menu #close-menu {\n\n    justify-self: end;\n    \n    overflow: visible;\n    display: grid;\n    place-content: center;\n\n    --size: 15px;\n    height: var(--size);\n    width: var(--size);\n\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.521);\n    font-size: 1.7rem;\n\n    transition: 100ms;\n}\n\n.menu #close-menu:hover {\n    scale: 120%;\n    color: white;\n}\n\n.menu.triple #close-menu {\n    display: none;\n}\n\n.menu .title {\n    display: none;\n}\n\n.menu.triple .title {\n    display: initial;\n}\n\n.menu .tasks-wrapper, .menu .notes-wrapper, .menu #tasks, .menu #notes {\n    display: grid;\n    overflow: visible;\n}\n\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)) {\n    font-size: 1rem;\n    background-color: transparent;\n    border: none;\n    border-radius: 3px;\n    padding: 7px;\n    text-align: start;\n    transition: 300ms;\n    border: 2px solid transparent;\n}\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)):hover {\n    border-color: white;\n}\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)).selected {\n    border: 2px solid rgba(0, 255, 255, 0.438);\n}\n\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn {\n    text-align: center;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 1px solid rgba(255, 255, 255, 0.185);\n    font-size: 0.85em;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    margin-top: 3px;\n}\n\n.newBtn-wrapper {\n    display: grid;\n}\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn-wrapper input {\n    display: none;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 2px solid rgba(255, 255, 255, 0.39);\n    font-size: 0.85em;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    margin-top: 3px;\n}\n\n.menu :is(#tasks, #notes) li {\n    user-select: none;\n    animation: menu-new 100ms ease-in-out forwards;\n}\n@keyframes menu-new {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    40% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n}\n\n.menu :is(#tasks, #notes) li.removing {\n    animation: menu-removing 100ms ease-in-out forwards;\n}\n@keyframes menu-removing {\n    0% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n    60% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.attribution {\n    display: grid;\n    align-content: end;\n    gap: 0.5em;\n    font-size: 1rem;\n}\n\n.attribution a {\n    text-decoration: none;\n}\n\n.attribution a:hover {\n    text-decoration: underline;\n}\n\n.attribution .created-by a {\n    color: aqua;\n}\n\n.attribution .source {\n    color: rgb(198, 126, 226);\n}\n\n.attribution .warning {\n    color: rgb(233, 196, 116);\n}","",{version:3,sources:["webpack://./src/styles/menu.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;AACA;IACI,sCAAsC;IACtC,uBAAuB;AAC3B;AACA;IACI,cAAc;IACd,6BAA6B;IAC7B,gCAAgC;;IAEhC,YAAY;IACZ,wBAAwB;;IAExB,aAAa;;IAEb,aAAa;IACb,uCAAuC;IACvC,SAAS;;IAET,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,0BAA0B;;IAE1B,mBAAmB;;IAEnB,iBAAiB;AACrB;;AAEA;;IAEI,iBAAiB;;IAEjB,iBAAiB;IACjB,aAAa;IACb,qBAAqB;;IAErB,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;;IAElB,6BAA6B;IAC7B,YAAY;IACZ,iCAAiC;IACjC,iBAAiB;;IAEjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,iBAAiB;AACrB;;;AAGA;IACI,eAAe;IACf,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;AACvB;AACA;IACI,0CAA0C;AAC9C;;AAEA;IACI,kBAAkB;IAClB,4CAA4C;IAC5C,4CAA4C;IAC5C,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,4CAA4C;IAC5C,2CAA2C;IAC3C,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,8CAA8C;AAClD;AACA;IACI;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,aAAa;QACb,eAAe;IACnB;AACJ;;AAEA;IACI,mDAAmD;AACvD;AACA;IACI;QACI,aAAa;QACb,eAAe;IACnB;IACA;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:[".menu-container {\n    position: relative;\n    z-index: 2;\n}\nbody:not(body.triple) .menu-container {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n}\nbody:not(body.triple) .menu-container.visible {\n    background-color: rgba(0, 0, 0, 0.185);\n    pointer-events: initial;    \n}\n.menu {\n    overflow: auto;\n    min-width: initial !important;\n    background-color: var(--menuCol);\n\n    height: 100%;\n    width: min(250px, 100vw);\n\n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: repeat(4, auto) 1fr;\n    gap: 1rem;\n\n    position: relative;\n    min-width: initial;\n}\n\n.menu:not(.menu.triple) {\n    position: absolute;\n    top: 0%;\n    right: 100%;\n    transition: 300ms;\n}\n\n.menu.visible {\n    translate: 100%;\n}\n\n.menu.triple {\n    display: grid;\n    position: relative;\n}\n\n.menu .title-wrapper {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr;\n\n    margin-bottom: 15px;\n\n    overflow: visible;\n}\n\n.menu #close-menu {\n\n    justify-self: end;\n    \n    overflow: visible;\n    display: grid;\n    place-content: center;\n\n    --size: 15px;\n    height: var(--size);\n    width: var(--size);\n\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.521);\n    font-size: 1.7rem;\n\n    transition: 100ms;\n}\n\n.menu #close-menu:hover {\n    scale: 120%;\n    color: white;\n}\n\n.menu.triple #close-menu {\n    display: none;\n}\n\n.menu .title {\n    display: none;\n}\n\n.menu.triple .title {\n    display: initial;\n}\n\n.menu .tasks-wrapper, .menu .notes-wrapper, .menu #tasks, .menu #notes {\n    display: grid;\n    overflow: visible;\n}\n\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)) {\n    font-size: 1rem;\n    background-color: transparent;\n    border: none;\n    border-radius: 3px;\n    padding: 7px;\n    text-align: start;\n    transition: 300ms;\n    border: 2px solid transparent;\n}\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)):hover {\n    border-color: white;\n}\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)).selected {\n    border: 2px solid rgba(0, 255, 255, 0.438);\n}\n\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn {\n    text-align: center;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 1px solid rgba(255, 255, 255, 0.185);\n    font-size: 0.85em;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    margin-top: 3px;\n}\n\n.newBtn-wrapper {\n    display: grid;\n}\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn-wrapper input {\n    display: none;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 2px solid rgba(255, 255, 255, 0.39);\n    font-size: 0.85em;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    margin-top: 3px;\n}\n\n.menu :is(#tasks, #notes) li {\n    user-select: none;\n    animation: menu-new 100ms ease-in-out forwards;\n}\n@keyframes menu-new {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    40% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n}\n\n.menu :is(#tasks, #notes) li.removing {\n    animation: menu-removing 100ms ease-in-out forwards;\n}\n@keyframes menu-removing {\n    0% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n    60% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.attribution {\n    display: grid;\n    align-content: end;\n    gap: 0.5em;\n    font-size: 1rem;\n}\n\n.attribution a {\n    text-decoration: none;\n}\n\n.attribution a:hover {\n    text-decoration: underline;\n}\n\n.attribution .created-by a {\n    color: aqua;\n}\n\n.attribution .source {\n    color: rgb(198, 126, 226);\n}\n\n.attribution .warning {\n    color: rgb(233, 196, 116);\n}"],sourceRoot:""}]);const l=a},421:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".right-click-dropdown {\n    position: fixed;\n    z-index: 3;\n    display: grid;\n    background-color: rgb(49, 55, 77);\n    border: 1px solid rgba(255, 255, 255, 0.397);\n    border-radius: 7px;\n    font-size: 1rem;\n    overflow: visible;\n    list-style: none;\n    transform-origin: 0% 0%;\n    animation: menu-expand 200ms ease-out forwards;\n}\n@keyframes menu-expand {\n    0% {\n        scale: 50%;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        scale: 100%;\n    }\n}\n.right-click-dropdown > * {\n    user-select: none;\n    padding: 0.5em 0.85em;\n}\n.right-click-dropdown > *:not(:first-child) {\n    border-top: 1px solid rgba(255, 255, 255, 0.151);\n}\n.right-click-dropdown > *:hover {\n    background-color: rgba(255, 255, 255, 0.062);\n}\n\n.right-click-dropdown > *:active {\n    background-color: rgba(80, 120, 146, 0.589);\n}\n\n.right-click-dropdown.collapse {\n    /* transition: 150ms scale ease-in-out; */\n    animation: menu-collapse 150ms ease-in forwards;\n}\n@keyframes menu-collapse {\n    100% {\n        scale: 50%;\n        opacity: 0%;\n        visibility: hidden;\n    }\n}\n\n.right-click-dropdown::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    --size: 20px;\n    width: var(--size);\n    height: var(--size);\n    top: -10px;\n    left: -10px;\n    border-radius: 10px 10px 0px 0px;\n    transform: rotateZ(-45deg);\n\n}","",{version:3,sources:["webpack://./src/styles/rightClickDropDown.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,UAAU;IACV,aAAa;IACb,iCAAiC;IACjC,4CAA4C;IAC5C,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,uBAAuB;IACvB,8CAA8C;AAClD;AACA;IACI;QACI,UAAU;QACV,WAAW;IACf;IACA;QACI,aAAa;QACb,WAAW;IACf;AACJ;AACA;IACI,iBAAiB;IACjB,qBAAqB;AACzB;AACA;IACI,gDAAgD;AACpD;AACA;IACI,4CAA4C;AAChD;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,yCAAyC;IACzC,+CAA+C;AACnD;AACA;IACI;QACI,UAAU;QACV,WAAW;QACX,kBAAkB;IACtB;AACJ;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,gCAAgC;IAChC,0BAA0B;;AAE9B",sourcesContent:[".right-click-dropdown {\n    position: fixed;\n    z-index: 3;\n    display: grid;\n    background-color: rgb(49, 55, 77);\n    border: 1px solid rgba(255, 255, 255, 0.397);\n    border-radius: 7px;\n    font-size: 1rem;\n    overflow: visible;\n    list-style: none;\n    transform-origin: 0% 0%;\n    animation: menu-expand 200ms ease-out forwards;\n}\n@keyframes menu-expand {\n    0% {\n        scale: 50%;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        scale: 100%;\n    }\n}\n.right-click-dropdown > * {\n    user-select: none;\n    padding: 0.5em 0.85em;\n}\n.right-click-dropdown > *:not(:first-child) {\n    border-top: 1px solid rgba(255, 255, 255, 0.151);\n}\n.right-click-dropdown > *:hover {\n    background-color: rgba(255, 255, 255, 0.062);\n}\n\n.right-click-dropdown > *:active {\n    background-color: rgba(80, 120, 146, 0.589);\n}\n\n.right-click-dropdown.collapse {\n    /* transition: 150ms scale ease-in-out; */\n    animation: menu-collapse 150ms ease-in forwards;\n}\n@keyframes menu-collapse {\n    100% {\n        scale: 50%;\n        opacity: 0%;\n        visibility: hidden;\n    }\n}\n\n.right-click-dropdown::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    --size: 20px;\n    width: var(--size);\n    height: var(--size);\n    top: -10px;\n    left: -10px;\n    border-radius: 10px 10px 0px 0px;\n    transform: rotateZ(-45deg);\n\n}"],sourceRoot:""}]);const l=a},887:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,'.toolTips {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    top: 0%;\n    left: 0%;\n    z-index: 3;\n    pointer-events: none;\n    overflow: hidden;\n}\n\n.toolTips > div {\n    position: absolute;\n\n    --positionX: 50%;\n    --positionY: 50%;\n\n    top: var(--positionY);\n    left: var(--positionX);\n\n    /* border: 1px solid red; */\n}\n\n.toolTips > div > span {\n    position: absolute;\n    z-index: 3;\n    \n    opacity: 0%;\n    transition: 200ms;\n    \n    width: 150px;\n    \n    --tooltipBG: rgba(0, 0, 0, 0.856);\n    \n    background-color: var(--tooltipBG);\n    color: white;\n    text-align: center;\n    padding: 5px 7px;\n    border-radius: 8px;\n    pointer-events: none;\n    \n    /* default positioning */\n    bottom: 100%;\n    left: 50%;\n    --verticalOffset: -15px;\n    translate: -50% var(--verticalOffset);\n}\n\n.toolTips > div.show > span {\n    opacity: 100%;\n    pointer-events: auto;\n}\n\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left) {\n    left: 0%;\n    translate: -8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right) {\n    right: 0%;\n    left: auto;\n    translate: 8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom) {\n    --verticalOffset: 15px;\n    top: 100%;\n    bottom: auto;\n}\n\n.toolTips > div > span::after {\n    content: "";\n    position: absolute;\n    --size: 7px;\n    margin-left: calc(var(--size)*-1);\n    border-width: var(--size);\n    border-style: solid;\n    \n    /* default horizontal positioning */\n    left: 50%;\n    /* default vertical positioning */\n    top: 100%;\n    border-color: var(--tooltipBG) transparent transparent transparent;\n}\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left)::after {\n    left: 15%;\n}\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right)::after {\n    left: 85%;\n}\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom)::after {\n    top: auto;\n    bottom: 100%;\n    border-color: transparent transparent var(--tooltipBG) transparent;\n}',"",{version:3,sources:["webpack://./src/styles/tooltips.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,YAAY;IACZ,WAAW;IACX,OAAO;IACP,QAAQ;IACR,UAAU;IACV,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;;IAElB,gBAAgB;IAChB,gBAAgB;;IAEhB,qBAAqB;IACrB,sBAAsB;;IAEtB,2BAA2B;AAC/B;;AAEA;IACI,kBAAkB;IAClB,UAAU;;IAEV,WAAW;IACX,iBAAiB;;IAEjB,YAAY;;IAEZ,iCAAiC;;IAEjC,kCAAkC;IAClC,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,oBAAoB;;IAEpB,wBAAwB;IACxB,YAAY;IACZ,SAAS;IACT,uBAAuB;IACvB,qCAAqC;AACzC;;AAEA;IACI,aAAa;IACb,oBAAoB;AACxB;;AAEA;IACI,QAAQ;IACR,oCAAoC;AACxC;;AAEA;IACI,SAAS;IACT,UAAU;IACV,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,iCAAiC;IACjC,yBAAyB;IACzB,mBAAmB;;IAEnB,mCAAmC;IACnC,SAAS;IACT,iCAAiC;IACjC,SAAS;IACT,kEAAkE;AACtE;AACA;IACI,SAAS;AACb;AACA;IACI,SAAS;AACb;AACA;IACI,SAAS;IACT,YAAY;IACZ,kEAAkE;AACtE",sourcesContent:['.toolTips {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    top: 0%;\n    left: 0%;\n    z-index: 3;\n    pointer-events: none;\n    overflow: hidden;\n}\n\n.toolTips > div {\n    position: absolute;\n\n    --positionX: 50%;\n    --positionY: 50%;\n\n    top: var(--positionY);\n    left: var(--positionX);\n\n    /* border: 1px solid red; */\n}\n\n.toolTips > div > span {\n    position: absolute;\n    z-index: 3;\n    \n    opacity: 0%;\n    transition: 200ms;\n    \n    width: 150px;\n    \n    --tooltipBG: rgba(0, 0, 0, 0.856);\n    \n    background-color: var(--tooltipBG);\n    color: white;\n    text-align: center;\n    padding: 5px 7px;\n    border-radius: 8px;\n    pointer-events: none;\n    \n    /* default positioning */\n    bottom: 100%;\n    left: 50%;\n    --verticalOffset: -15px;\n    translate: -50% var(--verticalOffset);\n}\n\n.toolTips > div.show > span {\n    opacity: 100%;\n    pointer-events: auto;\n}\n\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left) {\n    left: 0%;\n    translate: -8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right) {\n    right: 0%;\n    left: auto;\n    translate: 8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom) {\n    --verticalOffset: 15px;\n    top: 100%;\n    bottom: auto;\n}\n\n.toolTips > div > span::after {\n    content: "";\n    position: absolute;\n    --size: 7px;\n    margin-left: calc(var(--size)*-1);\n    border-width: var(--size);\n    border-style: solid;\n    \n    /* default horizontal positioning */\n    left: 50%;\n    /* default vertical positioning */\n    top: 100%;\n    border-color: var(--tooltipBG) transparent transparent transparent;\n}\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left)::after {\n    left: 15%;\n}\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right)::after {\n    left: 85%;\n}\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom)::after {\n    top: auto;\n    bottom: 100%;\n    border-color: transparent transparent var(--tooltipBG) transparent;\n}'],sourceRoot:""}]);const l=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<n.length;u++){var A=[].concat(n[u]);r&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),t.push(A))}},t}},667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([o]).join("\n")}return[t].join("\n")}},486:function(n,t,e){var r;n=e.nmd(n),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",l="__lodash_placeholder__",s=32,u=128,A=1/0,c=9007199254740991,p=NaN,d=4294967295,f=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",s],["partialRight",64],["rearg",256]],h="[object Arguments]",g="[object Array]",m="[object Boolean]",C="[object Date]",v="[object Error]",I="[object Function]",B="[object GeneratorFunction]",b="[object Map]",y="[object Number]",w="[object Object]",k="[object Promise]",x="[object RegExp]",_="[object Set]",E="[object String]",V="[object Symbol]",L="[object WeakMap]",S="[object ArrayBuffer]",j="[object DataView]",z="[object Float32Array]",T="[object Float64Array]",W="[object Int8Array]",Y="[object Int16Array]",O="[object Int32Array]",D="[object Uint8Array]",q="[object Uint8ClampedArray]",Z="[object Uint16Array]",R="[object Uint32Array]",Q=/\b__p \+= '';/g,U=/\b(__p \+=) '' \+/g,N=/(__e\(.*?\)|\b__t\)) \+\n'';/g,P=/&(?:amp|lt|gt|quot|#39);/g,M=/[&<>"']/g,X=RegExp(P.source),$=RegExp(M.source),F=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,H=/<%=([\s\S]+?)%>/g,G=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,K=/^\w*$/,nn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,tn=/[\\^$.*+?()[\]{}|]/g,en=RegExp(tn.source),rn=/^\s+/,on=/\s/,an=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ln=/\{\n\/\* \[wrapped with (.+)\] \*/,sn=/,? & /,un=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,An=/[()=,{}\[\]\/\s]/,cn=/\\(\\)?/g,pn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dn=/\w*$/,fn=/^[-+]0x[0-9a-f]+$/i,hn=/^0b[01]+$/i,gn=/^\[object .+?Constructor\]$/,mn=/^0o[0-7]+$/i,Cn=/^(?:0|[1-9]\d*)$/,vn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,In=/($^)/,Bn=/['\n\r\u2028\u2029\\]/g,bn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",yn="a-z\\xdf-\\xf6\\xf8-\\xff",wn="A-Z\\xc0-\\xd6\\xd8-\\xde",kn="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",xn="["+kn+"]",_n="["+bn+"]",En="\\d+",Vn="["+yn+"]",Ln="[^\\ud800-\\udfff"+kn+En+"\\u2700-\\u27bf"+yn+wn+"]",Sn="\\ud83c[\\udffb-\\udfff]",jn="[^\\ud800-\\udfff]",zn="(?:\\ud83c[\\udde6-\\uddff]){2}",Tn="[\\ud800-\\udbff][\\udc00-\\udfff]",Wn="["+wn+"]",Yn="(?:"+Vn+"|"+Ln+")",On="(?:"+Wn+"|"+Ln+")",Dn="(?:['’](?:d|ll|m|re|s|t|ve))?",qn="(?:['’](?:D|LL|M|RE|S|T|VE))?",Zn="(?:"+_n+"|"+Sn+")?",Rn="[\\ufe0e\\ufe0f]?",Qn=Rn+Zn+"(?:\\u200d(?:"+[jn,zn,Tn].join("|")+")"+Rn+Zn+")*",Un="(?:"+["[\\u2700-\\u27bf]",zn,Tn].join("|")+")"+Qn,Nn="(?:"+[jn+_n+"?",_n,zn,Tn,"[\\ud800-\\udfff]"].join("|")+")",Pn=RegExp("['’]","g"),Mn=RegExp(_n,"g"),Xn=RegExp(Sn+"(?="+Sn+")|"+Nn+Qn,"g"),$n=RegExp([Wn+"?"+Vn+"+"+Dn+"(?="+[xn,Wn,"$"].join("|")+")",On+"+"+qn+"(?="+[xn,Wn+Yn,"$"].join("|")+")",Wn+"?"+Yn+"+"+Dn,Wn+"+"+qn,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",En,Un].join("|"),"g"),Fn=RegExp("[\\u200d\\ud800-\\udfff"+bn+"\\ufe0e\\ufe0f]"),Jn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Hn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Gn=-1,Kn={};Kn[z]=Kn[T]=Kn[W]=Kn[Y]=Kn[O]=Kn[D]=Kn[q]=Kn[Z]=Kn[R]=!0,Kn[h]=Kn[g]=Kn[S]=Kn[m]=Kn[j]=Kn[C]=Kn[v]=Kn[I]=Kn[b]=Kn[y]=Kn[w]=Kn[x]=Kn[_]=Kn[E]=Kn[L]=!1;var nt={};nt[h]=nt[g]=nt[S]=nt[j]=nt[m]=nt[C]=nt[z]=nt[T]=nt[W]=nt[Y]=nt[O]=nt[b]=nt[y]=nt[w]=nt[x]=nt[_]=nt[E]=nt[V]=nt[D]=nt[q]=nt[Z]=nt[R]=!0,nt[v]=nt[I]=nt[L]=!1;var tt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},et=parseFloat,rt=parseInt,it="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,ot="object"==typeof self&&self&&self.Object===Object&&self,at=it||ot||Function("return this")(),lt=t&&!t.nodeType&&t,st=lt&&n&&!n.nodeType&&n,ut=st&&st.exports===lt,At=ut&&it.process,ct=function(){try{return st&&st.require&&st.require("util").types||At&&At.binding&&At.binding("util")}catch(n){}}(),pt=ct&&ct.isArrayBuffer,dt=ct&&ct.isDate,ft=ct&&ct.isMap,ht=ct&&ct.isRegExp,gt=ct&&ct.isSet,mt=ct&&ct.isTypedArray;function Ct(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function vt(n,t,e,r){for(var i=-1,o=null==n?0:n.length;++i<o;){var a=n[i];t(r,a,e(a),n)}return r}function It(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function Bt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function bt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function yt(n,t){for(var e=-1,r=null==n?0:n.length,i=0,o=[];++e<r;){var a=n[e];t(a,e,n)&&(o[i++]=a)}return o}function wt(n,t){return!(null==n||!n.length)&&Tt(n,t,0)>-1}function kt(n,t,e){for(var r=-1,i=null==n?0:n.length;++r<i;)if(e(t,n[r]))return!0;return!1}function xt(n,t){for(var e=-1,r=null==n?0:n.length,i=Array(r);++e<r;)i[e]=t(n[e],e,n);return i}function _t(n,t){for(var e=-1,r=t.length,i=n.length;++e<r;)n[i+e]=t[e];return n}function Et(n,t,e,r){var i=-1,o=null==n?0:n.length;for(r&&o&&(e=n[++i]);++i<o;)e=t(e,n[i],i,n);return e}function Vt(n,t,e,r){var i=null==n?0:n.length;for(r&&i&&(e=n[--i]);i--;)e=t(e,n[i],i,n);return e}function Lt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var St=Dt("length");function jt(n,t,e){var r;return e(n,(function(n,e,i){if(t(n,e,i))return r=e,!1})),r}function zt(n,t,e,r){for(var i=n.length,o=e+(r?1:-1);r?o--:++o<i;)if(t(n[o],o,n))return o;return-1}function Tt(n,t,e){return t==t?function(n,t,e){for(var r=e-1,i=n.length;++r<i;)if(n[r]===t)return r;return-1}(n,t,e):zt(n,Yt,e)}function Wt(n,t,e,r){for(var i=e-1,o=n.length;++i<o;)if(r(n[i],t))return i;return-1}function Yt(n){return n!=n}function Ot(n,t){var e=null==n?0:n.length;return e?Rt(n,t)/e:p}function Dt(n){return function(t){return null==t?i:t[n]}}function qt(n){return function(t){return null==n?i:n[t]}}function Zt(n,t,e,r,i){return i(n,(function(n,i,o){e=r?(r=!1,n):t(e,n,i,o)})),e}function Rt(n,t){for(var e,r=-1,o=n.length;++r<o;){var a=t(n[r]);a!==i&&(e=e===i?a:e+a)}return e}function Qt(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Ut(n){return n?n.slice(0,le(n)+1).replace(rn,""):n}function Nt(n){return function(t){return n(t)}}function Pt(n,t){return xt(t,(function(t){return n[t]}))}function Mt(n,t){return n.has(t)}function Xt(n,t){for(var e=-1,r=n.length;++e<r&&Tt(t,n[e],0)>-1;);return e}function $t(n,t){for(var e=n.length;e--&&Tt(t,n[e],0)>-1;);return e}function Ft(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Jt=qt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Ht=qt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Gt(n){return"\\"+tt[n]}function Kt(n){return Fn.test(n)}function ne(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function te(n,t){return function(e){return n(t(e))}}function ee(n,t){for(var e=-1,r=n.length,i=0,o=[];++e<r;){var a=n[e];a!==t&&a!==l||(n[e]=l,o[i++]=e)}return o}function re(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function ie(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function oe(n){return Kt(n)?function(n){for(var t=Xn.lastIndex=0;Xn.test(n);)++t;return t}(n):St(n)}function ae(n){return Kt(n)?function(n){return n.match(Xn)||[]}(n):function(n){return n.split("")}(n)}function le(n){for(var t=n.length;t--&&on.test(n.charAt(t)););return t}var se=qt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ue=function n(t){var e,r=(t=null==t?at:ue.defaults(at.Object(),t,ue.pick(at,Hn))).Array,on=t.Date,bn=t.Error,yn=t.Function,wn=t.Math,kn=t.Object,xn=t.RegExp,_n=t.String,En=t.TypeError,Vn=r.prototype,Ln=yn.prototype,Sn=kn.prototype,jn=t["__core-js_shared__"],zn=Ln.toString,Tn=Sn.hasOwnProperty,Wn=0,Yn=(e=/[^.]+$/.exec(jn&&jn.keys&&jn.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",On=Sn.toString,Dn=zn.call(kn),qn=at._,Zn=xn("^"+zn.call(Tn).replace(tn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Rn=ut?t.Buffer:i,Qn=t.Symbol,Un=t.Uint8Array,Nn=Rn?Rn.allocUnsafe:i,Xn=te(kn.getPrototypeOf,kn),Fn=kn.create,tt=Sn.propertyIsEnumerable,it=Vn.splice,ot=Qn?Qn.isConcatSpreadable:i,lt=Qn?Qn.iterator:i,st=Qn?Qn.toStringTag:i,At=function(){try{var n=uo(kn,"defineProperty");return n({},"",{}),n}catch(n){}}(),ct=t.clearTimeout!==at.clearTimeout&&t.clearTimeout,St=on&&on.now!==at.Date.now&&on.now,qt=t.setTimeout!==at.setTimeout&&t.setTimeout,Ae=wn.ceil,ce=wn.floor,pe=kn.getOwnPropertySymbols,de=Rn?Rn.isBuffer:i,fe=t.isFinite,he=Vn.join,ge=te(kn.keys,kn),me=wn.max,Ce=wn.min,ve=on.now,Ie=t.parseInt,Be=wn.random,be=Vn.reverse,ye=uo(t,"DataView"),we=uo(t,"Map"),ke=uo(t,"Promise"),xe=uo(t,"Set"),_e=uo(t,"WeakMap"),Ee=uo(kn,"create"),Ve=_e&&new _e,Le={},Se=qo(ye),je=qo(we),ze=qo(ke),Te=qo(xe),We=qo(_e),Ye=Qn?Qn.prototype:i,Oe=Ye?Ye.valueOf:i,De=Ye?Ye.toString:i;function qe(n){if(el(n)&&!Pa(n)&&!(n instanceof Ue)){if(n instanceof Qe)return n;if(Tn.call(n,"__wrapped__"))return Zo(n)}return new Qe(n)}var Ze=function(){function n(){}return function(t){if(!tl(t))return{};if(Fn)return Fn(t);n.prototype=t;var e=new n;return n.prototype=i,e}}();function Re(){}function Qe(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Ue(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=d,this.__views__=[]}function Ne(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Pe(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Me(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Xe(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Me;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Pe(n);this.size=t.size}function Fe(n,t){var e=Pa(n),r=!e&&Na(n),i=!e&&!r&&Fa(n),o=!e&&!r&&!i&&Al(n),a=e||r||i||o,l=a?Qt(n.length,_n):[],s=l.length;for(var u in n)!t&&!Tn.call(n,u)||a&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||mo(u,s))||l.push(u);return l}function Je(n){var t=n.length;return t?n[Mr(0,t-1)]:i}function He(n,t){return To(_i(n),ar(t,0,n.length))}function Ge(n){return To(_i(n))}function Ke(n,t,e){(e!==i&&!Ra(n[t],e)||e===i&&!(t in n))&&ir(n,t,e)}function nr(n,t,e){var r=n[t];Tn.call(n,t)&&Ra(r,e)&&(e!==i||t in n)||ir(n,t,e)}function tr(n,t){for(var e=n.length;e--;)if(Ra(n[e][0],t))return e;return-1}function er(n,t,e,r){return cr(n,(function(n,i,o){t(r,n,e(n),o)})),r}function rr(n,t){return n&&Ei(t,jl(t),n)}function ir(n,t,e){"__proto__"==t&&At?At(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function or(n,t){for(var e=-1,o=t.length,a=r(o),l=null==n;++e<o;)a[e]=l?i:_l(n,t[e]);return a}function ar(n,t,e){return n==n&&(e!==i&&(n=n<=e?n:e),t!==i&&(n=n>=t?n:t)),n}function lr(n,t,e,r,o,a){var l,s=1&t,u=2&t,A=4&t;if(e&&(l=o?e(n,r,o,a):e(n)),l!==i)return l;if(!tl(n))return n;var c=Pa(n);if(c){if(l=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&Tn.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!s)return _i(n,l)}else{var p=po(n),d=p==I||p==B;if(Fa(n))return Bi(n,s);if(p==w||p==h||d&&!o){if(l=u||d?{}:ho(n),!s)return u?function(n,t){return Ei(n,co(n),t)}(n,function(n,t){return n&&Ei(t,zl(t),n)}(l,n)):function(n,t){return Ei(n,Ao(n),t)}(n,rr(l,n))}else{if(!nt[p])return o?n:{};l=function(n,t,e){var r,i=n.constructor;switch(t){case S:return bi(n);case m:case C:return new i(+n);case j:return function(n,t){var e=t?bi(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case z:case T:case W:case Y:case O:case D:case q:case Z:case R:return yi(n,e);case b:return new i;case y:case E:return new i(n);case x:return function(n){var t=new n.constructor(n.source,dn.exec(n));return t.lastIndex=n.lastIndex,t}(n);case _:return new i;case V:return r=n,Oe?kn(Oe.call(r)):{}}}(n,p,s)}}a||(a=new $e);var f=a.get(n);if(f)return f;a.set(n,l),ll(n)?n.forEach((function(r){l.add(lr(r,t,e,r,n,a))})):rl(n)&&n.forEach((function(r,i){l.set(i,lr(r,t,e,i,n,a))}));var g=c?i:(A?u?eo:to:u?zl:jl)(n);return It(g||n,(function(r,i){g&&(r=n[i=r]),nr(l,i,lr(r,t,e,i,n,a))})),l}function sr(n,t,e){var r=e.length;if(null==n)return!r;for(n=kn(n);r--;){var o=e[r],a=t[o],l=n[o];if(l===i&&!(o in n)||!a(l))return!1}return!0}function ur(n,t,e){if("function"!=typeof n)throw new En(o);return Lo((function(){n.apply(i,e)}),t)}function Ar(n,t,e,r){var i=-1,o=wt,a=!0,l=n.length,s=[],u=t.length;if(!l)return s;e&&(t=xt(t,Nt(e))),r?(o=kt,a=!1):t.length>=200&&(o=Mt,a=!1,t=new Xe(t));n:for(;++i<l;){var A=n[i],c=null==e?A:e(A);if(A=r||0!==A?A:0,a&&c==c){for(var p=u;p--;)if(t[p]===c)continue n;s.push(A)}else o(t,c,r)||s.push(A)}return s}qe.templateSettings={escape:F,evaluate:J,interpolate:H,variable:"",imports:{_:qe}},qe.prototype=Re.prototype,qe.prototype.constructor=qe,Qe.prototype=Ze(Re.prototype),Qe.prototype.constructor=Qe,Ue.prototype=Ze(Re.prototype),Ue.prototype.constructor=Ue,Ne.prototype.clear=function(){this.__data__=Ee?Ee(null):{},this.size=0},Ne.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},Ne.prototype.get=function(n){var t=this.__data__;if(Ee){var e=t[n];return e===a?i:e}return Tn.call(t,n)?t[n]:i},Ne.prototype.has=function(n){var t=this.__data__;return Ee?t[n]!==i:Tn.call(t,n)},Ne.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=Ee&&t===i?a:t,this},Pe.prototype.clear=function(){this.__data__=[],this.size=0},Pe.prototype.delete=function(n){var t=this.__data__,e=tr(t,n);return!(e<0||(e==t.length-1?t.pop():it.call(t,e,1),--this.size,0))},Pe.prototype.get=function(n){var t=this.__data__,e=tr(t,n);return e<0?i:t[e][1]},Pe.prototype.has=function(n){return tr(this.__data__,n)>-1},Pe.prototype.set=function(n,t){var e=this.__data__,r=tr(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Me.prototype.clear=function(){this.size=0,this.__data__={hash:new Ne,map:new(we||Pe),string:new Ne}},Me.prototype.delete=function(n){var t=lo(this,n).delete(n);return this.size-=t?1:0,t},Me.prototype.get=function(n){return lo(this,n).get(n)},Me.prototype.has=function(n){return lo(this,n).has(n)},Me.prototype.set=function(n,t){var e=lo(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Xe.prototype.add=Xe.prototype.push=function(n){return this.__data__.set(n,a),this},Xe.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Pe,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Pe){var r=e.__data__;if(!we||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Me(r)}return e.set(n,t),this.size=e.size,this};var cr=Si(vr),pr=Si(Ir,!0);function dr(n,t){var e=!0;return cr(n,(function(n,r,i){return e=!!t(n,r,i)})),e}function fr(n,t,e){for(var r=-1,o=n.length;++r<o;){var a=n[r],l=t(a);if(null!=l&&(s===i?l==l&&!ul(l):e(l,s)))var s=l,u=a}return u}function hr(n,t){var e=[];return cr(n,(function(n,r,i){t(n,r,i)&&e.push(n)})),e}function gr(n,t,e,r,i){var o=-1,a=n.length;for(e||(e=go),i||(i=[]);++o<a;){var l=n[o];t>0&&e(l)?t>1?gr(l,t-1,e,r,i):_t(i,l):r||(i[i.length]=l)}return i}var mr=ji(),Cr=ji(!0);function vr(n,t){return n&&mr(n,t,jl)}function Ir(n,t){return n&&Cr(n,t,jl)}function Br(n,t){return yt(t,(function(t){return Ga(n[t])}))}function br(n,t){for(var e=0,r=(t=mi(t,n)).length;null!=n&&e<r;)n=n[Do(t[e++])];return e&&e==r?n:i}function yr(n,t,e){var r=t(n);return Pa(n)?r:_t(r,e(n))}function wr(n){return null==n?n===i?"[object Undefined]":"[object Null]":st&&st in kn(n)?function(n){var t=Tn.call(n,st),e=n[st];try{n[st]=i;var r=!0}catch(n){}var o=On.call(n);return r&&(t?n[st]=e:delete n[st]),o}(n):function(n){return On.call(n)}(n)}function kr(n,t){return n>t}function xr(n,t){return null!=n&&Tn.call(n,t)}function _r(n,t){return null!=n&&t in kn(n)}function Er(n,t,e){for(var o=e?kt:wt,a=n[0].length,l=n.length,s=l,u=r(l),A=1/0,c=[];s--;){var p=n[s];s&&t&&(p=xt(p,Nt(t))),A=Ce(p.length,A),u[s]=!e&&(t||a>=120&&p.length>=120)?new Xe(s&&p):i}p=n[0];var d=-1,f=u[0];n:for(;++d<a&&c.length<A;){var h=p[d],g=t?t(h):h;if(h=e||0!==h?h:0,!(f?Mt(f,g):o(c,g,e))){for(s=l;--s;){var m=u[s];if(!(m?Mt(m,g):o(n[s],g,e)))continue n}f&&f.push(g),c.push(h)}}return c}function Vr(n,t,e){var r=null==(n=xo(n,t=mi(t,n)))?n:n[Do(Ho(t))];return null==r?i:Ct(r,n,e)}function Lr(n){return el(n)&&wr(n)==h}function Sr(n,t,e,r,o){return n===t||(null==n||null==t||!el(n)&&!el(t)?n!=n&&t!=t:function(n,t,e,r,o,a){var l=Pa(n),s=Pa(t),u=l?g:po(n),A=s?g:po(t),c=(u=u==h?w:u)==w,p=(A=A==h?w:A)==w,d=u==A;if(d&&Fa(n)){if(!Fa(t))return!1;l=!0,c=!1}if(d&&!c)return a||(a=new $e),l||Al(n)?Ki(n,t,e,r,o,a):function(n,t,e,r,i,o,a){switch(e){case j:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case S:return!(n.byteLength!=t.byteLength||!o(new Un(n),new Un(t)));case m:case C:case y:return Ra(+n,+t);case v:return n.name==t.name&&n.message==t.message;case x:case E:return n==t+"";case b:var l=ne;case _:var s=1&r;if(l||(l=re),n.size!=t.size&&!s)return!1;var u=a.get(n);if(u)return u==t;r|=2,a.set(n,t);var A=Ki(l(n),l(t),r,i,o,a);return a.delete(n),A;case V:if(Oe)return Oe.call(n)==Oe.call(t)}return!1}(n,t,u,e,r,o,a);if(!(1&e)){var f=c&&Tn.call(n,"__wrapped__"),I=p&&Tn.call(t,"__wrapped__");if(f||I){var B=f?n.value():n,k=I?t.value():t;return a||(a=new $e),o(B,k,e,r,a)}}return!!d&&(a||(a=new $e),function(n,t,e,r,o,a){var l=1&e,s=to(n),u=s.length;if(u!=to(t).length&&!l)return!1;for(var A=u;A--;){var c=s[A];if(!(l?c in t:Tn.call(t,c)))return!1}var p=a.get(n),d=a.get(t);if(p&&d)return p==t&&d==n;var f=!0;a.set(n,t),a.set(t,n);for(var h=l;++A<u;){var g=n[c=s[A]],m=t[c];if(r)var C=l?r(m,g,c,t,n,a):r(g,m,c,n,t,a);if(!(C===i?g===m||o(g,m,e,r,a):C)){f=!1;break}h||(h="constructor"==c)}if(f&&!h){var v=n.constructor,I=t.constructor;v==I||!("constructor"in n)||!("constructor"in t)||"function"==typeof v&&v instanceof v&&"function"==typeof I&&I instanceof I||(f=!1)}return a.delete(n),a.delete(t),f}(n,t,e,r,o,a))}(n,t,e,r,Sr,o))}function jr(n,t,e,r){var o=e.length,a=o,l=!r;if(null==n)return!a;for(n=kn(n);o--;){var s=e[o];if(l&&s[2]?s[1]!==n[s[0]]:!(s[0]in n))return!1}for(;++o<a;){var u=(s=e[o])[0],A=n[u],c=s[1];if(l&&s[2]){if(A===i&&!(u in n))return!1}else{var p=new $e;if(r)var d=r(A,c,u,n,t,p);if(!(d===i?Sr(c,A,3,r,p):d))return!1}}return!0}function zr(n){return!(!tl(n)||(t=n,Yn&&Yn in t))&&(Ga(n)?Zn:gn).test(qo(n));var t}function Tr(n){return"function"==typeof n?n:null==n?is:"object"==typeof n?Pa(n)?qr(n[0],n[1]):Dr(n):ds(n)}function Wr(n){if(!bo(n))return ge(n);var t=[];for(var e in kn(n))Tn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function Yr(n,t){return n<t}function Or(n,t){var e=-1,i=Xa(n)?r(n.length):[];return cr(n,(function(n,r,o){i[++e]=t(n,r,o)})),i}function Dr(n){var t=so(n);return 1==t.length&&t[0][2]?wo(t[0][0],t[0][1]):function(e){return e===n||jr(e,n,t)}}function qr(n,t){return vo(n)&&yo(t)?wo(Do(n),t):function(e){var r=_l(e,n);return r===i&&r===t?El(e,n):Sr(t,r,3)}}function Zr(n,t,e,r,o){n!==t&&mr(t,(function(a,l){if(o||(o=new $e),tl(a))!function(n,t,e,r,o,a,l){var s=Eo(n,e),u=Eo(t,e),A=l.get(u);if(A)Ke(n,e,A);else{var c=a?a(s,u,e+"",n,t,l):i,p=c===i;if(p){var d=Pa(u),f=!d&&Fa(u),h=!d&&!f&&Al(u);c=u,d||f||h?Pa(s)?c=s:$a(s)?c=_i(s):f?(p=!1,c=Bi(u,!0)):h?(p=!1,c=yi(u,!0)):c=[]:ol(u)||Na(u)?(c=s,Na(s)?c=Cl(s):tl(s)&&!Ga(s)||(c=ho(u))):p=!1}p&&(l.set(u,c),o(c,u,r,a,l),l.delete(u)),Ke(n,e,c)}}(n,t,l,e,Zr,r,o);else{var s=r?r(Eo(n,l),a,l+"",n,t,o):i;s===i&&(s=a),Ke(n,l,s)}}),zl)}function Rr(n,t){var e=n.length;if(e)return mo(t+=t<0?e:0,e)?n[t]:i}function Qr(n,t,e){t=t.length?xt(t,(function(n){return Pa(n)?function(t){return br(t,1===n.length?n[0]:n)}:n})):[is];var r=-1;t=xt(t,Nt(ao()));var i=Or(n,(function(n,e,i){var o=xt(t,(function(t){return t(n)}));return{criteria:o,index:++r,value:n}}));return function(n,t){var r=n.length;for(n.sort((function(n,t){return function(n,t,e){for(var r=-1,i=n.criteria,o=t.criteria,a=i.length,l=e.length;++r<a;){var s=wi(i[r],o[r]);if(s)return r>=l?s:s*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}));r--;)n[r]=n[r].value;return n}(i)}function Ur(n,t,e){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],l=br(n,a);e(l,a)&&Hr(o,mi(a,n),l)}return o}function Nr(n,t,e,r){var i=r?Wt:Tt,o=-1,a=t.length,l=n;for(n===t&&(t=_i(t)),e&&(l=xt(n,Nt(e)));++o<a;)for(var s=0,u=t[o],A=e?e(u):u;(s=i(l,A,s,r))>-1;)l!==n&&it.call(l,s,1),it.call(n,s,1);return n}function Pr(n,t){for(var e=n?t.length:0,r=e-1;e--;){var i=t[e];if(e==r||i!==o){var o=i;mo(i)?it.call(n,i,1):ui(n,i)}}return n}function Mr(n,t){return n+ce(Be()*(t-n+1))}function Xr(n,t){var e="";if(!n||t<1||t>c)return e;do{t%2&&(e+=n),(t=ce(t/2))&&(n+=n)}while(t);return e}function $r(n,t){return So(ko(n,t,is),n+"")}function Fr(n){return Je(Rl(n))}function Jr(n,t){var e=Rl(n);return To(e,ar(t,0,e.length))}function Hr(n,t,e,r){if(!tl(n))return n;for(var o=-1,a=(t=mi(t,n)).length,l=a-1,s=n;null!=s&&++o<a;){var u=Do(t[o]),A=e;if("__proto__"===u||"constructor"===u||"prototype"===u)return n;if(o!=l){var c=s[u];(A=r?r(c,u,s):i)===i&&(A=tl(c)?c:mo(t[o+1])?[]:{})}nr(s,u,A),s=s[u]}return n}var Gr=Ve?function(n,t){return Ve.set(n,t),n}:is,Kr=At?function(n,t){return At(n,"toString",{configurable:!0,enumerable:!1,value:ts(t),writable:!0})}:is;function ni(n){return To(Rl(n))}function ti(n,t,e){var i=-1,o=n.length;t<0&&(t=-t>o?0:o+t),(e=e>o?o:e)<0&&(e+=o),o=t>e?0:e-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=n[i+t];return a}function ei(n,t){var e;return cr(n,(function(n,r,i){return!(e=t(n,r,i))})),!!e}function ri(n,t,e){var r=0,i=null==n?r:n.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=n[o];null!==a&&!ul(a)&&(e?a<=t:a<t)?r=o+1:i=o}return i}return ii(n,t,is,e)}function ii(n,t,e,r){var o=0,a=null==n?0:n.length;if(0===a)return 0;for(var l=(t=e(t))!=t,s=null===t,u=ul(t),A=t===i;o<a;){var c=ce((o+a)/2),p=e(n[c]),d=p!==i,f=null===p,h=p==p,g=ul(p);if(l)var m=r||h;else m=A?h&&(r||d):s?h&&d&&(r||!f):u?h&&d&&!f&&(r||!g):!f&&!g&&(r?p<=t:p<t);m?o=c+1:a=c}return Ce(a,4294967294)}function oi(n,t){for(var e=-1,r=n.length,i=0,o=[];++e<r;){var a=n[e],l=t?t(a):a;if(!e||!Ra(l,s)){var s=l;o[i++]=0===a?0:a}}return o}function ai(n){return"number"==typeof n?n:ul(n)?p:+n}function li(n){if("string"==typeof n)return n;if(Pa(n))return xt(n,li)+"";if(ul(n))return De?De.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function si(n,t,e){var r=-1,i=wt,o=n.length,a=!0,l=[],s=l;if(e)a=!1,i=kt;else if(o>=200){var u=t?null:Xi(n);if(u)return re(u);a=!1,i=Mt,s=new Xe}else s=t?[]:l;n:for(;++r<o;){var A=n[r],c=t?t(A):A;if(A=e||0!==A?A:0,a&&c==c){for(var p=s.length;p--;)if(s[p]===c)continue n;t&&s.push(c),l.push(A)}else i(s,c,e)||(s!==l&&s.push(c),l.push(A))}return l}function ui(n,t){return null==(n=xo(n,t=mi(t,n)))||delete n[Do(Ho(t))]}function Ai(n,t,e,r){return Hr(n,t,e(br(n,t)),r)}function ci(n,t,e,r){for(var i=n.length,o=r?i:-1;(r?o--:++o<i)&&t(n[o],o,n););return e?ti(n,r?0:o,r?o+1:i):ti(n,r?o+1:0,r?i:o)}function pi(n,t){var e=n;return e instanceof Ue&&(e=e.value()),Et(t,(function(n,t){return t.func.apply(t.thisArg,_t([n],t.args))}),e)}function di(n,t,e){var i=n.length;if(i<2)return i?si(n[0]):[];for(var o=-1,a=r(i);++o<i;)for(var l=n[o],s=-1;++s<i;)s!=o&&(a[o]=Ar(a[o]||l,n[s],t,e));return si(gr(a,1),t,e)}function fi(n,t,e){for(var r=-1,o=n.length,a=t.length,l={};++r<o;){var s=r<a?t[r]:i;e(l,n[r],s)}return l}function hi(n){return $a(n)?n:[]}function gi(n){return"function"==typeof n?n:is}function mi(n,t){return Pa(n)?n:vo(n,t)?[n]:Oo(vl(n))}var Ci=$r;function vi(n,t,e){var r=n.length;return e=e===i?r:e,!t&&e>=r?n:ti(n,t,e)}var Ii=ct||function(n){return at.clearTimeout(n)};function Bi(n,t){if(t)return n.slice();var e=n.length,r=Nn?Nn(e):new n.constructor(e);return n.copy(r),r}function bi(n){var t=new n.constructor(n.byteLength);return new Un(t).set(new Un(n)),t}function yi(n,t){var e=t?bi(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function wi(n,t){if(n!==t){var e=n!==i,r=null===n,o=n==n,a=ul(n),l=t!==i,s=null===t,u=t==t,A=ul(t);if(!s&&!A&&!a&&n>t||a&&l&&u&&!s&&!A||r&&l&&u||!e&&u||!o)return 1;if(!r&&!a&&!A&&n<t||A&&e&&o&&!r&&!a||s&&e&&o||!l&&o||!u)return-1}return 0}function ki(n,t,e,i){for(var o=-1,a=n.length,l=e.length,s=-1,u=t.length,A=me(a-l,0),c=r(u+A),p=!i;++s<u;)c[s]=t[s];for(;++o<l;)(p||o<a)&&(c[e[o]]=n[o]);for(;A--;)c[s++]=n[o++];return c}function xi(n,t,e,i){for(var o=-1,a=n.length,l=-1,s=e.length,u=-1,A=t.length,c=me(a-s,0),p=r(c+A),d=!i;++o<c;)p[o]=n[o];for(var f=o;++u<A;)p[f+u]=t[u];for(;++l<s;)(d||o<a)&&(p[f+e[l]]=n[o++]);return p}function _i(n,t){var e=-1,i=n.length;for(t||(t=r(i));++e<i;)t[e]=n[e];return t}function Ei(n,t,e,r){var o=!e;e||(e={});for(var a=-1,l=t.length;++a<l;){var s=t[a],u=r?r(e[s],n[s],s,e,n):i;u===i&&(u=n[s]),o?ir(e,s,u):nr(e,s,u)}return e}function Vi(n,t){return function(e,r){var i=Pa(e)?vt:er,o=t?t():{};return i(e,n,ao(r,2),o)}}function Li(n){return $r((function(t,e){var r=-1,o=e.length,a=o>1?e[o-1]:i,l=o>2?e[2]:i;for(a=n.length>3&&"function"==typeof a?(o--,a):i,l&&Co(e[0],e[1],l)&&(a=o<3?i:a,o=1),t=kn(t);++r<o;){var s=e[r];s&&n(t,s,r,a)}return t}))}function Si(n,t){return function(e,r){if(null==e)return e;if(!Xa(e))return n(e,r);for(var i=e.length,o=t?i:-1,a=kn(e);(t?o--:++o<i)&&!1!==r(a[o],o,a););return e}}function ji(n){return function(t,e,r){for(var i=-1,o=kn(t),a=r(t),l=a.length;l--;){var s=a[n?l:++i];if(!1===e(o[s],s,o))break}return t}}function zi(n){return function(t){var e=Kt(t=vl(t))?ae(t):i,r=e?e[0]:t.charAt(0),o=e?vi(e,1).join(""):t.slice(1);return r[n]()+o}}function Ti(n){return function(t){return Et(Gl(Nl(t).replace(Pn,"")),n,"")}}function Wi(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=Ze(n.prototype),r=n.apply(e,t);return tl(r)?r:e}}function Yi(n){return function(t,e,r){var o=kn(t);if(!Xa(t)){var a=ao(e,3);t=jl(t),e=function(n){return a(o[n],n,o)}}var l=n(t,e,r);return l>-1?o[a?t[l]:l]:i}}function Oi(n){return no((function(t){var e=t.length,r=e,a=Qe.prototype.thru;for(n&&t.reverse();r--;){var l=t[r];if("function"!=typeof l)throw new En(o);if(a&&!s&&"wrapper"==io(l))var s=new Qe([],!0)}for(r=s?r:e;++r<e;){var u=io(l=t[r]),A="wrapper"==u?ro(l):i;s=A&&Io(A[0])&&424==A[1]&&!A[4].length&&1==A[9]?s[io(A[0])].apply(s,A[3]):1==l.length&&Io(l)?s[u]():s.thru(l)}return function(){var n=arguments,r=n[0];if(s&&1==n.length&&Pa(r))return s.plant(r).value();for(var i=0,o=e?t[i].apply(this,n):r;++i<e;)o=t[i].call(this,o);return o}}))}function Di(n,t,e,o,a,l,s,A,c,p){var d=t&u,f=1&t,h=2&t,g=24&t,m=512&t,C=h?i:Wi(n);return function i(){for(var u=arguments.length,v=r(u),I=u;I--;)v[I]=arguments[I];if(g)var B=oo(i),b=Ft(v,B);if(o&&(v=ki(v,o,a,g)),l&&(v=xi(v,l,s,g)),u-=b,g&&u<p){var y=ee(v,B);return Pi(n,t,Di,i.placeholder,e,v,y,A,c,p-u)}var w=f?e:this,k=h?w[n]:n;return u=v.length,A?v=_o(v,A):m&&u>1&&v.reverse(),d&&c<u&&(v.length=c),this&&this!==at&&this instanceof i&&(k=C||Wi(k)),k.apply(w,v)}}function qi(n,t){return function(e,r){return function(n,t,e,r){return vr(n,(function(n,i,o){t(r,e(n),i,o)})),r}(e,n,t(r),{})}}function Zi(n,t){return function(e,r){var o;if(e===i&&r===i)return t;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=li(e),r=li(r)):(e=ai(e),r=ai(r)),o=n(e,r)}return o}}function Ri(n){return no((function(t){return t=xt(t,Nt(ao())),$r((function(e){var r=this;return n(t,(function(n){return Ct(n,r,e)}))}))}))}function Qi(n,t){var e=(t=t===i?" ":li(t)).length;if(e<2)return e?Xr(t,n):t;var r=Xr(t,Ae(n/oe(t)));return Kt(t)?vi(ae(r),0,n).join(""):r.slice(0,n)}function Ui(n){return function(t,e,o){return o&&"number"!=typeof o&&Co(t,e,o)&&(e=o=i),t=fl(t),e===i?(e=t,t=0):e=fl(e),function(n,t,e,i){for(var o=-1,a=me(Ae((t-n)/(e||1)),0),l=r(a);a--;)l[i?a:++o]=n,n+=e;return l}(t,e,o=o===i?t<e?1:-1:fl(o),n)}}function Ni(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=ml(t),e=ml(e)),n(t,e)}}function Pi(n,t,e,r,o,a,l,u,A,c){var p=8&t;t|=p?s:64,4&(t&=~(p?64:s))||(t&=-4);var d=[n,t,o,p?a:i,p?l:i,p?i:a,p?i:l,u,A,c],f=e.apply(i,d);return Io(n)&&Vo(f,d),f.placeholder=r,jo(f,n,t)}function Mi(n){var t=wn[n];return function(n,e){if(n=ml(n),(e=null==e?0:Ce(hl(e),292))&&fe(n)){var r=(vl(n)+"e").split("e");return+((r=(vl(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var Xi=xe&&1/re(new xe([,-0]))[1]==A?function(n){return new xe(n)}:us;function $i(n){return function(t){var e=po(t);return e==b?ne(t):e==_?ie(t):function(n,t){return xt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Fi(n,t,e,a,A,c,p,d){var f=2&t;if(!f&&"function"!=typeof n)throw new En(o);var h=a?a.length:0;if(h||(t&=-97,a=A=i),p=p===i?p:me(hl(p),0),d=d===i?d:hl(d),h-=A?A.length:0,64&t){var g=a,m=A;a=A=i}var C=f?i:ro(n),v=[n,t,e,a,A,g,m,c,p,d];if(C&&function(n,t){var e=n[1],r=t[1],i=e|r,o=i<131,a=r==u&&8==e||r==u&&256==e&&n[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==e;if(!o&&!a)return n;1&r&&(n[2]=t[2],i|=1&e?0:4);var s=t[3];if(s){var A=n[3];n[3]=A?ki(A,s,t[4]):s,n[4]=A?ee(n[3],l):t[4]}(s=t[5])&&(A=n[5],n[5]=A?xi(A,s,t[6]):s,n[6]=A?ee(n[5],l):t[6]),(s=t[7])&&(n[7]=s),r&u&&(n[8]=null==n[8]?t[8]:Ce(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=i}(v,C),n=v[0],t=v[1],e=v[2],a=v[3],A=v[4],!(d=v[9]=v[9]===i?f?0:n.length:me(v[9]-h,0))&&24&t&&(t&=-25),t&&1!=t)I=8==t||16==t?function(n,t,e){var o=Wi(n);return function a(){for(var l=arguments.length,s=r(l),u=l,A=oo(a);u--;)s[u]=arguments[u];var c=l<3&&s[0]!==A&&s[l-1]!==A?[]:ee(s,A);return(l-=c.length)<e?Pi(n,t,Di,a.placeholder,i,s,c,i,i,e-l):Ct(this&&this!==at&&this instanceof a?o:n,this,s)}}(n,t,d):t!=s&&33!=t||A.length?Di.apply(i,v):function(n,t,e,i){var o=1&t,a=Wi(n);return function t(){for(var l=-1,s=arguments.length,u=-1,A=i.length,c=r(A+s),p=this&&this!==at&&this instanceof t?a:n;++u<A;)c[u]=i[u];for(;s--;)c[u++]=arguments[++l];return Ct(p,o?e:this,c)}}(n,t,e,a);else var I=function(n,t,e){var r=1&t,i=Wi(n);return function t(){return(this&&this!==at&&this instanceof t?i:n).apply(r?e:this,arguments)}}(n,t,e);return jo((C?Gr:Vo)(I,v),n,t)}function Ji(n,t,e,r){return n===i||Ra(n,Sn[e])&&!Tn.call(r,e)?t:n}function Hi(n,t,e,r,o,a){return tl(n)&&tl(t)&&(a.set(t,n),Zr(n,t,i,Hi,a),a.delete(t)),n}function Gi(n){return ol(n)?i:n}function Ki(n,t,e,r,o,a){var l=1&e,s=n.length,u=t.length;if(s!=u&&!(l&&u>s))return!1;var A=a.get(n),c=a.get(t);if(A&&c)return A==t&&c==n;var p=-1,d=!0,f=2&e?new Xe:i;for(a.set(n,t),a.set(t,n);++p<s;){var h=n[p],g=t[p];if(r)var m=l?r(g,h,p,t,n,a):r(h,g,p,n,t,a);if(m!==i){if(m)continue;d=!1;break}if(f){if(!Lt(t,(function(n,t){if(!Mt(f,t)&&(h===n||o(h,n,e,r,a)))return f.push(t)}))){d=!1;break}}else if(h!==g&&!o(h,g,e,r,a)){d=!1;break}}return a.delete(n),a.delete(t),d}function no(n){return So(ko(n,i,Mo),n+"")}function to(n){return yr(n,jl,Ao)}function eo(n){return yr(n,zl,co)}var ro=Ve?function(n){return Ve.get(n)}:us;function io(n){for(var t=n.name+"",e=Le[t],r=Tn.call(Le,t)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==n)return i.name}return t}function oo(n){return(Tn.call(qe,"placeholder")?qe:n).placeholder}function ao(){var n=qe.iteratee||os;return n=n===os?Tr:n,arguments.length?n(arguments[0],arguments[1]):n}function lo(n,t){var e,r,i=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof t?"string":"hash"]:i.map}function so(n){for(var t=jl(n),e=t.length;e--;){var r=t[e],i=n[r];t[e]=[r,i,yo(i)]}return t}function uo(n,t){var e=function(n,t){return null==n?i:n[t]}(n,t);return zr(e)?e:i}var Ao=pe?function(n){return null==n?[]:(n=kn(n),yt(pe(n),(function(t){return tt.call(n,t)})))}:gs,co=pe?function(n){for(var t=[];n;)_t(t,Ao(n)),n=Xn(n);return t}:gs,po=wr;function fo(n,t,e){for(var r=-1,i=(t=mi(t,n)).length,o=!1;++r<i;){var a=Do(t[r]);if(!(o=null!=n&&e(n,a)))break;n=n[a]}return o||++r!=i?o:!!(i=null==n?0:n.length)&&nl(i)&&mo(a,i)&&(Pa(n)||Na(n))}function ho(n){return"function"!=typeof n.constructor||bo(n)?{}:Ze(Xn(n))}function go(n){return Pa(n)||Na(n)||!!(ot&&n&&n[ot])}function mo(n,t){var e=typeof n;return!!(t=null==t?c:t)&&("number"==e||"symbol"!=e&&Cn.test(n))&&n>-1&&n%1==0&&n<t}function Co(n,t,e){if(!tl(e))return!1;var r=typeof t;return!!("number"==r?Xa(e)&&mo(t,e.length):"string"==r&&t in e)&&Ra(e[t],n)}function vo(n,t){if(Pa(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!ul(n))||K.test(n)||!G.test(n)||null!=t&&n in kn(t)}function Io(n){var t=io(n),e=qe[t];if("function"!=typeof e||!(t in Ue.prototype))return!1;if(n===e)return!0;var r=ro(e);return!!r&&n===r[0]}(ye&&po(new ye(new ArrayBuffer(1)))!=j||we&&po(new we)!=b||ke&&po(ke.resolve())!=k||xe&&po(new xe)!=_||_e&&po(new _e)!=L)&&(po=function(n){var t=wr(n),e=t==w?n.constructor:i,r=e?qo(e):"";if(r)switch(r){case Se:return j;case je:return b;case ze:return k;case Te:return _;case We:return L}return t});var Bo=jn?Ga:ms;function bo(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||Sn)}function yo(n){return n==n&&!tl(n)}function wo(n,t){return function(e){return null!=e&&e[n]===t&&(t!==i||n in kn(e))}}function ko(n,t,e){return t=me(t===i?n.length-1:t,0),function(){for(var i=arguments,o=-1,a=me(i.length-t,0),l=r(a);++o<a;)l[o]=i[t+o];o=-1;for(var s=r(t+1);++o<t;)s[o]=i[o];return s[t]=e(l),Ct(n,this,s)}}function xo(n,t){return t.length<2?n:br(n,ti(t,0,-1))}function _o(n,t){for(var e=n.length,r=Ce(t.length,e),o=_i(n);r--;){var a=t[r];n[r]=mo(a,e)?o[a]:i}return n}function Eo(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var Vo=zo(Gr),Lo=qt||function(n,t){return at.setTimeout(n,t)},So=zo(Kr);function jo(n,t,e){var r=t+"";return So(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(an,"{\n/* [wrapped with "+t+"] */\n")}(r,function(n,t){return It(f,(function(e){var r="_."+e[0];t&e[1]&&!wt(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(ln);return t?t[1].split(sn):[]}(r),e)))}function zo(n){var t=0,e=0;return function(){var r=ve(),o=16-(r-e);if(e=r,o>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(i,arguments)}}function To(n,t){var e=-1,r=n.length,o=r-1;for(t=t===i?r:t;++e<t;){var a=Mr(e,o),l=n[a];n[a]=n[e],n[e]=l}return n.length=t,n}var Wo,Yo,Oo=(Wo=Wa((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(nn,(function(n,e,r,i){t.push(r?i.replace(cn,"$1"):e||n)})),t}),(function(n){return 500===Yo.size&&Yo.clear(),n})),Yo=Wo.cache,Wo);function Do(n){if("string"==typeof n||ul(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function qo(n){if(null!=n){try{return zn.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Zo(n){if(n instanceof Ue)return n.clone();var t=new Qe(n.__wrapped__,n.__chain__);return t.__actions__=_i(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ro=$r((function(n,t){return $a(n)?Ar(n,gr(t,1,$a,!0)):[]})),Qo=$r((function(n,t){var e=Ho(t);return $a(e)&&(e=i),$a(n)?Ar(n,gr(t,1,$a,!0),ao(e,2)):[]})),Uo=$r((function(n,t){var e=Ho(t);return $a(e)&&(e=i),$a(n)?Ar(n,gr(t,1,$a,!0),i,e):[]}));function No(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var i=null==e?0:hl(e);return i<0&&(i=me(r+i,0)),zt(n,ao(t,3),i)}function Po(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r-1;return e!==i&&(o=hl(e),o=e<0?me(r+o,0):Ce(o,r-1)),zt(n,ao(t,3),o,!0)}function Mo(n){return null!=n&&n.length?gr(n,1):[]}function Xo(n){return n&&n.length?n[0]:i}var $o=$r((function(n){var t=xt(n,hi);return t.length&&t[0]===n[0]?Er(t):[]})),Fo=$r((function(n){var t=Ho(n),e=xt(n,hi);return t===Ho(e)?t=i:e.pop(),e.length&&e[0]===n[0]?Er(e,ao(t,2)):[]})),Jo=$r((function(n){var t=Ho(n),e=xt(n,hi);return(t="function"==typeof t?t:i)&&e.pop(),e.length&&e[0]===n[0]?Er(e,i,t):[]}));function Ho(n){var t=null==n?0:n.length;return t?n[t-1]:i}var Go=$r(Ko);function Ko(n,t){return n&&n.length&&t&&t.length?Nr(n,t):n}var na=no((function(n,t){var e=null==n?0:n.length,r=or(n,t);return Pr(n,xt(t,(function(n){return mo(n,e)?+n:n})).sort(wi)),r}));function ta(n){return null==n?n:be.call(n)}var ea=$r((function(n){return si(gr(n,1,$a,!0))})),ra=$r((function(n){var t=Ho(n);return $a(t)&&(t=i),si(gr(n,1,$a,!0),ao(t,2))})),ia=$r((function(n){var t=Ho(n);return t="function"==typeof t?t:i,si(gr(n,1,$a,!0),i,t)}));function oa(n){if(!n||!n.length)return[];var t=0;return n=yt(n,(function(n){if($a(n))return t=me(n.length,t),!0})),Qt(t,(function(t){return xt(n,Dt(t))}))}function aa(n,t){if(!n||!n.length)return[];var e=oa(n);return null==t?e:xt(e,(function(n){return Ct(t,i,n)}))}var la=$r((function(n,t){return $a(n)?Ar(n,t):[]})),sa=$r((function(n){return di(yt(n,$a))})),ua=$r((function(n){var t=Ho(n);return $a(t)&&(t=i),di(yt(n,$a),ao(t,2))})),Aa=$r((function(n){var t=Ho(n);return t="function"==typeof t?t:i,di(yt(n,$a),i,t)})),ca=$r(oa),pa=$r((function(n){var t=n.length,e=t>1?n[t-1]:i;return e="function"==typeof e?(n.pop(),e):i,aa(n,e)}));function da(n){var t=qe(n);return t.__chain__=!0,t}function fa(n,t){return t(n)}var ha=no((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,o=function(t){return or(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Ue&&mo(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:fa,args:[o],thisArg:i}),new Qe(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(i),n}))):this.thru(o)})),ga=Vi((function(n,t,e){Tn.call(n,e)?++n[e]:ir(n,e,1)})),ma=Yi(No),Ca=Yi(Po);function va(n,t){return(Pa(n)?It:cr)(n,ao(t,3))}function Ia(n,t){return(Pa(n)?Bt:pr)(n,ao(t,3))}var Ba=Vi((function(n,t,e){Tn.call(n,e)?n[e].push(t):ir(n,e,[t])})),ba=$r((function(n,t,e){var i=-1,o="function"==typeof t,a=Xa(n)?r(n.length):[];return cr(n,(function(n){a[++i]=o?Ct(t,n,e):Vr(n,t,e)})),a})),ya=Vi((function(n,t,e){ir(n,e,t)}));function wa(n,t){return(Pa(n)?xt:Or)(n,ao(t,3))}var ka=Vi((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]})),xa=$r((function(n,t){if(null==n)return[];var e=t.length;return e>1&&Co(n,t[0],t[1])?t=[]:e>2&&Co(t[0],t[1],t[2])&&(t=[t[0]]),Qr(n,gr(t,1),[])})),_a=St||function(){return at.Date.now()};function Ea(n,t,e){return t=e?i:t,t=n&&null==t?n.length:t,Fi(n,u,i,i,i,i,t)}function Va(n,t){var e;if("function"!=typeof t)throw new En(o);return n=hl(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=i),e}}var La=$r((function(n,t,e){var r=1;if(e.length){var i=ee(e,oo(La));r|=s}return Fi(n,r,t,e,i)})),Sa=$r((function(n,t,e){var r=3;if(e.length){var i=ee(e,oo(Sa));r|=s}return Fi(t,r,n,e,i)}));function ja(n,t,e){var r,a,l,s,u,A,c=0,p=!1,d=!1,f=!0;if("function"!=typeof n)throw new En(o);function h(t){var e=r,o=a;return r=a=i,c=t,s=n.apply(o,e)}function g(n){return c=n,u=Lo(C,t),p?h(n):s}function m(n){var e=n-A;return A===i||e>=t||e<0||d&&n-c>=l}function C(){var n=_a();if(m(n))return v(n);u=Lo(C,function(n){var e=t-(n-A);return d?Ce(e,l-(n-c)):e}(n))}function v(n){return u=i,f&&r?h(n):(r=a=i,s)}function I(){var n=_a(),e=m(n);if(r=arguments,a=this,A=n,e){if(u===i)return g(A);if(d)return Ii(u),u=Lo(C,t),h(A)}return u===i&&(u=Lo(C,t)),s}return t=ml(t)||0,tl(e)&&(p=!!e.leading,l=(d="maxWait"in e)?me(ml(e.maxWait)||0,t):l,f="trailing"in e?!!e.trailing:f),I.cancel=function(){u!==i&&Ii(u),c=0,r=A=a=u=i},I.flush=function(){return u===i?s:v(_a())},I}var za=$r((function(n,t){return ur(n,1,t)})),Ta=$r((function(n,t,e){return ur(n,ml(t)||0,e)}));function Wa(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new En(o);var e=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var a=n.apply(this,r);return e.cache=o.set(i,a)||o,a};return e.cache=new(Wa.Cache||Me),e}function Ya(n){if("function"!=typeof n)throw new En(o);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}Wa.Cache=Me;var Oa=Ci((function(n,t){var e=(t=1==t.length&&Pa(t[0])?xt(t[0],Nt(ao())):xt(gr(t,1),Nt(ao()))).length;return $r((function(r){for(var i=-1,o=Ce(r.length,e);++i<o;)r[i]=t[i].call(this,r[i]);return Ct(n,this,r)}))})),Da=$r((function(n,t){var e=ee(t,oo(Da));return Fi(n,s,i,t,e)})),qa=$r((function(n,t){var e=ee(t,oo(qa));return Fi(n,64,i,t,e)})),Za=no((function(n,t){return Fi(n,256,i,i,i,t)}));function Ra(n,t){return n===t||n!=n&&t!=t}var Qa=Ni(kr),Ua=Ni((function(n,t){return n>=t})),Na=Lr(function(){return arguments}())?Lr:function(n){return el(n)&&Tn.call(n,"callee")&&!tt.call(n,"callee")},Pa=r.isArray,Ma=pt?Nt(pt):function(n){return el(n)&&wr(n)==S};function Xa(n){return null!=n&&nl(n.length)&&!Ga(n)}function $a(n){return el(n)&&Xa(n)}var Fa=de||ms,Ja=dt?Nt(dt):function(n){return el(n)&&wr(n)==C};function Ha(n){if(!el(n))return!1;var t=wr(n);return t==v||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!ol(n)}function Ga(n){if(!tl(n))return!1;var t=wr(n);return t==I||t==B||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ka(n){return"number"==typeof n&&n==hl(n)}function nl(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=c}function tl(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function el(n){return null!=n&&"object"==typeof n}var rl=ft?Nt(ft):function(n){return el(n)&&po(n)==b};function il(n){return"number"==typeof n||el(n)&&wr(n)==y}function ol(n){if(!el(n)||wr(n)!=w)return!1;var t=Xn(n);if(null===t)return!0;var e=Tn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&zn.call(e)==Dn}var al=ht?Nt(ht):function(n){return el(n)&&wr(n)==x},ll=gt?Nt(gt):function(n){return el(n)&&po(n)==_};function sl(n){return"string"==typeof n||!Pa(n)&&el(n)&&wr(n)==E}function ul(n){return"symbol"==typeof n||el(n)&&wr(n)==V}var Al=mt?Nt(mt):function(n){return el(n)&&nl(n.length)&&!!Kn[wr(n)]},cl=Ni(Yr),pl=Ni((function(n,t){return n<=t}));function dl(n){if(!n)return[];if(Xa(n))return sl(n)?ae(n):_i(n);if(lt&&n[lt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[lt]());var t=po(n);return(t==b?ne:t==_?re:Rl)(n)}function fl(n){return n?(n=ml(n))===A||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function hl(n){var t=fl(n),e=t%1;return t==t?e?t-e:t:0}function gl(n){return n?ar(hl(n),0,d):0}function ml(n){if("number"==typeof n)return n;if(ul(n))return p;if(tl(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=tl(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=Ut(n);var e=hn.test(n);return e||mn.test(n)?rt(n.slice(2),e?2:8):fn.test(n)?p:+n}function Cl(n){return Ei(n,zl(n))}function vl(n){return null==n?"":li(n)}var Il=Li((function(n,t){if(bo(t)||Xa(t))Ei(t,jl(t),n);else for(var e in t)Tn.call(t,e)&&nr(n,e,t[e])})),Bl=Li((function(n,t){Ei(t,zl(t),n)})),bl=Li((function(n,t,e,r){Ei(t,zl(t),n,r)})),yl=Li((function(n,t,e,r){Ei(t,jl(t),n,r)})),wl=no(or),kl=$r((function(n,t){n=kn(n);var e=-1,r=t.length,o=r>2?t[2]:i;for(o&&Co(t[0],t[1],o)&&(r=1);++e<r;)for(var a=t[e],l=zl(a),s=-1,u=l.length;++s<u;){var A=l[s],c=n[A];(c===i||Ra(c,Sn[A])&&!Tn.call(n,A))&&(n[A]=a[A])}return n})),xl=$r((function(n){return n.push(i,Hi),Ct(Wl,i,n)}));function _l(n,t,e){var r=null==n?i:br(n,t);return r===i?e:r}function El(n,t){return null!=n&&fo(n,t,_r)}var Vl=qi((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=On.call(t)),n[t]=e}),ts(is)),Ll=qi((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=On.call(t)),Tn.call(n,t)?n[t].push(e):n[t]=[e]}),ao),Sl=$r(Vr);function jl(n){return Xa(n)?Fe(n):Wr(n)}function zl(n){return Xa(n)?Fe(n,!0):function(n){if(!tl(n))return function(n){var t=[];if(null!=n)for(var e in kn(n))t.push(e);return t}(n);var t=bo(n),e=[];for(var r in n)("constructor"!=r||!t&&Tn.call(n,r))&&e.push(r);return e}(n)}var Tl=Li((function(n,t,e){Zr(n,t,e)})),Wl=Li((function(n,t,e,r){Zr(n,t,e,r)})),Yl=no((function(n,t){var e={};if(null==n)return e;var r=!1;t=xt(t,(function(t){return t=mi(t,n),r||(r=t.length>1),t})),Ei(n,eo(n),e),r&&(e=lr(e,7,Gi));for(var i=t.length;i--;)ui(e,t[i]);return e})),Ol=no((function(n,t){return null==n?{}:function(n,t){return Ur(n,t,(function(t,e){return El(n,e)}))}(n,t)}));function Dl(n,t){if(null==n)return{};var e=xt(eo(n),(function(n){return[n]}));return t=ao(t),Ur(n,e,(function(n,e){return t(n,e[0])}))}var ql=$i(jl),Zl=$i(zl);function Rl(n){return null==n?[]:Pt(n,jl(n))}var Ql=Ti((function(n,t,e){return t=t.toLowerCase(),n+(e?Ul(t):t)}));function Ul(n){return Hl(vl(n).toLowerCase())}function Nl(n){return(n=vl(n))&&n.replace(vn,Jt).replace(Mn,"")}var Pl=Ti((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Ml=Ti((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),Xl=zi("toLowerCase"),$l=Ti((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()})),Fl=Ti((function(n,t,e){return n+(e?" ":"")+Hl(t)})),Jl=Ti((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Hl=zi("toUpperCase");function Gl(n,t,e){return n=vl(n),(t=e?i:t)===i?function(n){return Jn.test(n)}(n)?function(n){return n.match($n)||[]}(n):function(n){return n.match(un)||[]}(n):n.match(t)||[]}var Kl=$r((function(n,t){try{return Ct(n,i,t)}catch(n){return Ha(n)?n:new bn(n)}})),ns=no((function(n,t){return It(t,(function(t){t=Do(t),ir(n,t,La(n[t],n))})),n}));function ts(n){return function(){return n}}var es=Oi(),rs=Oi(!0);function is(n){return n}function os(n){return Tr("function"==typeof n?n:lr(n,1))}var as=$r((function(n,t){return function(e){return Vr(e,n,t)}})),ls=$r((function(n,t){return function(e){return Vr(n,e,t)}}));function ss(n,t,e){var r=jl(t),i=Br(t,r);null!=e||tl(t)&&(i.length||!r.length)||(e=t,t=n,n=this,i=Br(t,jl(t)));var o=!(tl(e)&&"chain"in e&&!e.chain),a=Ga(n);return It(i,(function(e){var r=t[e];n[e]=r,a&&(n.prototype[e]=function(){var t=this.__chain__;if(o||t){var e=n(this.__wrapped__),i=e.__actions__=_i(this.__actions__);return i.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,_t([this.value()],arguments))})})),n}function us(){}var As=Ri(xt),cs=Ri(bt),ps=Ri(Lt);function ds(n){return vo(n)?Dt(Do(n)):function(n){return function(t){return br(t,n)}}(n)}var fs=Ui(),hs=Ui(!0);function gs(){return[]}function ms(){return!1}var Cs,vs=Zi((function(n,t){return n+t}),0),Is=Mi("ceil"),Bs=Zi((function(n,t){return n/t}),1),bs=Mi("floor"),ys=Zi((function(n,t){return n*t}),1),ws=Mi("round"),ks=Zi((function(n,t){return n-t}),0);return qe.after=function(n,t){if("function"!=typeof t)throw new En(o);return n=hl(n),function(){if(--n<1)return t.apply(this,arguments)}},qe.ary=Ea,qe.assign=Il,qe.assignIn=Bl,qe.assignInWith=bl,qe.assignWith=yl,qe.at=wl,qe.before=Va,qe.bind=La,qe.bindAll=ns,qe.bindKey=Sa,qe.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Pa(n)?n:[n]},qe.chain=da,qe.chunk=function(n,t,e){t=(e?Co(n,t,e):t===i)?1:me(hl(t),0);var o=null==n?0:n.length;if(!o||t<1)return[];for(var a=0,l=0,s=r(Ae(o/t));a<o;)s[l++]=ti(n,a,a+=t);return s},qe.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,i=[];++t<e;){var o=n[t];o&&(i[r++]=o)}return i},qe.concat=function(){var n=arguments.length;if(!n)return[];for(var t=r(n-1),e=arguments[0],i=n;i--;)t[i-1]=arguments[i];return _t(Pa(e)?_i(e):[e],gr(t,1))},qe.cond=function(n){var t=null==n?0:n.length,e=ao();return n=t?xt(n,(function(n){if("function"!=typeof n[1])throw new En(o);return[e(n[0]),n[1]]})):[],$r((function(e){for(var r=-1;++r<t;){var i=n[r];if(Ct(i[0],this,e))return Ct(i[1],this,e)}}))},qe.conforms=function(n){return function(n){var t=jl(n);return function(e){return sr(e,n,t)}}(lr(n,1))},qe.constant=ts,qe.countBy=ga,qe.create=function(n,t){var e=Ze(n);return null==t?e:rr(e,t)},qe.curry=function n(t,e,r){var o=Fi(t,8,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},qe.curryRight=function n(t,e,r){var o=Fi(t,16,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},qe.debounce=ja,qe.defaults=kl,qe.defaultsDeep=xl,qe.defer=za,qe.delay=Ta,qe.difference=Ro,qe.differenceBy=Qo,qe.differenceWith=Uo,qe.drop=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,(t=e||t===i?1:hl(t))<0?0:t,r):[]},qe.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,0,(t=r-(t=e||t===i?1:hl(t)))<0?0:t):[]},qe.dropRightWhile=function(n,t){return n&&n.length?ci(n,ao(t,3),!0,!0):[]},qe.dropWhile=function(n,t){return n&&n.length?ci(n,ao(t,3),!0):[]},qe.fill=function(n,t,e,r){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Co(n,t,e)&&(e=0,r=o),function(n,t,e,r){var o=n.length;for((e=hl(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:hl(r))<0&&(r+=o),r=e>r?0:gl(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},qe.filter=function(n,t){return(Pa(n)?yt:hr)(n,ao(t,3))},qe.flatMap=function(n,t){return gr(wa(n,t),1)},qe.flatMapDeep=function(n,t){return gr(wa(n,t),A)},qe.flatMapDepth=function(n,t,e){return e=e===i?1:hl(e),gr(wa(n,t),e)},qe.flatten=Mo,qe.flattenDeep=function(n){return null!=n&&n.length?gr(n,A):[]},qe.flattenDepth=function(n,t){return null!=n&&n.length?gr(n,t=t===i?1:hl(t)):[]},qe.flip=function(n){return Fi(n,512)},qe.flow=es,qe.flowRight=rs,qe.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var i=n[t];r[i[0]]=i[1]}return r},qe.functions=function(n){return null==n?[]:Br(n,jl(n))},qe.functionsIn=function(n){return null==n?[]:Br(n,zl(n))},qe.groupBy=Ba,qe.initial=function(n){return null!=n&&n.length?ti(n,0,-1):[]},qe.intersection=$o,qe.intersectionBy=Fo,qe.intersectionWith=Jo,qe.invert=Vl,qe.invertBy=Ll,qe.invokeMap=ba,qe.iteratee=os,qe.keyBy=ya,qe.keys=jl,qe.keysIn=zl,qe.map=wa,qe.mapKeys=function(n,t){var e={};return t=ao(t,3),vr(n,(function(n,r,i){ir(e,t(n,r,i),n)})),e},qe.mapValues=function(n,t){var e={};return t=ao(t,3),vr(n,(function(n,r,i){ir(e,r,t(n,r,i))})),e},qe.matches=function(n){return Dr(lr(n,1))},qe.matchesProperty=function(n,t){return qr(n,lr(t,1))},qe.memoize=Wa,qe.merge=Tl,qe.mergeWith=Wl,qe.method=as,qe.methodOf=ls,qe.mixin=ss,qe.negate=Ya,qe.nthArg=function(n){return n=hl(n),$r((function(t){return Rr(t,n)}))},qe.omit=Yl,qe.omitBy=function(n,t){return Dl(n,Ya(ao(t)))},qe.once=function(n){return Va(2,n)},qe.orderBy=function(n,t,e,r){return null==n?[]:(Pa(t)||(t=null==t?[]:[t]),Pa(e=r?i:e)||(e=null==e?[]:[e]),Qr(n,t,e))},qe.over=As,qe.overArgs=Oa,qe.overEvery=cs,qe.overSome=ps,qe.partial=Da,qe.partialRight=qa,qe.partition=ka,qe.pick=Ol,qe.pickBy=Dl,qe.property=ds,qe.propertyOf=function(n){return function(t){return null==n?i:br(n,t)}},qe.pull=Go,qe.pullAll=Ko,qe.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Nr(n,t,ao(e,2)):n},qe.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Nr(n,t,i,e):n},qe.pullAt=na,qe.range=fs,qe.rangeRight=hs,qe.rearg=Za,qe.reject=function(n,t){return(Pa(n)?yt:hr)(n,Ya(ao(t,3)))},qe.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,i=[],o=n.length;for(t=ao(t,3);++r<o;){var a=n[r];t(a,r,n)&&(e.push(a),i.push(r))}return Pr(n,i),e},qe.rest=function(n,t){if("function"!=typeof n)throw new En(o);return $r(n,t=t===i?t:hl(t))},qe.reverse=ta,qe.sampleSize=function(n,t,e){return t=(e?Co(n,t,e):t===i)?1:hl(t),(Pa(n)?He:Jr)(n,t)},qe.set=function(n,t,e){return null==n?n:Hr(n,t,e)},qe.setWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:Hr(n,t,e,r)},qe.shuffle=function(n){return(Pa(n)?Ge:ni)(n)},qe.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&Co(n,t,e)?(t=0,e=r):(t=null==t?0:hl(t),e=e===i?r:hl(e)),ti(n,t,e)):[]},qe.sortBy=xa,qe.sortedUniq=function(n){return n&&n.length?oi(n):[]},qe.sortedUniqBy=function(n,t){return n&&n.length?oi(n,ao(t,2)):[]},qe.split=function(n,t,e){return e&&"number"!=typeof e&&Co(n,t,e)&&(t=e=i),(e=e===i?d:e>>>0)?(n=vl(n))&&("string"==typeof t||null!=t&&!al(t))&&!(t=li(t))&&Kt(n)?vi(ae(n),0,e):n.split(t,e):[]},qe.spread=function(n,t){if("function"!=typeof n)throw new En(o);return t=null==t?0:me(hl(t),0),$r((function(e){var r=e[t],i=vi(e,0,t);return r&&_t(i,r),Ct(n,this,i)}))},qe.tail=function(n){var t=null==n?0:n.length;return t?ti(n,1,t):[]},qe.take=function(n,t,e){return n&&n.length?ti(n,0,(t=e||t===i?1:hl(t))<0?0:t):[]},qe.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,(t=r-(t=e||t===i?1:hl(t)))<0?0:t,r):[]},qe.takeRightWhile=function(n,t){return n&&n.length?ci(n,ao(t,3),!1,!0):[]},qe.takeWhile=function(n,t){return n&&n.length?ci(n,ao(t,3)):[]},qe.tap=function(n,t){return t(n),n},qe.throttle=function(n,t,e){var r=!0,i=!0;if("function"!=typeof n)throw new En(o);return tl(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),ja(n,t,{leading:r,maxWait:t,trailing:i})},qe.thru=fa,qe.toArray=dl,qe.toPairs=ql,qe.toPairsIn=Zl,qe.toPath=function(n){return Pa(n)?xt(n,Do):ul(n)?[n]:_i(Oo(vl(n)))},qe.toPlainObject=Cl,qe.transform=function(n,t,e){var r=Pa(n),i=r||Fa(n)||Al(n);if(t=ao(t,4),null==e){var o=n&&n.constructor;e=i?r?new o:[]:tl(n)&&Ga(o)?Ze(Xn(n)):{}}return(i?It:vr)(n,(function(n,r,i){return t(e,n,r,i)})),e},qe.unary=function(n){return Ea(n,1)},qe.union=ea,qe.unionBy=ra,qe.unionWith=ia,qe.uniq=function(n){return n&&n.length?si(n):[]},qe.uniqBy=function(n,t){return n&&n.length?si(n,ao(t,2)):[]},qe.uniqWith=function(n,t){return t="function"==typeof t?t:i,n&&n.length?si(n,i,t):[]},qe.unset=function(n,t){return null==n||ui(n,t)},qe.unzip=oa,qe.unzipWith=aa,qe.update=function(n,t,e){return null==n?n:Ai(n,t,gi(e))},qe.updateWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:Ai(n,t,gi(e),r)},qe.values=Rl,qe.valuesIn=function(n){return null==n?[]:Pt(n,zl(n))},qe.without=la,qe.words=Gl,qe.wrap=function(n,t){return Da(gi(t),n)},qe.xor=sa,qe.xorBy=ua,qe.xorWith=Aa,qe.zip=ca,qe.zipObject=function(n,t){return fi(n||[],t||[],nr)},qe.zipObjectDeep=function(n,t){return fi(n||[],t||[],Hr)},qe.zipWith=pa,qe.entries=ql,qe.entriesIn=Zl,qe.extend=Bl,qe.extendWith=bl,ss(qe,qe),qe.add=vs,qe.attempt=Kl,qe.camelCase=Ql,qe.capitalize=Ul,qe.ceil=Is,qe.clamp=function(n,t,e){return e===i&&(e=t,t=i),e!==i&&(e=(e=ml(e))==e?e:0),t!==i&&(t=(t=ml(t))==t?t:0),ar(ml(n),t,e)},qe.clone=function(n){return lr(n,4)},qe.cloneDeep=function(n){return lr(n,5)},qe.cloneDeepWith=function(n,t){return lr(n,5,t="function"==typeof t?t:i)},qe.cloneWith=function(n,t){return lr(n,4,t="function"==typeof t?t:i)},qe.conformsTo=function(n,t){return null==t||sr(n,t,jl(t))},qe.deburr=Nl,qe.defaultTo=function(n,t){return null==n||n!=n?t:n},qe.divide=Bs,qe.endsWith=function(n,t,e){n=vl(n),t=li(t);var r=n.length,o=e=e===i?r:ar(hl(e),0,r);return(e-=t.length)>=0&&n.slice(e,o)==t},qe.eq=Ra,qe.escape=function(n){return(n=vl(n))&&$.test(n)?n.replace(M,Ht):n},qe.escapeRegExp=function(n){return(n=vl(n))&&en.test(n)?n.replace(tn,"\\$&"):n},qe.every=function(n,t,e){var r=Pa(n)?bt:dr;return e&&Co(n,t,e)&&(t=i),r(n,ao(t,3))},qe.find=ma,qe.findIndex=No,qe.findKey=function(n,t){return jt(n,ao(t,3),vr)},qe.findLast=Ca,qe.findLastIndex=Po,qe.findLastKey=function(n,t){return jt(n,ao(t,3),Ir)},qe.floor=bs,qe.forEach=va,qe.forEachRight=Ia,qe.forIn=function(n,t){return null==n?n:mr(n,ao(t,3),zl)},qe.forInRight=function(n,t){return null==n?n:Cr(n,ao(t,3),zl)},qe.forOwn=function(n,t){return n&&vr(n,ao(t,3))},qe.forOwnRight=function(n,t){return n&&Ir(n,ao(t,3))},qe.get=_l,qe.gt=Qa,qe.gte=Ua,qe.has=function(n,t){return null!=n&&fo(n,t,xr)},qe.hasIn=El,qe.head=Xo,qe.identity=is,qe.includes=function(n,t,e,r){n=Xa(n)?n:Rl(n),e=e&&!r?hl(e):0;var i=n.length;return e<0&&(e=me(i+e,0)),sl(n)?e<=i&&n.indexOf(t,e)>-1:!!i&&Tt(n,t,e)>-1},qe.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var i=null==e?0:hl(e);return i<0&&(i=me(r+i,0)),Tt(n,t,i)},qe.inRange=function(n,t,e){return t=fl(t),e===i?(e=t,t=0):e=fl(e),function(n,t,e){return n>=Ce(t,e)&&n<me(t,e)}(n=ml(n),t,e)},qe.invoke=Sl,qe.isArguments=Na,qe.isArray=Pa,qe.isArrayBuffer=Ma,qe.isArrayLike=Xa,qe.isArrayLikeObject=$a,qe.isBoolean=function(n){return!0===n||!1===n||el(n)&&wr(n)==m},qe.isBuffer=Fa,qe.isDate=Ja,qe.isElement=function(n){return el(n)&&1===n.nodeType&&!ol(n)},qe.isEmpty=function(n){if(null==n)return!0;if(Xa(n)&&(Pa(n)||"string"==typeof n||"function"==typeof n.splice||Fa(n)||Al(n)||Na(n)))return!n.length;var t=po(n);if(t==b||t==_)return!n.size;if(bo(n))return!Wr(n).length;for(var e in n)if(Tn.call(n,e))return!1;return!0},qe.isEqual=function(n,t){return Sr(n,t)},qe.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:i)?e(n,t):i;return r===i?Sr(n,t,i,e):!!r},qe.isError=Ha,qe.isFinite=function(n){return"number"==typeof n&&fe(n)},qe.isFunction=Ga,qe.isInteger=Ka,qe.isLength=nl,qe.isMap=rl,qe.isMatch=function(n,t){return n===t||jr(n,t,so(t))},qe.isMatchWith=function(n,t,e){return e="function"==typeof e?e:i,jr(n,t,so(t),e)},qe.isNaN=function(n){return il(n)&&n!=+n},qe.isNative=function(n){if(Bo(n))throw new bn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return zr(n)},qe.isNil=function(n){return null==n},qe.isNull=function(n){return null===n},qe.isNumber=il,qe.isObject=tl,qe.isObjectLike=el,qe.isPlainObject=ol,qe.isRegExp=al,qe.isSafeInteger=function(n){return Ka(n)&&n>=-9007199254740991&&n<=c},qe.isSet=ll,qe.isString=sl,qe.isSymbol=ul,qe.isTypedArray=Al,qe.isUndefined=function(n){return n===i},qe.isWeakMap=function(n){return el(n)&&po(n)==L},qe.isWeakSet=function(n){return el(n)&&"[object WeakSet]"==wr(n)},qe.join=function(n,t){return null==n?"":he.call(n,t)},qe.kebabCase=Pl,qe.last=Ho,qe.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=hl(e))<0?me(r+o,0):Ce(o,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,o):zt(n,Yt,o,!0)},qe.lowerCase=Ml,qe.lowerFirst=Xl,qe.lt=cl,qe.lte=pl,qe.max=function(n){return n&&n.length?fr(n,is,kr):i},qe.maxBy=function(n,t){return n&&n.length?fr(n,ao(t,2),kr):i},qe.mean=function(n){return Ot(n,is)},qe.meanBy=function(n,t){return Ot(n,ao(t,2))},qe.min=function(n){return n&&n.length?fr(n,is,Yr):i},qe.minBy=function(n,t){return n&&n.length?fr(n,ao(t,2),Yr):i},qe.stubArray=gs,qe.stubFalse=ms,qe.stubObject=function(){return{}},qe.stubString=function(){return""},qe.stubTrue=function(){return!0},qe.multiply=ys,qe.nth=function(n,t){return n&&n.length?Rr(n,hl(t)):i},qe.noConflict=function(){return at._===this&&(at._=qn),this},qe.noop=us,qe.now=_a,qe.pad=function(n,t,e){n=vl(n);var r=(t=hl(t))?oe(n):0;if(!t||r>=t)return n;var i=(t-r)/2;return Qi(ce(i),e)+n+Qi(Ae(i),e)},qe.padEnd=function(n,t,e){n=vl(n);var r=(t=hl(t))?oe(n):0;return t&&r<t?n+Qi(t-r,e):n},qe.padStart=function(n,t,e){n=vl(n);var r=(t=hl(t))?oe(n):0;return t&&r<t?Qi(t-r,e)+n:n},qe.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),Ie(vl(n).replace(rn,""),t||0)},qe.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Co(n,t,e)&&(t=e=i),e===i&&("boolean"==typeof t?(e=t,t=i):"boolean"==typeof n&&(e=n,n=i)),n===i&&t===i?(n=0,t=1):(n=fl(n),t===i?(t=n,n=0):t=fl(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var o=Be();return Ce(n+o*(t-n+et("1e-"+((o+"").length-1))),t)}return Mr(n,t)},qe.reduce=function(n,t,e){var r=Pa(n)?Et:Zt,i=arguments.length<3;return r(n,ao(t,4),e,i,cr)},qe.reduceRight=function(n,t,e){var r=Pa(n)?Vt:Zt,i=arguments.length<3;return r(n,ao(t,4),e,i,pr)},qe.repeat=function(n,t,e){return t=(e?Co(n,t,e):t===i)?1:hl(t),Xr(vl(n),t)},qe.replace=function(){var n=arguments,t=vl(n[0]);return n.length<3?t:t.replace(n[1],n[2])},qe.result=function(n,t,e){var r=-1,o=(t=mi(t,n)).length;for(o||(o=1,n=i);++r<o;){var a=null==n?i:n[Do(t[r])];a===i&&(r=o,a=e),n=Ga(a)?a.call(n):a}return n},qe.round=ws,qe.runInContext=n,qe.sample=function(n){return(Pa(n)?Je:Fr)(n)},qe.size=function(n){if(null==n)return 0;if(Xa(n))return sl(n)?oe(n):n.length;var t=po(n);return t==b||t==_?n.size:Wr(n).length},qe.snakeCase=$l,qe.some=function(n,t,e){var r=Pa(n)?Lt:ei;return e&&Co(n,t,e)&&(t=i),r(n,ao(t,3))},qe.sortedIndex=function(n,t){return ri(n,t)},qe.sortedIndexBy=function(n,t,e){return ii(n,t,ao(e,2))},qe.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=ri(n,t);if(r<e&&Ra(n[r],t))return r}return-1},qe.sortedLastIndex=function(n,t){return ri(n,t,!0)},qe.sortedLastIndexBy=function(n,t,e){return ii(n,t,ao(e,2),!0)},qe.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=ri(n,t,!0)-1;if(Ra(n[e],t))return e}return-1},qe.startCase=Fl,qe.startsWith=function(n,t,e){return n=vl(n),e=null==e?0:ar(hl(e),0,n.length),t=li(t),n.slice(e,e+t.length)==t},qe.subtract=ks,qe.sum=function(n){return n&&n.length?Rt(n,is):0},qe.sumBy=function(n,t){return n&&n.length?Rt(n,ao(t,2)):0},qe.template=function(n,t,e){var r=qe.templateSettings;e&&Co(n,t,e)&&(t=i),n=vl(n),t=bl({},t,r,Ji);var o,a,l=bl({},t.imports,r.imports,Ji),s=jl(l),u=Pt(l,s),A=0,c=t.interpolate||In,p="__p += '",d=xn((t.escape||In).source+"|"+c.source+"|"+(c===H?pn:In).source+"|"+(t.evaluate||In).source+"|$","g"),f="//# sourceURL="+(Tn.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Gn+"]")+"\n";n.replace(d,(function(t,e,r,i,l,s){return r||(r=i),p+=n.slice(A,s).replace(Bn,Gt),e&&(o=!0,p+="' +\n__e("+e+") +\n'"),l&&(a=!0,p+="';\n"+l+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),A=s+t.length,t})),p+="';\n";var h=Tn.call(t,"variable")&&t.variable;if(h){if(An.test(h))throw new bn("Invalid `variable` option passed into `_.template`")}else p="with (obj) {\n"+p+"\n}\n";p=(a?p.replace(Q,""):p).replace(U,"$1").replace(N,"$1;"),p="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Kl((function(){return yn(s,f+"return "+p).apply(i,u)}));if(g.source=p,Ha(g))throw g;return g},qe.times=function(n,t){if((n=hl(n))<1||n>c)return[];var e=d,r=Ce(n,d);t=ao(t),n-=d;for(var i=Qt(r,t);++e<n;)t(e);return i},qe.toFinite=fl,qe.toInteger=hl,qe.toLength=gl,qe.toLower=function(n){return vl(n).toLowerCase()},qe.toNumber=ml,qe.toSafeInteger=function(n){return n?ar(hl(n),-9007199254740991,c):0===n?n:0},qe.toString=vl,qe.toUpper=function(n){return vl(n).toUpperCase()},qe.trim=function(n,t,e){if((n=vl(n))&&(e||t===i))return Ut(n);if(!n||!(t=li(t)))return n;var r=ae(n),o=ae(t);return vi(r,Xt(r,o),$t(r,o)+1).join("")},qe.trimEnd=function(n,t,e){if((n=vl(n))&&(e||t===i))return n.slice(0,le(n)+1);if(!n||!(t=li(t)))return n;var r=ae(n);return vi(r,0,$t(r,ae(t))+1).join("")},qe.trimStart=function(n,t,e){if((n=vl(n))&&(e||t===i))return n.replace(rn,"");if(!n||!(t=li(t)))return n;var r=ae(n);return vi(r,Xt(r,ae(t))).join("")},qe.truncate=function(n,t){var e=30,r="...";if(tl(t)){var o="separator"in t?t.separator:o;e="length"in t?hl(t.length):e,r="omission"in t?li(t.omission):r}var a=(n=vl(n)).length;if(Kt(n)){var l=ae(n);a=l.length}if(e>=a)return n;var s=e-oe(r);if(s<1)return r;var u=l?vi(l,0,s).join(""):n.slice(0,s);if(o===i)return u+r;if(l&&(s+=u.length-s),al(o)){if(n.slice(s).search(o)){var A,c=u;for(o.global||(o=xn(o.source,vl(dn.exec(o))+"g")),o.lastIndex=0;A=o.exec(c);)var p=A.index;u=u.slice(0,p===i?s:p)}}else if(n.indexOf(li(o),s)!=s){var d=u.lastIndexOf(o);d>-1&&(u=u.slice(0,d))}return u+r},qe.unescape=function(n){return(n=vl(n))&&X.test(n)?n.replace(P,se):n},qe.uniqueId=function(n){var t=++Wn;return vl(n)+t},qe.upperCase=Jl,qe.upperFirst=Hl,qe.each=va,qe.eachRight=Ia,qe.first=Xo,ss(qe,(Cs={},vr(qe,(function(n,t){Tn.call(qe.prototype,t)||(Cs[t]=n)})),Cs),{chain:!1}),qe.VERSION="4.17.21",It(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){qe[n].placeholder=qe})),It(["drop","take"],(function(n,t){Ue.prototype[n]=function(e){e=e===i?1:me(hl(e),0);var r=this.__filtered__&&!t?new Ue(this):this.clone();return r.__filtered__?r.__takeCount__=Ce(e,r.__takeCount__):r.__views__.push({size:Ce(e,d),type:n+(r.__dir__<0?"Right":"")}),r},Ue.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),It(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Ue.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:ao(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),It(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ue.prototype[n]=function(){return this[e](1).value()[0]}})),It(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ue.prototype[n]=function(){return this.__filtered__?new Ue(this):this[e](1)}})),Ue.prototype.compact=function(){return this.filter(is)},Ue.prototype.find=function(n){return this.filter(n).head()},Ue.prototype.findLast=function(n){return this.reverse().find(n)},Ue.prototype.invokeMap=$r((function(n,t){return"function"==typeof n?new Ue(this):this.map((function(e){return Vr(e,n,t)}))})),Ue.prototype.reject=function(n){return this.filter(Ya(ao(n)))},Ue.prototype.slice=function(n,t){n=hl(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ue(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==i&&(e=(t=hl(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ue.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ue.prototype.toArray=function(){return this.take(d)},vr(Ue.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=qe[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(qe.prototype[t]=function(){var t=this.__wrapped__,l=r?[1]:arguments,s=t instanceof Ue,u=l[0],A=s||Pa(t),c=function(n){var t=o.apply(qe,_t([n],l));return r&&p?t[0]:t};A&&e&&"function"==typeof u&&1!=u.length&&(s=A=!1);var p=this.__chain__,d=!!this.__actions__.length,f=a&&!p,h=s&&!d;if(!a&&A){t=h?t:new Ue(this);var g=n.apply(t,l);return g.__actions__.push({func:fa,args:[c],thisArg:i}),new Qe(g,p)}return f&&h?n.apply(this,l):(g=this.thru(c),f?r?g.value()[0]:g.value():g)})})),It(["pop","push","shift","sort","splice","unshift"],(function(n){var t=Vn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);qe.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(Pa(i)?i:[],n)}return this[e]((function(e){return t.apply(Pa(e)?e:[],n)}))}})),vr(Ue.prototype,(function(n,t){var e=qe[t];if(e){var r=e.name+"";Tn.call(Le,r)||(Le[r]=[]),Le[r].push({name:t,func:e})}})),Le[Di(i,2).name]=[{name:"wrapper",func:i}],Ue.prototype.clone=function(){var n=new Ue(this.__wrapped__);return n.__actions__=_i(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=_i(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=_i(this.__views__),n},Ue.prototype.reverse=function(){if(this.__filtered__){var n=new Ue(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ue.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Pa(n),r=t<0,i=e?n.length:0,o=function(n,t,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],a=o.size;switch(o.type){case"drop":n+=a;break;case"dropRight":t-=a;break;case"take":t=Ce(t,n+a);break;case"takeRight":n=me(n,t-a)}}return{start:n,end:t}}(0,i,this.__views__),a=o.start,l=o.end,s=l-a,u=r?l:a-1,A=this.__iteratees__,c=A.length,p=0,d=Ce(s,this.__takeCount__);if(!e||!r&&i==s&&d==s)return pi(n,this.__actions__);var f=[];n:for(;s--&&p<d;){for(var h=-1,g=n[u+=t];++h<c;){var m=A[h],C=m.iteratee,v=m.type,I=C(g);if(2==v)g=I;else if(!I){if(1==v)continue n;break n}}f[p++]=g}return f},qe.prototype.at=ha,qe.prototype.chain=function(){return da(this)},qe.prototype.commit=function(){return new Qe(this.value(),this.__chain__)},qe.prototype.next=function(){this.__values__===i&&(this.__values__=dl(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?i:this.__values__[this.__index__++]}},qe.prototype.plant=function(n){for(var t,e=this;e instanceof Re;){var r=Zo(e);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;e=e.__wrapped__}return o.__wrapped__=n,t},qe.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ue){var t=n;return this.__actions__.length&&(t=new Ue(this)),(t=t.reverse()).__actions__.push({func:fa,args:[ta],thisArg:i}),new Qe(t,this.__chain__)}return this.thru(ta)},qe.prototype.toJSON=qe.prototype.valueOf=qe.prototype.value=function(){return pi(this.__wrapped__,this.__actions__)},qe.prototype.first=qe.prototype.head,lt&&(qe.prototype[lt]=function(){return this}),qe}();at._=ue,(r=function(){return ue}.call(t,e,t,n))===i||(n.exports=r)}.call(this)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],l=0;l<n.length;l++){var s=n[l],u=r.base?s[0]+r.base:s[0],A=o[u]||0,c="".concat(u," ").concat(A);o[u]=A+1;var p=e(c),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var f=i(d,r);r.byIndex=l,t.splice(l,0,{identifier:c,updater:f,references:1})}a.push(c)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var l=e(o[a]);t[l].references--}for(var s=r(n,i),u=0;u<o.length;u++){var A=e(o[u]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}o=s}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},535:(n,t,e)=>{"use strict";n.exports=e.p+"check.svg"}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";var n=e(379),t=e.n(n),r=e(795),i=e.n(r),o=e(569),a=e.n(o),l=e(565),s=e.n(l),u=e(216),A=e.n(u),c=e(589),p=e.n(c),d=e(756),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),t()(d.Z,f),d.Z&&d.Z.locals&&d.Z.locals;var h=e(195),g={};g.styleTagTransform=p(),g.setAttributes=s(),g.insert=a().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=A(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var m=e(973),C={};C.styleTagTransform=p(),C.setAttributes=s(),C.insert=a().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=A(),t()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;var v=e(540),I={};I.styleTagTransform=p(),I.setAttributes=s(),I.insert=a().bind(null,"head"),I.domAPI=i(),I.insertStyleElement=A(),t()(v.Z,I),v.Z&&v.Z.locals&&v.Z.locals;var B=e(11),b={};b.styleTagTransform=p(),b.setAttributes=s(),b.insert=a().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=A(),t()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;var y=e(887),w={};w.styleTagTransform=p(),w.setAttributes=s(),w.insert=a().bind(null,"head"),w.domAPI=i(),w.insertStyleElement=A(),t()(y.Z,w),y.Z&&y.Z.locals&&y.Z.locals;var k=e(250),x={};x.styleTagTransform=p(),x.setAttributes=s(),x.insert=a().bind(null,"head"),x.domAPI=i(),x.insertStyleElement=A(),t()(k.Z,x),k.Z&&k.Z.locals&&k.Z.locals;var _=e(421),E={};E.styleTagTransform=p(),E.setAttributes=s(),E.insert=a().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=A(),t()(_.Z,E),_.Z&&_.Z.locals&&_.Z.locals;var V=e(486),L=e.n(V);const S=document.querySelector(":root"),j=document.querySelector("body"),z=document.querySelector("#close-menu"),T=document.querySelector("#open-menu"),W=document.querySelector("#return"),Y=document.querySelector(".loading-container"),O=document.querySelector(".toolTips"),D=document.querySelector(".alertView"),q=document.querySelector(".alertView .alert-message"),Z=document.querySelector(".alertView .alertBtns-container"),R=document.querySelector(".alertView .alert-title"),Q=document.querySelector(".menu-container"),U=document.querySelector(".menu"),N=document.querySelector(".listView-container"),P=document.querySelector(".listView"),M=document.querySelector(".contentView-container"),X=document.querySelector(".contentView"),$=document.querySelector(".right-click-dropdown"),F=document.querySelector(".menu #allTasks"),J=document.querySelector(".menu #allNotes"),H=document.querySelector(".menu #tasks"),G=document.querySelector(".menu #notes"),K=[...document.querySelectorAll(".menu .newBtn-wrapper input")],nn=[...document.querySelectorAll(".menu .newBtn-wrapper .newBtn")],tn=document.querySelector(".listView #listName"),en=document.querySelector(".listView .listNameWrapper .newBtn"),rn=document.querySelector(".listView .options"),on=document.querySelector("#sortPriority"),an=document.querySelector("#showPriority"),ln=document.querySelector("#sortDate"),sn=document.querySelector("#showDate"),un=[on,ln,an,sn],An=document.querySelector(".listView .listItems"),cn=document.querySelector(".listView .completedItems"),pn=document.querySelector(".listView .completedTitle-wrapper"),dn=document.querySelector(".listView #completedTitle"),fn=document.querySelector(".listView #removeCompleted"),hn=document.querySelector(".contentView .itemTitle"),gn=document.querySelector(".contentView textarea.description"),mn=document.querySelector(".contentView .options select"),Cn=document.querySelector(".contentView .options input[type='date']"),vn=document.querySelector(".contentView .options #delete"),In=document.querySelector(".contentView .clear");let Bn,bn,yn=N,wn=["task",0],kn={UI:!1,Data:!1,Engine:!1};const xn=[j,U,P,X],_n=["triple","double","single"];function En(n){let t=n.name,e={};return n.processes.forEach((n=>{e[n]=!1})),{loadingProcessStatus:e,name:t,...n.components}}const Vn=(()=>{let n=!1;function t(){let n;Sn.setLoadingStatus(Vn,"updatingDisplay",!0),n=S.clientWidth/U.clientWidth<3?"double":"triple","single"!==n&&(yn=N),Bn=n,e()}function e(){!function(n,t=[]){t.forEach((t=>{t.classList.add(n)}))}(Bn,xn),_n.forEach((n=>{Bn!==n&&l(n,xn)})),"single"===Bn?i():l("hide",[N,M]),setTimeout((()=>{let n=!1;[...o(),P,rn,X].forEach((t=>{!0===a(t,"horizontal")&&(n=!0)})),r()&&"single"!==Bn?(Bn="triple"===Bn?"double":"single",e()):Sn.setLoadingStatus(Vn,"updatingDisplay",!1)}),300)}function r(){let n=!1;return[...o(),N,P,rn,M,X,Q,U].forEach((t=>{!0===a(t,"horizontal")&&(n=!0)})),n}function i(){[N,M].forEach((n=>{n!==yn?n.classList.add("hide"):n.classList.remove("hide")}))}function o(){return[...document.querySelectorAll(".listView ul li")]}function a(n,t="both"){return"both"===t||"horizontal"===t?n.scrollWidth>n.clientWidth||"both"===t&&n.scrollHeight>n.clientHeight:n.scrollHeight>n.clientHeight}function l(n,t=[]){t.forEach((t=>{t.classList.remove(n)}))}function s(n){return[...n.childNodes].reduce(((n,t)=>("#text"!==t.nodeName&&n.push(t),n)),[])}function u(){"single"===Bn&&(yn=M,i(),hn.focus())}function A(n,t,e){n.setAttribute(`data-${t}`,e)}function c(n,t){return"index"===t?Number(n.getAttribute(`data-${t}`)):n.getAttribute(`data-${t}`)}function p(n,t){let e=Ln.getListName(n,t),r=document.createElement("li");A(r,"type",n),A(r,"index",t),r.textContent=e,r.addEventListener("click",(e=>{jn(0,n,t)})),r.addEventListener("contextmenu",(e=>{!function(n,t){n.preventDefault();let e=Object.entries(t);for(;$.firstChild;)$.removeChild($.firstChild);e.forEach((n=>{let t=document.createElement("li");t.textContent=n[0],t.addEventListener("click",(()=>{n[1](),o()})),$.appendChild(t)})),$.style.left=n.clientX+"px",$.style.top=n.clientY+"px",$.classList.remove("collapse");let r=document.querySelector("body"),i=n=>{console.log("outside click event triggered"),$.contains(n.target)||$.dispatchEvent(new Event("mouseleave"))},o=n=>{$.classList.add("collapse"),$.removeEventListener("mouseleave",o),r.removeEventListener("click",i)};r.addEventListener("click",i,!0),setTimeout((()=>{$.addEventListener("mouseleave",o)}),50)}(e,{"Delete this list":()=>Sn.deleteList(n,t)})})),r.addEventListener("animationend",(n=>{r.classList.contains("removing")&&r.remove()})),"task"===n?H.appendChild(r):G.appendChild(r)}function d(n){return g(wn[0],Ln.getList(...wn)).indexOf(n)}function f(n,t){let e=Ln.getItem(n,t),r=document.createElement("li");if(Ln.spawnNewItemElem(n,t),r.classList.add(n),"task"===n){let i=document.createElement("input");i.setAttribute("type","checkbox"),i.toggleAttribute("checked",e.checked),e.checked&&r.classList.add("checked"),i.addEventListener("click",(n=>{n.stopPropagation()})),i.addEventListener("input",(e=>{Ln.updateItem(n,t,{checked:e.target.checked}),e.target.checked?r.classList.add("checked"):r.classList.remove("checked")})),r.addEventListener("animationend",(n=>{if(r.classList.contains("checked")&&r.parentElement.classList.contains("listItems"))cn.appendChild(r);else if(!1===r.classList.contains("checked")&&r.parentElement.classList.contains("completedItems")){let n=[...An.children],e=d(t);if(0!==n.length)for(let t=0;t<n.length;t++){let i=d(c(n[t],"index"));if(i>e){An.children[t].insertAdjacentElement("beforebegin",r);break}if(i+1===e||t+1===n.length){An.children[t].insertAdjacentElement("afterend",r);break}}else An.appendChild(r)}})),r.appendChild(i)}let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("value",e.title),i.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{title:i.value})})),i.addEventListener("keydown",(n=>{"Enter"!==n.key&&13!==n.keyCode||(n.ctrlKey?Sn.newItem():n.target.blur())})),i.addEventListener("click",(e=>{m(n,t),u()}));let o=document.createElement("div");if(o.classList.add("textContainer"),o.addEventListener("click",(n=>{i.click()})),o.appendChild(i),r.appendChild(o),Ln.updateItemElem(n,t,{titleElem:i}),"task"===n){let i=document.createElement("select");i.classList.add("priority");let o=["low","normal","high","urgent"];o.forEach((n=>{let t=document.createElement("option");t.setAttribute("value",n),t.textContent=n[0].toUpperCase()+n.slice(1),n===e.priority&&t.toggleAttribute("selected",!0),i.appendChild(t)})),r.classList.add(e.priority),i.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{priority:i.value}),o.forEach((n=>{r.classList.remove(n)})),r.classList.add(i.value)})),r.appendChild(i),Ln.updateItemElem(n,t,{priorityElem:i});let a=document.createElement("input");a.setAttribute("type","date"),a.value="No due date"===e.date?"":e.date,""===a.value&&a.classList.add("noDate"),a.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{date:a.value})}));let l=document.createElement("div");l.classList.add("date-container"),l.appendChild(a);let s=document.createElement("p");if(s.textContent="No due date",l.appendChild(s),navigator.userAgent.toLowerCase().indexOf("firefox")>-1==0){let n=document.createElement("span");l.appendChild(n)}r.appendChild(l),Ln.updateItemElem(n,t,{dateElem:a})}return r.addEventListener("animationend",(n=>{r.classList.contains("removing")&&r.remove()})),A(r,"index",t),!0===e.checked?cn.appendChild(r):An.appendChild(r),Ln.updateItemElem(n,t,{elem:r}),i}function h(n,t){wn=[n,t],[F,...H.children,J,...G.children].forEach((e=>{c(e,"index")!==t||c(e,"type")!==n?e.classList.remove("selected"):e.classList.add("selected")})),0===t?(en.style.display="none",tn.toggleAttribute("disabled",!0)):(en.style.display="initial",tn.toggleAttribute("disabled",!1)),"note"===n?(rn.style.display="none",pn.style.display="none",cn.style.display="none"):(rn.style.display="grid",pn.style.display="grid",cn.style.display="grid"),tn.value=Ln.getListName(n,t),Ln.getListOptions(n,t).forEach(((n,t)=>{if(un[t].checked=n,t>1){let n=new Event("input");un[t].dispatchEvent(n)}}));let e=g(n,Ln.getList(n,t));[An,cn].forEach((n=>{for(;n.firstChild;)n.removeChild(n.firstChild)})),Ln.clearItemElems(),e.forEach(((t,e)=>{f(n,t)})),An.children.length>0?m(n,c(An.children[0],"index")):v()}function g(n,t=Ln.getList(...wn)){let e=null;return un[0].checked&&(e="priority"),un[1].checked&&(e=null!==e?"both":"date"),null!==e&&("priority"===e?t=Ln.sortByPriority(n,t):"date"===e?t=Ln.sortByDate(n,t):"both"===e&&(t=Ln.mixSorted(Ln.sortByPriority(n,t),Ln.sortByDate(n,t)))),t}function m(n,t){bn=[n,t],[...An.children,...cn.children].forEach((n=>{c(n,"index")!==t?n.classList.remove("selected"):n.classList.add("selected")}));let e=Ln.getItem(n,t);hn.value=e.title,gn.value=e.textBody,"task"===n&&(mn.value=e.priority,Cn.value="No due date"===e.date?"":e.date),In.style.display="none",["clear","task","note"].forEach((n=>{X.classList.remove(n)})),X.classList.add(n)}function C(n,t){if(L().isEqual(bn,[n,t])){let e=Ln.getItem(n,t).checked,r=e?cn.children:An.children;if(r.length<2)e&&An.children.length>0?m(n,c(An.children[0],"index")):v();else for(let e=0;e<r.length;e++)c(r[e],"index")===t&&(e===r.length-1?m(n,c(r[e-1],"index")):m(n,c(r[e+1],"index")))}let e=[...An.children,...cn.children];for(let n=0;n<e.length;n++)if(c(e[n],"index")===t){e[n].classList.add("removing");break}}function v(){bn=null,hn.value="",gn.value="",mn.value="normal",Cn.value="",In.style.display="grid",["clear","task","note"].forEach((n=>{X.classList.remove(n)})),X.classList.add("clear")}return En({name:"UI",processes:["updatingDisplay","loadingTooltips"],components:{updateDisplay:function(){t()},initiate:function(){t(),async function(n=s(O)){Sn.setLoadingStatus(Vn,"loadingTooltips",!0),await n.forEach((n=>{let t=s(n)[0],e=n.getAttribute("place"),r="; center";e=null===e?r:e+r,e=e.split(";").reduce(((n,t)=>{if(t.trim().length>0){let e;t.includes(":")?(e=t.trim().split(":"),e.unshift(e.shift()),e[1]=e[1].trim().split(" ")):e=["rest",t.trim().split(" ")],1===e[1].length&&(["center","right","left"].includes(e[1][0])?e[1].push("top"):["top","bottom"].includes(e[1][0])&&e[1].unshift("center"));let r=!1,i=!1;["top","bottom"].includes(e[1][0])&&(r=e[1][0]),["right","left","center"].includes(e[1][1])&&(i=e[1][1]),!1!==r&&(e[1][1]=r),!1!==i&&(e[1][0]=i);let o=!0;_n.includes(e[0])||"rest"===e[0]||(o=!1),e[1].forEach((n=>{["center","right","left","top","bottom"].includes(n)||(o=!1)})),o&&n.push(e)}return n}),[]),e=(()=>{let n=[[],[],[],[]];return e.forEach((t=>{"rest"===t[0]?n[3].push(t):"triple"===t[0]?n[0].push(t):"double"===t[0]?n[1].push(t):"single"===t[0]&&n[2].push(t)})),n.reduce(((n,t)=>(t.length>0&&n.push(t[0]),n)),[])})(),(()=>{let n=_n.slice(0);return e.reduce(((t,e)=>("rest"!==e[0]?(n.splice(n.indexOf(e[0]),1),e[1].forEach((n=>{t.push(e[0]+"-"+n)}))):e[1].forEach((e=>{n.forEach((n=>{t.push(n+"-"+e)}))})),t)),[])})().forEach((n=>{t.classList.add(n)}));let i={triple:{x:void 0,y:void 0},double:{x:void 0,y:void 0},single:{X:void 0,y:void 0}};(()=>{let n=_n.slice(0);e.forEach((t=>{let e=t[0],r=t[1][0],o=t[1][1];"rest"!==e?n.splice(n.indexOf(e),1):e=n,Array.isArray(e)||(e=[e]),e.forEach((n=>{"center"===r?i[n].x=n=>n.x+Math.round(n.width/2):"left"===r?i[n].x=n=>n.left:"right"===r&&(i[n].x=n=>n.right),"top"===o?i[n].y=n=>n.top:"bottom"===o&&(i[n].y=n=>n.bottom)}))}))})();let o=[...document.querySelectorAll(n.getAttribute("for"))],a=(t,e)=>{n.classList.add("show");let r=function(n){const t=n.getBoundingClientRect();return{left:Math.round(t.left+window.scrollX),right:Math.round(t.right+window.scrollX),top:Math.round(t.top+window.scrollY),bottom:Math.round(t.bottom+window.scrollY),x:Math.round(t.x+window.scrollX),y:Math.round(t.y+window.scrollY),width:Math.round(t.width),height:Math.round(t.height)}}(e),o=i[Bn].x(r),a=i[Bn].y(r);n.style=`--positionX: ${o}px; --positionY: ${a}px;`},l=t=>{n.classList.remove("show")};o.forEach((n=>{let t=!1;n.addEventListener("mouseover",(e=>{!1===t&&(t=!0,a(0,n))})),n.addEventListener("focus",(e=>{!1===t&&(t=!0,a(0,n))})),n.addEventListener("mouseout",(n=>{t=!1,l()})),n.addEventListener("blur",(n=>{t=!1,l()}))}))})),Sn.setLoadingStatus(Vn,"loadingTooltips",!1)}()},hideMenu:function(){[Q,U].forEach((n=>{n.classList.remove("visible")}))},switchToContentView:u,updateSingleView:i,loadingScreenVisible:n,showLoadingScreen:function(){Y.style.opacity="100%",Y.style.pointerEvents="initial",n=!0},hideLoadingScreen:function(){Y.style.opacity="0%",Y.style.pointerEvents="none",n=!1},loadData:function(){[Ln.getList("taskLists"),Ln.getList("noteLists")].forEach(((n,t)=>{let e=0===t?"task":"note";n.forEach((n=>{p(e,n)}))})),h(...wn)},alert:function(n,t){for(""!==n&&(R.textContent=n),q.textContent=t;Z.firstChild;)Z.removeChild(Z.firstChild);for(let n=2;n<arguments.length;n++){let t=document.createElement("button");t.textContent=arguments[n][0],t.addEventListener("click",(t=>{D.style.display="none",arguments[n][1]()})),Z.appendChild(t)}D.style.display="grid"},createMenuListElement:p,loadList:h,loadItem:m,getListViewOptionsData:function(){return un.reduce(((n,t)=>(n.push(t.checked),n)),[])},createListItemElement:f,updateItem:function(n,t,e,r){let i=L().isEqual(bn,[n,t]),o="listView"===e?"contentView":"listView";function a(e,r){if(r+="Elem","listView"===e)return Ln.getItemElem(n,t,r);switch(r){case"titleElem":return hn;case"priorityElem":return mn;case"dateElem":return Cn;case"textBodyElem":return gn}}Object.entries(r).forEach((n=>{let t=a(o,n[0]);["title","priority","date"].includes(n[0])&&("contentView"===o&&!0!==i||(t.value=n[1]),"date"===n[0]&&(""===n[1]?("contentView"===o&&a("listView","date").classList.add("noDate"),t.classList.add("noDate")):("contentView"===o&&a("listView","date").classList.remove("noDate"),t.classList.remove("noDate"))))}))},removeItem:C,removeList:function(n,t){wn[0]===n&&0===wn[1]&&[...An.children,...cn.children].forEach((e=>{let r=c(e,"index");Ln.getItem(n,r).listIndex===t&&C(n,r)}));let e="task"===n?[F,...H.children]:[J,...G.children];for(let r=0;r<e.length;r++)c(e[r],"index")===t&&(L().isEqual(wn,[n,t])&&(r===e.length-1?h(n,c(e[r-1],"index")):h(n,c(e[r+1],"index"))),e[r].classList.add("removing"))},getDataAttribute:c,updateListName:function(n,t,e){let r="task"===n?H.children:G.children;for(let n=0;n<r.length;n++)if(c(r[n],"index")===t){r[n].textContent=e;break}},viewOverflow:r}})})(),Ln=(()=>{const n=["taskLists","noteLists","taskItems","noteItems","taskList_0","noteList_0"];let t={task:{},note:{}};function e(n,t){let e=c.get(n+"Lists"),r=o(e);e.push(r),c.set(n+"Lists",e);let i=n+"List_"+r;return c.set(i+"_name",t),c.set(i+"_options",[!1,!1,!0,!0]),c.set(i,[]),r}function r(n,t){let e=a(n,t),r=n+"List_"+t,i=c.get(r),l=c.get(n+"Items"),s=o(l);l.push(s),c.set(n+"Items",l),i.push(s),c.set(r,i);let u=n+"Item_"+s;return c.set(u,e),s}function i(n,t){let e=n+"Item_"+t;if(c.exists(e)){let r=n+"List_"+c.get(e).listIndex,i=c.get(r);i.splice(i.indexOf(t),1),c.set(r,i);let o=c.get(n+"Items");o.splice(o.indexOf(t),1),c.set(n+"Items",o),c.remove(e)}else console.error(`Item doesn't exist: ${e}`)}function o(n){for(let t=0;t<n.length+1;t++)if(!n.includes(t))return t}function a(n,t){let e={type:n,listIndex:t,title:"",textBody:""};return"task"===n&&(e.priority="normal",e.date="No due date",e.checked=!1),e}function l(n,t){let e=n=n.trim().toLowerCase();if("task"===n&&"list"===n||(n=n.includes("task")?"task":"note"),"tasklists"===e||"notelists"===e)return c.get(n+"Lists").slice(1);"all tasks"!==e&&"all notes"!==e||(t=0);let r=n+"List_"+t;if(c.exists(r))return c.get(r+"_name")==="All "+n[0].toUpperCase()+n.slice(1)+"s"?c.get(n+"Items"):c.get(r);console.error(`List doesn't exist: ${r}`)}function s(n,t){let e=n+"Item_"+t;if(c.exists(e))return c.get(e);console.error(`Item doesn't exist: ${e}`)}function u(){localStorage.clear(),c.set("TOP_Project_ToDoList_StorageExists",!0),n.forEach((n=>c.set(n,[]))),e("task","All Tasks"),e("note","All Notes")}function A(n=wn[0],t=wn[1],e=Vn.getListViewOptionsData()){let r=n+"List_"+t+"_options";c.set(r,e)}const c={set:(n,t)=>localStorage.setItem(n,JSON.stringify(t)),get:n=>JSON.parse(localStorage.getItem(n)),remove:n=>localStorage.removeItem(n),exists:n=>null!==localStorage.getItem(n)};function p(n,t,e){e=Object.entries(e);let r=c.get(n+"Item_"+t);e.forEach((n=>{r[n[0]]=n[1]})),c.set(n+"Item_"+t,r)}return En({name:"Data",processes:["verifyingData","loadingData"],components:{getNewIndex:o,createItem:a,getList:l,getListName:function(n,t){let e=n+"List_"+t;if(c.exists(e))return c.get(e+"_name");console.error(`List doesn't exist: ${e}`)},getItem:s,initiate:function(){let t;if(Sn.setLoadingStatus(Ln,"loadingData",!0),!0===c.get("TOP_Project_ToDoList_StorageExists")?(console.log("We have pre-existing data"),t=function(){Sn.setLoadingStatus(Ln,"verifyingData",!0),console.groupCollapsed("verifyData()");let t=!0;if(n.reduce(((n,t)=>(!1===c.exists(t)&&(console.warn("the following defaultList doesn't exist:",t),n=!1),n)),!0)){console.groupCollapsed("verifying sublists and items");let n=["taskLists","noteLists"].reduce(((n,t)=>(c.get(t).forEach((e=>{let r=t.slice(0,t.length-1)+"_"+e;console.group("checking sublist:",r),Number.isInteger(e)?!1===c.exists(r)||!1===c.exists(r+"_name")?(console.warn("The sublist doesn't exist or sublist_name doesn't exist"),console.warn("Sublist exists?",c.exists(r)),console.warn("Sublist_name exists?",c.exists(r+"_name")),n=!1):""===c.get(r+"_name").trim()?(console.warn("subList_name is empty"),n=!1):!1===c.exists(r+"_options")?(console.warn("subList_options doesn't exist"),n=!1):Array.isArray(c.get(r+"_options"))?c.get(r+"_options").reduce(((t,e,r)=>("boolean"!=typeof e&&console.warn(`subList_options array contains an item with invalid value. Not a boolean. Item index is: ${r}`),n)),!0)?(console.log("verifying the items of subList",r),!1===c.get(r).reduce(((n,t)=>{let e=r.slice(0,4)+"Item_"+t;if(console.group("checking item:",e),Number.isInteger(t))if(!1===c.exists(e))console.warn("this item (",e,") doesn't exist"),n=!1;else{let t=c.get(e);console.log("verifying item's contents"),function(n,t){"string"!=typeof t&&(t=void 0);let e=Object.prototype.toString.call(n);return e=e.slice(8,e.length-1).toLowerCase(),void 0===t?e:e===t}(t,"object")?"task"!==t.type&&"note"!==t.type?(console.warn("item.type is invalid:",t.type),n=!1):Number.isInteger(t.listIndex)?"string"!=typeof t.title||"string"!=typeof t.textBody?(console.warn("item's title or textBody is not a string"),console.warn("item's title:",t.title),console.warn("item's textBody",t.textBody),n=!1):"task"===t.type&&(console.log("item is a task, verifying properties unique to task items"),"string"!=typeof t.date||"boolean"!=typeof t.checked?(console.warn("item.date is not a string or item.checked is not a boolean"),console.warn("typeof item.date:",typeof t.date),console.warn("typeof item.checked:",typeof t.checked),n=!1):"low"!==t.priority&&"normal"!==t.priority&&"high"!==t.priority&&"urgent"!==t.priority&&(console.warn("item.priority contains an invalid value:",t.priority),n=!1)):(console.warn("item's listIndex is not an Integer"),n=!1):(console.warn("item isn't an object"),n=!1)}else console.warn("item index is not an integer:",t),n=!1;return console.groupEnd("checking item:",e),n}),!0)&&(console.warn("items verification failed for:",r),n=!1)):(console.warn("sublist_options array's item verification failed"),n=!1):(console.warn("subList_options is invalid. Not an Array"),n=!1):(console.warn("The sublist index is not an integer:",e),n=!1),console.groupEnd("checking sublist:",r)})),n)),!0);console.groupEnd("verifying sublists and items"),!1===n&&(console.warn("subLists(and/or their items') verification failed"),t=!1),console.groupCollapsed("verifying items in taskItems and noteItems"),["taskItems","noteItems"].forEach((n=>{console.group("verifying items of:",n);let e=n.slice(0,4);c.get(n).forEach((n=>{let r=e+"Item_"+n;if(console.log("verifying that",r,"exists in its list"),Number.isInteger(n))if(!1===c.exists(r))console.warn(r,"doesn't exist at all"),t=!1;else{let i=c.get(r).listIndex,o=e+"List_"+i;Number.isInteger(i)?!1===c.exists(o)?(console.warn(o,"doesn't exist"),t=!1):!1===c.get(e+"List_"+i).includes(n)&&(console.warn("item doesn't exist in its list"),t=!1):(console.warn("item's listIndex is not an integer:",i),t=!1)}else console.warn("itemIndex is not an integer:",n),t=!1})),console.groupEnd("verifying items of:",n)})),console.groupEnd("verifying items in taskItems and noteItems")}else console.warn("all/some/one of the default lists were/was not found"),t=!1;return!0!==t&&!1!==t||Sn.setLoadingStatus(Ln,"verifyingData",!1),console.groupEnd("verifyData()"),t?console.log("verifyData() --\x3e result: PASSED"):console.warn("verifyData() --\x3e result: FAILED"),t}()):(console.log("Found no pre-existing data"),u(),t="new"),void 0!==t)return Sn.setLoadingStatus(Ln,"loadingData",!1),t},loadAnew:u,spawnNewItem:r,spawnNewList:e,removeItem:i,removeList:function(n,t){let e=n+"List_"+t;if(c.exists(e)){l(n,t).forEach((t=>i(n,t)));let r=c.get(n+"Lists");r.splice(r.indexOf(t),1),c.set(n+"Lists",r),c.remove(e+"_name"),c.remove(e+"_options"),c.remove(e)}else console.error(`List doesn't exist: ${e}`)},logLocalStorage:function(){console.table(L().sortBy(Object.entries(localStorage)))},updateListOptions:A,getListOptions:function(n,t){let e=n+"List_"+t+"_options";if(c.exists(e))return c.get(e);console.warn(`Data entry doesn't exist: ${e}`)},updateItem:p,getItemPosition:function(n,t){return l(n,wn[1]).indexOf(t)},clearItemElems:function(){t={task:{},note:{}}},updateItemElem:function(n,e,r){Object.entries(r).forEach((r=>{t[n][e][r[0]]=r[1]}))},spawnNewItemElem:function(n,e){t[n][e]={elem:void 0,titleElem:void 0,priorityElem:void 0,dateElem:void 0}},getItemElem:function(n,e,r){return t[n][e][r]},updateListName:function(n,t,e){let r=n+"List_"+t;c.set(r+"_name",e)},sortByDate:function(n,t=l(...wn)){return t.slice(0).sort(((t,e)=>(t=s(n,t).date,e=s(n,e).date,[t="No due date"===t?null:new Date(t),e="No due date"===e?null:new Date(e)].includes(null)?null!==t?-1:null!==e?1:0:t.getTime()===e.getTime()?0:t.getTime()-e.getTime())))},sortByPriority:function(n,t=l(...wn)){let e=["urgent","high","normal","low"];return t.sort(((t,r)=>(t=e.indexOf(s(n,t).priority))-e.indexOf(s(n,r).priority)))},mixSorted:function(){let n=arguments[0].reduce(((n,t,e)=>(n.push([t,e]),n)),[]);for(let t=1;t<arguments.length;t++)arguments[t].forEach(((t,e)=>{let r=arguments[0].indexOf(t);n[r][1]+=e}));return n.forEach(((t,e)=>{n[e][1]=t[1]/arguments.length})),n=n.sort(((n,t)=>n[1]-t[1])),n.reduce(((n,t)=>(n.push(t[0]),n)),[])},loadSampleData:function(){let n=e("task","Sample Task List"),t=e("note","Sample Note List");A("task",0,[!1,!1,!0,!1]);let i=r("task",n);p("task",i,{title:"Feed the dog"}),i=r("task",n),p("task",i,{title:"Feed the cat"}),i=r("task",n),p("task",i,{title:"Feed the neighbour's kid"}),i=r("task",n),p("task",i,{title:"Feed the monster in the closet",checked:!0}),i=r("note",t),p("note",i,{title:"Note to self",textBody:"Death is everything for the living and nothing for the dead."}),i=r("note",t),p("note",i,{title:"Another note",textBody:"just some description, don't mind me..."}),i=r("note",t),p("note",i,{title:"yet another note"})}}})})(),Sn=(()=>{const n={start:()=>{Vn.showLoadingScreen()},finish:()=>{let n=!0;Object.values(kn).forEach((t=>{!0===t&&(n=!1)})),n&&Vn.hideLoadingScreen()}};function t(t,e,r){if(!0===r)t.loadingProcessStatus[e]=!0,kn[t.name]=!0,!1===Vn.loadingScreenVisible&&n.start();else if(!1===r){t.loadingProcessStatus[e]=!1;let r=!0;Object.values(t.loadingProcessStatus).forEach((n=>{!0===n&&(r=!1)})),r&&(kn[t.name]=!1,n.finish())}}return En({name:"Engine",processes:["resetingData"],components:{initialise:function(){Vn.initiate();let n=Ln.initiate();!1===n?Vn.alert("Alert","Found old data, but it seems corrupted. Your data is going to be reset.",["Ok",()=>{Sn.resetData()}]):"new"===n?Vn.alert("Hello","This is a fresh start. Would you like to load sample lists?",["Sure",()=>{Ln.loadSampleData(),Vn.loadData()}],["No thanks",()=>{Vn.loadData()}]):Vn.loadData()},loading:n,setLoadingStatus:t,newList:function(n,t){let e=Ln.spawnNewList(n,t);Vn.createMenuListElement(n,e),Vn.loadList(n,e)},resetData:async function(){t(Sn,"resetingData",!0),await Ln.loadAnew(),await Vn.loadData(),t(Sn,"resetingData",!1)},deleteList:function(n,t){Vn.removeList(n,t),Ln.removeList(n,t)},newItem:function(){let n=wn[0],t=Ln.spawnNewItem(n,wn[1]);Vn.createListItemElement(n,t).focus(),Vn.loadItem(n,t)},updateItemProperty:function(n,t,e,r){Object.entries(r).forEach((e=>{let r=e[1];"date"===e[0]&&""===r&&(r="No due date"),Ln.updateItem(n,t,{[e[0]]:r})})),Vn.updateItem(n,t,e,r)},deleteItem:async function(n,t){let e=!1,r=Ln.getList(...wn);(L().isEqual(bn,[n,t])||r.includes(t))&&(e=!0),e&&await Vn.removeItem(n,t),Ln.removeItem(n,t)},updateListName:function(n,t,e){Vn.updateListName(n,t,e),Ln.updateListName(n,t,e)}}})})();function jn(n,t,e){Vn.loadList(t,e),z.click(),Vn.viewOverflow()&&Vn.updateDisplay()}(()=>{let n=[],t=window.innerWidth;window.onresize=e=>{n.push(0),setTimeout((()=>{if(n.pop(),0===n.length){let n=!1;("triple"!==Bn&&window.innerWidth-t>0||"single"!==Bn&&t-window.innerWidth>0&&Vn.viewOverflow())&&(n=!0),n&&Vn.updateDisplay(),t=window.innerWidth}}),200)}})(),T.addEventListener("click",(n=>{"triple"!=Bn&&[Q,U].forEach((n=>{n.classList.add("visible")}))})),z.addEventListener("click",(n=>{Vn.hideMenu()})),U.addEventListener("click",(n=>{n.stopPropagation()})),Q.addEventListener("click",(n=>{Vn.hideMenu()})),W.addEventListener("click",(n=>{yn=N,Vn.updateSingleView()})),nn.forEach(((n,t)=>{n.addEventListener("click",(n=>{K[t].style.display="initial",n.target.style.display="none",K[t].focus()}))})),K.forEach(((n,t)=>{n.addEventListener("blur",(n=>{if(n.target.style.display="none",nn[t].style.display="initial",""!==n.target.value.trim()){let e=0===t?"task":"note";Sn.newList(e,n.target.value.trim()),z.click()}n.target.value=""})),n.addEventListener("keypress",(n=>{"Enter"===n.key&&n.target.blur()}))})),F.addEventListener("click",(n=>{jn(0,"task",0)})),J.addEventListener("click",(n=>{jn(0,"note",0)})),an.addEventListener("input",(n=>{!1===n.target.checked?P.classList.add("hidePriority"):P.classList.remove("hidePriority")})),sn.addEventListener("input",(n=>{!1===n.target.checked?P.classList.add("hideDate"):P.classList.remove("hideDate")})),on.addEventListener("input",(n=>{Ln.updateListOptions(),Vn.loadList(...wn)})),ln.addEventListener("input",(n=>{Ln.updateListOptions(),Vn.loadList(...wn)})),un.forEach((n=>{n.addEventListener("input",(n=>{Ln.updateListOptions()}))})),en.addEventListener("click",(n=>{Sn.newItem()})),dn.addEventListener("click",(n=>{cn.classList.contains("collapse")?(cn.classList.remove("collapse"),dn.classList.remove("collapse")):(cn.classList.add("collapse"),dn.classList.add("collapse"))})),hn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{title:hn.value})})),gn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{textBody:gn.value});let t=gn;if(t.scrollHeight>t.clientHeight)t.style.height=t.scrollHeight+4+"px";else{let n=t.clientHeight-1;for(;n!==t.clientHeight;)n=t.clientHeight,t.style.height=t.scrollHeight+3+"px";t.style.height=t.scrollHeight+4+"px"}})),mn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{priority:mn.value})})),Cn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{date:Cn.value})})),vn.addEventListener("click",(n=>{Vn.alert("","Are you sure you want to delete this?",["Yes",()=>{Sn.deleteItem(...bn),"single"===Bn&&yn===M&&(yn=N,Vn.updateSingleView())}],["No",()=>{}])})),fn.addEventListener("click",(n=>{Vn.alert("","All completed tasks in this list will be deleted. Are you sure?",["Yes",()=>{[...cn.children].forEach((n=>{Sn.deleteItem(wn[0],Vn.getDataAttribute(n,"index"))}))}],["No",()=>{}])})),tn.addEventListener("input",(n=>{Sn.updateListName(...wn,n.target.value)})),tn.addEventListener("keydown",(n=>{"Enter"!==n.key&&13!==n.keyCode||tn.blur()})),Sn.initialise()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFDMUIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3RGLEVBQVUsSUFBTSxF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QTBCbUUsaUJBQWlCLFNBQVNDLElBQ2hEMUMsR0FBTzBLLGtCQUFrQjlLLEdBQWE4QyxFQUFNaFMsT0FBTzEwQixNQUFNLElBRTdEc2lDLEdBQTBCbUUsaUJBQWlCLFdBQVdDLElBQ2hDLFVBQWRBLEVBQU1obEMsS0FBcUMsS0FBbEJnbEMsRUFBTXdDLFNBQy9CNUcsR0FBMEIrRyxNQUM5QixJQWdDSnJGLEdBQU9nTyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy9hbGVydFZpZXcuY3NzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy9jb250ZW50Vmlldy5jc3MiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3QvLi9zcmMvc3R5bGVzL2xpc3RWaWV3LmNzcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvbG9hZGluZy5jc3MiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3QvLi9zcmMvc3R5bGVzL21haW4uY3NzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy9tZW51LmNzcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvcmlnaHRDbGlja0Ryb3BEb3duLmNzcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvdG9vbHRpcHMuY3NzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvcC10by1kby1saXN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3RvcC10by1kby1saXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RvcC10by1kby1saXN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RvcC10by1kby1saXN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvbWFpbi5jc3M/ZTgwYSIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvbWVudS5jc3M/NzAwYSIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvbGlzdFZpZXcuY3NzPzE0MTEiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3QvLi9zcmMvc3R5bGVzL2NvbnRlbnRWaWV3LmNzcz82YTYxIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy9sb2FkaW5nLmNzcz85YzFiIiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy90b29sdGlwcy5jc3M/YjQyNiIsIndlYnBhY2s6Ly90b3AtdG8tZG8tbGlzdC8uL3NyYy9zdHlsZXMvYWxlcnRWaWV3LmNzcz8xYjk5Iiwid2VicGFjazovL3RvcC10by1kby1saXN0Ly4vc3JjL3N0eWxlcy9yaWdodENsaWNrRHJvcERvd24uY3NzP2EwZWMiLCJ3ZWJwYWNrOi8vdG9wLXRvLWRvLWxpc3QvLi9zcmMvc2NyaXB0cy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5hbGVydFZpZXcge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHotaW5kZXg6IDQ7XFxuICAgIHRvcDogMCU7XFxuICAgIGxlZnQ6IDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICBkaXNwbGF5OiBub25lOyAvKiB3aWxsIGJlICdncmlkJyB2aWEgamF2YXNjcmlwdCAqL1xcbiAgICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41ODkpO1xcbn1cXG5cXG4uYWxlcnRCb3gge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTEwLCA0NSwgNDUpO1xcblxcbiAgICB3aWR0aDogbWluKDEwMHZ3LCA0MDBweCk7XFxuICAgIHBhZGRpbmc6IDN2dztcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDIwNCwgNzEsIDcxKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBnYXA6IDFyZW07XFxufVxcblxcbi5hbGVydC10aXRsZSB7XFxuICAgIGNvbG9yOiBhcXVhO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG5cXG4uYWxlcnQtbWVzc2FnZSB7XFxuICAgIGZvbnQtc2l6ZTogMS43NXJlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogcmdiKDIzOCwgMjM2LCAyMTgpO1xcbn1cXG5cXG4uYWxlcnRCdG5zLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cXG4uYWxlcnRCdG5zLWNvbnRhaW5lciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiAwLjI1ZW0gMC41ZW07XFxuICAgIFxcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzEsIDE2NywgNDgpO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMCwgMCk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVlbTtcXG4gICAgY29sb3I6IGJsYWNrO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuLmFsZXJ0QnRucy1jb250YWluZXIgYnV0dG9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMSwgNjEsIDY5KTtcXG4gICAgb3V0bGluZTogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxuICAgIHNjYWxlOiAxMDUlO1xcbn1cXG4uYWxlcnRCdG5zLWNvbnRhaW5lciBidXR0b246YWN0aXZlIHtcXG4gICAgc2NhbGU6IDk3JTtcXG4gICAgdHJhbnNpdGlvbjogNTBtcztcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9hbGVydFZpZXcuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZUFBZTtJQUNmLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFlBQVk7SUFDWixXQUFXOztJQUVYLGFBQWEsRUFBRSxrQ0FBa0M7SUFDakQscUJBQXFCOztJQUVyQixzQ0FBc0M7QUFDMUM7O0FBRUE7SUFDSSxrQ0FBa0M7O0lBRWxDLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osa0NBQWtDO0lBQ2xDLHFCQUFxQjs7SUFFckIsYUFBYTtJQUNiLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLHFCQUFxQjs7SUFFckIsaUJBQWlCO0lBQ2pCLGlCQUFpQjs7SUFFakIsbUNBQW1DO0lBQ25DLDhCQUE4QjtJQUM5QixxQkFBcUI7SUFDckIsWUFBWTs7SUFFWixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGtDQUFrQztJQUNsQyx3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjtBQUNBO0lBQ0ksVUFBVTtJQUNWLGdCQUFnQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYWxlcnRWaWV3IHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB6LWluZGV4OiA0O1xcbiAgICB0b3A6IDAlO1xcbiAgICBsZWZ0OiAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgZGlzcGxheTogbm9uZTsgLyogd2lsbCBiZSAnZ3JpZCcgdmlhIGphdmFzY3JpcHQgKi9cXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTg5KTtcXG59XFxuXFxuLmFsZXJ0Qm94IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDExMCwgNDUsIDQ1KTtcXG5cXG4gICAgd2lkdGg6IG1pbigxMDB2dywgNDAwcHgpO1xcbiAgICBwYWRkaW5nOiAzdnc7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJnYigyMDQsIDcxLCA3MSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4uYWxlcnQtdGl0bGUge1xcbiAgICBjb2xvcjogYXF1YTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmFsZXJ0LW1lc3NhZ2Uge1xcbiAgICBmb250LXNpemU6IDEuNzVyZW07XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgY29sb3I6IHJnYigyMzgsIDIzNiwgMjE4KTtcXG59XFxuXFxuLmFsZXJ0QnRucy1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG59XFxuXFxuLmFsZXJ0QnRucy1jb250YWluZXIgYnV0dG9uIHtcXG4gICAgcGFkZGluZzogMC4yNWVtIDAuNWVtO1xcbiAgICBcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMxLCAxNjcsIDQ4KTtcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDAsIDApO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjI1ZW07XFxuICAgIGNvbG9yOiBibGFjaztcXG5cXG4gICAgdHJhbnNpdGlvbjogMTAwbXM7XFxufVxcbi5hbGVydEJ0bnMtY29udGFpbmVyIGJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMjEsIDYxLCA2OSk7XFxuICAgIG91dGxpbmU6IDFweCBzb2xpZCBibGFjaztcXG4gICAgLyogY29sb3I6IHdoaXRlOyAqL1xcbiAgICBzY2FsZTogMTA1JTtcXG59XFxuLmFsZXJ0QnRucy1jb250YWluZXIgYnV0dG9uOmFjdGl2ZSB7XFxuICAgIHNjYWxlOiA5NyU7XFxuICAgIHRyYW5zaXRpb246IDUwbXM7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jb250ZW50Vmlldy1jb250YWluZXIuaGlkZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5jb250ZW50VmlldyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbnRlbnRWaWV3Q29sKTtcXG4gICAgXFxuICAgIHBhZGRpbmc6IDRweCAxMHB4O1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0byAxZnI7XFxuICAgIGdhcDogMTBweDtcXG5cXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAwO1xcbn1cXG5cXG4uY29udGVudFZpZXcuaGlkZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5jb250ZW50VmlldyAudGl0bGUtd3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG59XFxuXFxuLmNvbnRlbnRWaWV3LnNpbmdsZSAudGl0bGUtd3JhcHBlciB7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XFxufVxcblxcbi5jb250ZW50VmlldyAjcmV0dXJuIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIG9wYWNpdHk6IDc1JTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jb250ZW50VmlldyAjcmV0dXJuOmhvdmVyIHtcXG4gICAgb3BhY2l0eTogMTAwJTtcXG59XFxuXFxuLmNvbnRlbnRWaWV3ICNyZXR1cm4gaW1nIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDAlO1xcbiAgICByaWdodDogMCU7XFxufVxcblxcbi5jb250ZW50VmlldyA6OnBsYWNlaG9sZGVyIHsgLyogQ2hyb21lLCBGaXJlZm94LCBPcGVyYSwgU2FmYXJpIDEwLjErICovXFxuICAgIGNvbG9yOiB2YXIoLS1mb250Q29sKTtcXG4gICAgb3BhY2l0eTogMC41OyAvKiBGaXJlZm94ICovXFxuICB9XFxuXFxuLmNvbnRlbnRWaWV3IC5kZXNjcmlwdGlvbi13cmFwcGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxuICAgIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxufVxcblxcbi5jb250ZW50VmlldyB0ZXh0YXJlYSB7XFxuICAgIG1pbi1oZWlnaHQ6IDEzZW07XFxuICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICByZXNpemU6IG5vbmU7XFxufVxcblxcbi5jb250ZW50VmlldyAuaXRlbVRpdGxlLCAuY29udGVudFZpZXcgdGV4dGFyZWEge1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuXFxuICAgIHBhZGRpbmc6IDZweDtcXG5cXG4gICAgZm9udC1zaXplOiAxcmVtO1xcblxcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoODAsIDk4LCAxMDQpO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnNpZGVDb2wpO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLm9wdGlvbnMge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcbiAgICBhbGlnbi1zZWxmOiBzdGFydDtcXG4gICAgZ2FwOiAxY2g7XFxufVxcblxcbi5jb250ZW50VmlldyAub3B0aW9ucyAqIHtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLm9wdGlvbnMgaW5wdXRbdHlwZT0nZGF0ZSddIHtcXG4gICAgbWluLXdpZHRoOiAxM2NoO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLm9wdGlvbnMgaW5wdXQsIC5jb250ZW50VmlldyAub3B0aW9ucyBzZWxlY3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnNpZGVDb2wpO1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgcGFkZGluZzogM3B4O1xcbn1cXG5cXG4uY29udGVudFZpZXcgI2RlbGV0ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODIsIDE3LCA0NCk7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJnYigyMDEsIDE0MCwgNjEpO1xcbiAgICBjb2xvcjogcmdiKDI1NSwgMjI4LCAyMDYpO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIHBhZGRpbmc6IDNweCAyMHB4O1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuXFxuICAgIHRyYW5zaXRpb246IDEwMG1zO1xcbn1cXG5cXG4uY29udGVudFZpZXcgI2RlbGV0ZTpob3ZlciB7XFxuICAgIGJvcmRlci1jb2xvcjogcmdiKDIxOSwgMTg0LCAxMzkpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTY3LCAwLCAwKTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbn1cXG4uY29udGVudFZpZXcgI2RlbGV0ZTphY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgYm9yZGVyLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmNvbnRlbnRWaWV3ICNyZXR1cm4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBtYXgtaGVpZ2h0OiAyLjVyZW07XFxufVxcblxcbi5jb250ZW50Vmlldy5zaW5nbGUgI3JldHVybiB7XFxuICAgIGRpc3BsYXk6IGluaXRpYWw7XFxufVxcblxcbi5jb250ZW50VmlldyAuY2xlYXIge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDBweCAyMHB4O1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjgxKTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcblxcbn1cXG5cXG4uY29udGVudFZpZXcgLmNsZWFyIHAge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjM4NCk7XFxuICAgIHBhZGRpbmc6IDAuNWVtO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjM1ZW07XFxufVxcblxcbi5jb250ZW50Vmlldy5ub3RlIC5vcHRpb25zIDppcyhzZWxlY3QsIGlucHV0KSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvY29udGVudFZpZXcuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLHVDQUF1Qzs7SUFFdkMsaUJBQWlCOztJQUVqQixhQUFhO0lBQ2IsaUNBQWlDO0lBQ2pDLFNBQVM7O0lBRVQsa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsMEJBQTBCO0lBQzFCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLDZCQUE2QjtJQUM3Qiw2QkFBNkI7SUFDN0Isa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0lBQ2IscUJBQXFCO0lBQ3JCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsU0FBUztBQUNiOztBQUVBLDZCQUE2Qix5Q0FBeUM7SUFDbEUscUJBQXFCO0lBQ3JCLFlBQVksRUFBRSxZQUFZO0VBQzVCOztBQUVGO0lBQ0ksa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsV0FBVzs7SUFFWCxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksa0JBQWtCOztJQUVsQixZQUFZOztJQUVaLGVBQWU7O0lBRWYsa0NBQWtDOztJQUVsQyxrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDhCQUE4QjtJQUM5QixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLFFBQVE7QUFDWjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksa0NBQWtDO0lBQ2xDLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGtDQUFrQztJQUNsQyxtQ0FBbUM7SUFDbkMseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsZUFBZTs7SUFFZixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQ0FBZ0M7SUFDaEMsZ0NBQWdDO0lBQ2hDLFlBQVk7QUFDaEI7QUFDQTtJQUNJLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCOztJQUVqQixzQ0FBc0M7O0lBRXRDLGFBQWE7SUFDYixxQkFBcUI7O0FBRXpCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7O0lBRWpCLHNDQUFzQztJQUN0QyxjQUFjO0lBQ2QscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGVudFZpZXctY29udGFpbmVyLmhpZGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uY29udGVudFZpZXcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb250ZW50Vmlld0NvbCk7XFxuICAgIFxcbiAgICBwYWRkaW5nOiA0cHggMTBweDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG8gMWZyO1xcbiAgICBnYXA6IDEwcHg7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgei1pbmRleDogMDtcXG59XFxuXFxuLmNvbnRlbnRWaWV3LmhpZGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLnRpdGxlLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi5jb250ZW50Vmlldy5zaW5nbGUgLnRpdGxlLXdyYXBwZXIge1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xcbn1cXG5cXG4uY29udGVudFZpZXcgI3JldHVybiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBvcGFjaXR5OiA3NSU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY29udGVudFZpZXcgI3JldHVybjpob3ZlciB7XFxuICAgIG9wYWNpdHk6IDEwMCU7XFxufVxcblxcbi5jb250ZW50VmlldyAjcmV0dXJuIGltZyB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwJTtcXG4gICAgcmlnaHQ6IDAlO1xcbn1cXG5cXG4uY29udGVudFZpZXcgOjpwbGFjZWhvbGRlciB7IC8qIENocm9tZSwgRmlyZWZveCwgT3BlcmEsIFNhZmFyaSAxMC4xKyAqL1xcbiAgICBjb2xvcjogdmFyKC0tZm9udENvbCk7XFxuICAgIG9wYWNpdHk6IDAuNTsgLyogRmlyZWZveCAqL1xcbiAgfVxcblxcbi5jb250ZW50VmlldyAuZGVzY3JpcHRpb24td3JhcHBlciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbn1cXG5cXG4uY29udGVudFZpZXcgdGV4dGFyZWEge1xcbiAgICBtaW4taGVpZ2h0OiAxM2VtO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLml0ZW1UaXRsZSwgLmNvbnRlbnRWaWV3IHRleHRhcmVhIHtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcblxcbiAgICBwYWRkaW5nOiA2cHg7XFxuXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG5cXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDgwLCA5OCwgMTA0KTtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW5zaWRlQ29sKTtcXG59XFxuXFxuLmNvbnRlbnRWaWV3IC5vcHRpb25zIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXG4gICAgYWxpZ24tc2VsZjogc3RhcnQ7XFxuICAgIGdhcDogMWNoO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLm9wdGlvbnMgKiB7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuXFxuLmNvbnRlbnRWaWV3IC5vcHRpb25zIGlucHV0W3R5cGU9J2RhdGUnXSB7XFxuICAgIG1pbi13aWR0aDogMTNjaDtcXG59XFxuXFxuLmNvbnRlbnRWaWV3IC5vcHRpb25zIGlucHV0LCAuY29udGVudFZpZXcgLm9wdGlvbnMgc2VsZWN0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW5zaWRlQ29sKTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDNweDtcXG59XFxuXFxuLmNvbnRlbnRWaWV3ICNkZWxldGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTgyLCAxNywgNDQpO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMjAxLCAxNDAsIDYxKTtcXG4gICAgY29sb3I6IHJnYigyNTUsIDIyOCwgMjA2KTtcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgICBwYWRkaW5nOiAzcHggMjBweDtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLmNvbnRlbnRWaWV3ICNkZWxldGU6aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHJnYigyMTksIDE4NCwgMTM5KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE2NywgMCwgMCk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxuLmNvbnRlbnRWaWV3ICNkZWxldGU6YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGJvcmRlci1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5jb250ZW50VmlldyAjcmV0dXJuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgbWF4LWhlaWdodDogMi41cmVtO1xcbn1cXG5cXG4uY29udGVudFZpZXcuc2luZ2xlICNyZXR1cm4ge1xcbiAgICBkaXNwbGF5OiBpbml0aWFsO1xcbn1cXG5cXG4uY29udGVudFZpZXcgLmNsZWFyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBwYWRkaW5nOiAwcHggMjBweDtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI4MSk7XFxuXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG59XFxuXFxuLmNvbnRlbnRWaWV3IC5jbGVhciBwIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zODQpO1xcbiAgICBwYWRkaW5nOiAwLjVlbTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC4zNWVtO1xcbn1cXG5cXG4uY29udGVudFZpZXcubm90ZSAub3B0aW9ucyA6aXMoc2VsZWN0LCBpbnB1dCkge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2Fzc2V0cy9pbWFnZXMvY2hlY2suc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmxpc3RWaWV3LWNvbnRhaW5lci5oaWRlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmxpc3RWaWV3IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlzdFZpZXdDb2wpO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBhbGlnbi1jb250ZW50OiBzdGFydDtcXG4gICAgZ2FwOiAxNXB4O1xcblxcbiAgICBwYWRkaW5nOiAxMHB4O1xcblxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHotaW5kZXg6IDE7XFxufVxcblxcbi5saXN0Vmlldy5oaWRlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmxpc3RWaWV3IC50aXRsZS13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmxpc3RWaWV3LnRyaXBsZSAjb3Blbi1tZW51IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmxpc3RWaWV3ICNvcGVuLW1lbnUge1xcbiAgICBtYXgtaGVpZ2h0OiAyLjVyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBvcGFjaXR5OiA3NSU7XFxufVxcblxcbi5saXN0VmlldyAjb3Blbi1tZW51OmhvdmVyIHtcXG4gICAgb3BhY2l0eTogMTAwJTtcXG59XFxuXFxuLmxpc3RWaWV3ICNvcGVuLW1lbnU+aW1nIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmxpc3RWaWV3IC50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcbn1cXG5cXG4ubGlzdFZpZXcudHJpcGxlIC50aXRsZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5saXN0VmlldyAubGlzdE5hbWVXcmFwcGVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgYXV0bztcXG4gICAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4ubGlzdFZpZXcgLmxpc3ROYW1lV3JhcHBlciAubmV3QnRuIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDQ5LCA3MSwgMTAwKTtcXG4gICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43ODgpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDExNCwgMTUxLCAyMDcsIDAuMjgxKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBmb250LXNpemU6IDAuOXJlbTtcXG4gICAgcGFkZGluZzogNnB4IDE1cHg7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG5cXG4gICAgdHJhbnNpdGlvbjogMTAwbXM7XFxufVxcblxcbi5saXN0VmlldyAubGlzdE5hbWVXcmFwcGVyIC5uZXdCdG46aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40NzMpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDk1LCAxNDksIDE3MCwgMC41MjcpO1xcbn1cXG4ubGlzdFZpZXcgLmxpc3ROYW1lV3JhcHBlciAubmV3QnRuOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4jbGlzdE5hbWUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBmb250LXNpemU6IDEuNzVyZW07XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1pbi13aWR0aDogbWluLWNvbnRlbnQ7XFxufVxcbiNsaXN0TmFtZTpmb2N1cyB7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43ODEpO1xcbiAgICBib3JkZXItcmFkaXVzOiAwJTtcXG59XFxuXFxuLmxpc3RWaWV3IC5vcHRpb25zIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBnYXA6IDFjaDtcXG59XFxuXFxuLmxpc3RWaWV3IC5vcHRpb25zLCAubGlzdFZpZXcgLm9wdGlvbnMgKiB7XFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG4ubGlzdFZpZXcgLm9wdGlvbnMgOmlzKC5zb3J0LCAuc2hvdykge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBnYXA6IDAuNWNoO1xcbn1cXG5cXG4ubGlzdFZpZXcgLnNvcnQgc3BhbiB7XFxuICAgIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcblxcbi5saXN0VmlldyA6aXMoLnNvcnQsIC5zaG93KSBpbnB1dCB7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG4ubGlzdFZpZXcgOmlzKC5zb3J0LCAuc2hvdykgaW5wdXQ6OmJlZm9yZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgcGFkZGluZzogM3B4IDVweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4ubGlzdFZpZXcgOmlzKCNzb3J0UHJpb3JpdHksICNzaG93UHJpb3JpdHkpOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiAnUHJpb3JpdHknO1xcbn1cXG4ubGlzdFZpZXcgOmlzKCNzb3J0RGF0ZSwgI3Nob3dEYXRlKTo6YmVmb3JlIHtcXG4gICAgY29udGVudDogJ0RhdGUnO1xcbn1cXG4ubGlzdFZpZXcgOmlzKC5zb3J0LCAuc2hvdykgaW5wdXQ6aG92ZXI6OmJlZm9yZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOTYpO1xcbn1cXG4ubGlzdFZpZXcgOmlzKC5zb3J0LCAuc2hvdykgaW5wdXQ6Y2hlY2tlZDo6YmVmb3JlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLmxpc3RWaWV3IHVsIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ2FwOiA3cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XFxuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICAgIGdhcDogMTBweDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgcGFkZGluZzogM3B4IDEwcHg7XFxuICAgIHRyYW5zaXRpb246IDI1MG1zO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEyOSwgMjA1LCAyNTUsIDAuMTIzKTtcXG59XFxuLmxpc3RWaWV3IHVsIGxpLm5vdGUge1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG59XFxuLmxpc3RWaWV3IHVsIGxpLnNlbGVjdGVkIHtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNjIzKTtcXG59XFxuXFxuLmxpc3RWaWV3LnNpbmdsZSB1bCBsaSAudGV4dENvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmxpc3RWaWV3LnNpbmdsZSB1bCBsaSAudGV4dENvbnRhaW5lcjo6YmVmb3JlIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpOmhvdmVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzA4KTtcXG59XFxuLmxpc3RWaWV3IHVsIGxpOmZvY3VzLXdpdGhpbiB7XFxuICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgKiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLmxpc3RWaWV3IHVsIGxpICo6Zm9jdXMge1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgaW5wdXRbdHlwZT0nY2hlY2tib3gnXSB7XFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgLS1zaXplOiAxOHB4O1xcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG5cXG4gICAgLS1jb2w6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgb3BhY2l0eTogNDAlO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1jb2wpO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuXFxuICAgIHRyYW5zaXRpb246IDIwMG1zO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGkgaW5wdXRbdHlwZT0nY2hlY2tib3gnXTpob3ZlciB7XFxuICAgIG9wYWNpdHk6IDYwJTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIGlucHV0W3R5cGU9J2NoZWNrYm94J106OmJlZm9yZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgY29udGVudDogJyc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNDUsIDE3OCwgMjA5KTtcXG4gICAgdHJhbnNsYXRlOiAtMXB4IC00cHg7XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMgbGkgaW5wdXRbdHlwZT0nY2hlY2tib3gnXTo6YmVmb3JlIHtcXG4gICAgY29sb3I6IHJnYigxMzQsIDEzOSwgMjU1KTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIGlucHV0W3R5cGU9J2NoZWNrYm94J106Y2hlY2tlZDo6YmVmb3JlIHtcXG4gICAgY29udGVudDogJyc7XFxuXFxuICAgIC0taW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICAgIC0tc2l6ZTogMjBweDtcXG4gICAgbWFzay1pbWFnZTogdmFyKC0taW1hZ2UpO1xcbiAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBtYXNrLXNpemU6IHZhcigtLXNpemUpO1xcbiAgICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltYWdlKTtcXG4gICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICAtd2Via2l0LW1hc2stc2l6ZTogdmFyKC0tc2l6ZSk7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbCk7XFxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIGlucHV0W3R5cGU9J3RleHQnXSB7XFxuICAgIHBhZGRpbmc6IDVweCAwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtaW4td2lkdGg6IDVjaDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSBzZWxlY3Qge1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSBzZWxlY3Q6Zm9jdXMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saXN0Vmlld0NvbCk7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSBpbnB1dFt0eXBlPSdkYXRlJ10ge1xcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gICAgdGV4dC1hbGlnbjogZW5kO1xcbiAgICB3aWR0aDogMTRjaDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAyO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyIGlucHV0fnNwYW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyOmhvdmVyIGlucHV0fnNwYW4ge1xcbiAgICBkaXNwbGF5OiBpbml0aWFsO1xcbiAgICAtLXNpemU6IDE4cHg7XFxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNCwgMjQxLCAyNDEsIDAuNzQpO1xcblxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHotaW5kZXg6IDE7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0cmFuc2xhdGU6IC0xcHggMHB4O1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyIHAge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSAuZGF0ZS1jb250YWluZXIgaW5wdXRbdHlwZT0nZGF0ZSddfnAge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSAuZGF0ZS1jb250YWluZXI6bm90KDpob3ZlcikgaW5wdXRbdHlwZT0nZGF0ZSddLm5vRGF0ZSB7XFxuICAgIGFuaW1hdGlvbjogZmFkZU91dCAxMDBtcyBlYXNlLW91dCBmb3J3YXJkcztcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyOmhvdmVyIGlucHV0W3R5cGU9J2RhdGUnXS5ub0RhdGUge1xcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICBhbmltYXRpb246IGZhZGVJbiAxMDBtcyBlYXNlLW91dCBmb3J3YXJkcztcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lcjpub3QoOmhvdmVyKSBpbnB1dFt0eXBlPSdkYXRlJ10ubm9EYXRlK3Age1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwJTtcXG4gICAgYW5pbWF0aW9uOiBmYWRlSW4gMTAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lcjpob3ZlciBpbnB1dFt0eXBlPSdkYXRlJ10ubm9EYXRlK3Age1xcbiAgICBhbmltYXRpb246IGZhZGVPdXQgMTAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XFxuICAgIDAlIHtcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDApO1xcbiAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gICAgfVxcbiAgICA5OSUge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxufVxcbkBrZXlmcmFtZXMgZmFkZU91dCB7XFxuICAgIDAlIHtcXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgOTklIHtcXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDApO1xcbiAgICB9XFxufVxcblxcbi5jb21wbGV0ZWRUaXRsZS13cmFwcGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXFxcIlRJVExFXFxcIjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbiNjb21wbGV0ZWRUaXRsZSB7XFxuICAgIGdyaWQtYXJlYTogVElUTEU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiA3cHggMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICB0ZXh0LWFsaWduOiBzdGFydDtcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxuICAgIC0tY29sOiB3aGl0ZTtcXG4gICAgY29sb3I6IHZhcigtLWNvbCk7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXFxcIlNZTUJPTCBUSVRMRVxcXCJcXG4gICAgXFxcIkJBUiBCQVJcXFwiO1xcbiAgICBnYXA6IDBjaCAwLjVjaDtcXG4gICAgXFxuICAgIC0tdHJhbnNpdGlvbk1TOiAzMDBtcztcXG4gICAgdHJhbnNpdGlvbjogdmFyKC0tdHJhbnNpdGlvbk1TKTtcXG59XFxuXFxuI2NvbXBsZXRlZFRpdGxlPnN2ZyB7XFxuICAgIGdyaWQtYXJlYTogU1lNQk9MO1xcbiAgICBoZWlnaHQ6IDAuNjVlbTtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMWVtO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIHJvdGF0ZTogOTBkZWc7XFxuICAgIHRyYW5zaXRpb246IDEwMG1zO1xcbiAgICBhc3BlY3QtcmF0aW86IDEvMTtcXG59XFxuXFxuI2NvbXBsZXRlZFRpdGxlPnN2ZyAqIHtcXG4gICAgZmlsbDogdmFyKC0tY29sKSAhaW1wb3J0YW50O1xcbn1cXG5cXG5cXG4jY29tcGxldGVkVGl0bGUuY29sbGFwc2U+c3ZnIHtcXG4gICAgcm90YXRlOiAwZGVnO1xcbn1cXG5cXG4jY29tcGxldGVkVGl0bGU6OmFmdGVyIHtcXG4gICAgZ3JpZC1hcmVhOiBCQVI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBtYXJnaW4tdG9wOiAzcHg7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzk1KTtcXG4gICAgaGVpZ2h0OiAxcHg7XFxuICAgIFxcbiAgICB0cmFuc2l0aW9uOiA1MDBtcztcXG4gICAgd2lkdGg6IDAlO1xcbn1cXG4jY29tcGxldGVkVGl0bGU6aG92ZXIge1xcbiAgICAtLWNvbDogcmdiKDExOCwgMTc5LCAyNDgpO1xcbn1cXG4jY29tcGxldGVkVGl0bGU6YWN0aXZlIHtcXG4gICAgLS1jb2w6IHJnYigxNTMsIDIyNiwgMjI2KTtcXG59XFxuI2NvbXBsZXRlZFRpdGxlOmhvdmVyOjphZnRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2wpO1xcbn1cXG5cXG4ubGlzdFZpZXcgLmNvbXBsZXRlZFRpdGxlLXdyYXBwZXIgI3JlbW92ZUNvbXBsZXRlZCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDAlO1xcbiAgICB0cmFuc2xhdGU6IDBweCAtM3B4O1xcbiAgICBwYWRkaW5nOiAycHggOHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODQsIDcyLCAxMjgpO1xcbiAgICBjb2xvcjogcmdiKDI0MCwgMTk4LCAyNDgpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTQ1LCAxNzQsIDE4Nyk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRUaXRsZS13cmFwcGVyICNyZW1vdmVDb21wbGV0ZWQ6aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHJnYigxMjAsIDE0MywgMTYxKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE2NywgNDIsIDQyKTtcXG59XFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRUaXRsZS13cmFwcGVyICNyZW1vdmVDb21wbGV0ZWQ6YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRJdGVtcyBsaSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMzEsIDM2LCA0NCwgMC40MjUpO1xcbiAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYzNyk7XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMgbGkgaW5wdXRbdHlwZT0ndGV4dCddIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4ubGlzdFZpZXcuaGlkZVByaW9yaXR5IHNlbGVjdCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5saXN0Vmlldy5oaWRlRGF0ZSAuZGF0ZS1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubGlzdFZpZXcgLmxpc3RJdGVtcyAudGFzazpub3QoLnRhc2suY2hlY2tlZCkge1xcbiAgICBhbmltYXRpb246IHdlbGNvbWUtdG8tdW5jaGVja2VkIDIwMG1zIGVhc2Utb3V0O1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxO1xcbn1cXG5Aa2V5ZnJhbWVzIHdlbGNvbWUtdG8tdW5jaGVja2VkIHtcXG4gICAgMCUge1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgIH1cXG4gICAgNTAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgIH1cXG59XFxuXFxuLmxpc3RWaWV3IC5saXN0SXRlbXMgLnRhc2suY2hlY2tlZCB7XFxuICAgIGFuaW1hdGlvbjogbW92ZS10by1jb21wbGV0ZWQgMjAwbXM7XFxufVxcbkBrZXlmcmFtZXMgbW92ZS10by1jb21wbGV0ZWQge1xcbiAgICA1MCUge1xcbiAgICAgICAgbWF4LWhlaWdodDogNGVtO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgIH1cXG59XFxuXFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRJdGVtcyAudGFzay5jaGVja2VkIHtcXG4gICAgYW5pbWF0aW9uOiB3ZWxjb21lLXRvLWNoZWNrZWQgMjAwbXMgZWFzZS1vdXQ7XFxufVxcbkBrZXlmcmFtZXMgd2VsY29tZS10by1jaGVja2VkIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgIH1cXG4gICAgNTAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgIH1cXG59XFxuXFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRJdGVtcyAudGFzazpub3QoLnRhc2suY2hlY2tlZCkge1xcbiAgICBhbmltYXRpb246IG1vdmUtdG8tdW5jaGVja2VkIDIwMG1zO1xcbn1cXG5Aa2V5ZnJhbWVzIG1vdmUtdG8tdW5jaGVja2VkIHtcXG4gICAgNTAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICB9XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMuY29sbGFwc2Uge1xcbiAgICBhbmltYXRpb246IGNvbXBsZXRlZC1jb2xsYXBzZSAzMDBtcyBlYXNlLW91dCBmb3J3YXJkcztcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbkBrZXlmcmFtZXMgY29tcGxldGVkLWNvbGxhcHNlIHtcXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTNyZW0pO1xcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgIH1cXG59XFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRJdGVtczpub3QoLmNvbGxhcHNlKSB7XFxuICAgIGFuaW1hdGlvbjogY29tcGxldGVkLWV4cGFuZCAzMDBtcyBlYXNlLW91dCBmb3J3YXJkcztcXG59XFxuQGtleWZyYW1lcyBjb21wbGV0ZWQtZXhwYW5kIHtcXG4gICAgMCUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcmVtKTtcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIH1cXG4gICAgOTklIHtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDByZW0pO1xcbiAgICAgICAgb3BhY2l0eTogMTAwJTtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBpbml0aWFsO1xcbiAgICB9XFxufVxcblxcbi5saXN0VmlldyA6aXMoLmxpc3RJdGVtcywgLmNvbXBsZXRlZEl0ZW1zKSBsaS5yZW1vdmluZyB7XFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcbiAgICBhbmltYXRpb246IHJlbW92aW5nIDMwMG1zIGVhc2UtaW4tb3V0IGZvcndhcmRzICFpbXBvcnRhbnQ7XFxuICAgIG1heC1oZWlnaHQ6IDBlbTtcXG4gICAgb3BhY2l0eTogMCU7XFxufVxcbkBrZXlmcmFtZXMgcmVtb3Zpbmcge1xcbiAgICAwJSB7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAzZW07XFxuICAgIH1cXG4gICAgNzAlIHtcXG4gICAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDNlbTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDBlbTtcXG4gICAgfVxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJw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Q3pELGVBQWU7SUFDZixXQUFXO0FBQ2Y7QUFDQTtJQUNJO1FBQ0ksV0FBVztRQUNYLGFBQWE7UUFDYixlQUFlO0lBQ25CO0lBQ0E7UUFDSSxVQUFVO1FBQ1YsV0FBVztRQUNYLGVBQWU7SUFDbkI7SUFDQTtRQUNJLGVBQWU7SUFDbkI7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGlzdFZpZXctY29udGFpbmVyLmhpZGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubGlzdFZpZXcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saXN0Vmlld0NvbCk7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHN0YXJ0O1xcbiAgICBnYXA6IDE1cHg7XFxuXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgei1pbmRleDogMTtcXG59XFxuXFxuLmxpc3RWaWV3LmhpZGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubGlzdFZpZXcgLnRpdGxlLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubGlzdFZpZXcudHJpcGxlICNvcGVuLW1lbnUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubGlzdFZpZXcgI29wZW4tbWVudSB7XFxuICAgIG1heC1oZWlnaHQ6IDIuNXJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIG9wYWNpdHk6IDc1JTtcXG59XFxuXFxuLmxpc3RWaWV3ICNvcGVuLW1lbnU6aG92ZXIge1xcbiAgICBvcGFjaXR5OiAxMDAlO1xcbn1cXG5cXG4ubGlzdFZpZXcgI29wZW4tbWVudT5pbWcge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ubGlzdFZpZXcgLnRpdGxlIHtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbi5saXN0Vmlldy50cmlwbGUgLnRpdGxlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmxpc3RWaWV3IC5saXN0TmFtZVdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xcbiAgICBnYXA6IDEwcHg7XFxufVxcblxcbi5saXN0VmlldyAubGlzdE5hbWVXcmFwcGVyIC5uZXdCdG4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNDksIDcxLCAxMDApO1xcbiAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc4OCk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMTE0LCAxNTEsIDIwNywgMC4yODEpO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xcbiAgICBwYWRkaW5nOiA2cHggMTVweDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLmxpc3RWaWV3IC5saXN0TmFtZVdyYXBwZXIgLm5ld0J0bjpob3ZlciB7XFxuICAgIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQ3Myk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOTUsIDE0OSwgMTcwLCAwLjUyNyk7XFxufVxcbi5saXN0VmlldyAubGlzdE5hbWVXcmFwcGVyIC5uZXdCdG46YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbiNsaXN0TmFtZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGZvbnQtc2l6ZTogMS43NXJlbTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWluLXdpZHRoOiBtaW4tY29udGVudDtcXG59XFxuI2xpc3ROYW1lOmZvY3VzIHtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc4MSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAlO1xcbn1cXG5cXG4ubGlzdFZpZXcgLm9wdGlvbnMge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGdhcDogMWNoO1xcbn1cXG5cXG4ubGlzdFZpZXcgLm9wdGlvbnMsIC5saXN0VmlldyAub3B0aW9ucyAqIHtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi5saXN0VmlldyAub3B0aW9ucyA6aXMoLnNvcnQsIC5zaG93KSB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMC41Y2g7XFxufVxcblxcbi5saXN0VmlldyAuc29ydCBzcGFuIHtcXG4gICAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcXG59XFxuXFxuLmxpc3RWaWV3IDppcyguc29ydCwgLnNob3cpIGlucHV0IHtcXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcbi5saXN0VmlldyA6aXMoLnNvcnQsIC5zaG93KSBpbnB1dDo6YmVmb3JlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xcbiAgICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbi5saXN0VmlldyA6aXMoI3NvcnRQcmlvcml0eSwgI3Nob3dQcmlvcml0eSk6OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICdQcmlvcml0eSc7XFxufVxcbi5saXN0VmlldyA6aXMoI3NvcnREYXRlLCAjc2hvd0RhdGUpOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiAnRGF0ZSc7XFxufVxcbi5saXN0VmlldyA6aXMoLnNvcnQsIC5zaG93KSBpbnB1dDpob3Zlcjo6YmVmb3JlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5Nik7XFxufVxcbi5saXN0VmlldyA6aXMoLnNvcnQsIC5zaG93KSBpbnB1dDpjaGVja2VkOjpiZWZvcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBnYXA6IDdweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgICBwYWRkaW5nOiAzcHggMTBweDtcXG4gICAgdHJhbnNpdGlvbjogMjUwbXM7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTI5LCAyMDUsIDI1NSwgMC4xMjMpO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGkubm90ZSB7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGkuc2VsZWN0ZWQge1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42MjMpO1xcbn1cXG5cXG4ubGlzdFZpZXcuc2luZ2xlIHVsIGxpIC50ZXh0Q29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubGlzdFZpZXcuc2luZ2xlIHVsIGxpIC50ZXh0Q29udGFpbmVyOjpiZWZvcmUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGk6aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zMDgpO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGk6Zm9jdXMtd2l0aGluIHtcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSAqIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG4ubGlzdFZpZXcgdWwgbGkgKjpmb2N1cyB7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSBpbnB1dFt0eXBlPSdjaGVja2JveCddIHtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbiAgICAtLXNpemU6IDE4cHg7XFxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcblxcbiAgICAtLWNvbDogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICBvcGFjaXR5OiA0MCU7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWNvbCk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG5cXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG5cXG4gICAgdHJhbnNpdGlvbjogMjAwbXM7XFxufVxcbi5saXN0VmlldyB1bCBsaSBpbnB1dFt0eXBlPSdjaGVja2JveCddOmhvdmVyIHtcXG4gICAgb3BhY2l0eTogNjAlO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgaW5wdXRbdHlwZT0nY2hlY2tib3gnXTo6YmVmb3JlIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0NSwgMTc4LCAyMDkpO1xcbiAgICB0cmFuc2xhdGU6IC0xcHggLTRweDtcXG59XFxuXFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRJdGVtcyBsaSBpbnB1dFt0eXBlPSdjaGVja2JveCddOjpiZWZvcmUge1xcbiAgICBjb2xvcjogcmdiKDEzNCwgMTM5LCAyNTUpO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgaW5wdXRbdHlwZT0nY2hlY2tib3gnXTpjaGVja2VkOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiAnJztcXG5cXG4gICAgLS1pbWFnZTogdXJsKCcuLi9hc3NldHMvaW1hZ2VzL2NoZWNrLnN2ZycpO1xcbiAgICAtLXNpemU6IDIwcHg7XFxuICAgIG1hc2staW1hZ2U6IHZhcigtLWltYWdlKTtcXG4gICAgbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgbWFzay1zaXplOiB2YXIoLS1zaXplKTtcXG4gICAgLXdlYmtpdC1tYXNrLWltYWdlOiB2YXIoLS1pbWFnZSk7XFxuICAgIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgLXdlYmtpdC1tYXNrLXNpemU6IHZhcigtLXNpemUpO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2wpO1xcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSBpbnB1dFt0eXBlPSd0ZXh0J10ge1xcbiAgICBwYWRkaW5nOiA1cHggMHB4O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWluLXdpZHRoOiA1Y2g7XFxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgc2VsZWN0IHtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgc2VsZWN0OmZvY3VzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlzdFZpZXdDb2wpO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgaW5wdXRbdHlwZT0nZGF0ZSddIHtcXG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICAgIHRleHQtYWxpZ246IGVuZDtcXG4gICAgd2lkdGg6IDE0Y2g7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgei1pbmRleDogMjtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lciBpbnB1dH5zcGFuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lcjpob3ZlciBpbnB1dH5zcGFuIHtcXG4gICAgZGlzcGxheTogaW5pdGlhbDtcXG4gICAgLS1zaXplOiAxOHB4O1xcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzQsIDI0MSwgMjQxLCAwLjc0KTtcXG5cXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB6LWluZGV4OiAxO1xcbiAgICByaWdodDogMDtcXG4gICAgdHJhbnNsYXRlOiAtMXB4IDBweDtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lciBwIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyIGlucHV0W3R5cGU9J2RhdGUnXX5wIHtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG5cXG4ubGlzdFZpZXcgdWwgbGkgLmRhdGUtY29udGFpbmVyOm5vdCg6aG92ZXIpIGlucHV0W3R5cGU9J2RhdGUnXS5ub0RhdGUge1xcbiAgICBhbmltYXRpb246IGZhZGVPdXQgMTAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuXFxuLmxpc3RWaWV3IHVsIGxpIC5kYXRlLWNvbnRhaW5lcjpob3ZlciBpbnB1dFt0eXBlPSdkYXRlJ10ubm9EYXRlIHtcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gICAgYW5pbWF0aW9uOiBmYWRlSW4gMTAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSAuZGF0ZS1jb250YWluZXI6bm90KDpob3ZlcikgaW5wdXRbdHlwZT0nZGF0ZSddLm5vRGF0ZStwIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDogMCU7XFxuICAgIGFuaW1hdGlvbjogZmFkZUluIDEwMG1zIGVhc2Utb3V0IGZvcndhcmRzO1xcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5saXN0VmlldyB1bCBsaSAuZGF0ZS1jb250YWluZXI6aG92ZXIgaW5wdXRbdHlwZT0nZGF0ZSddLm5vRGF0ZStwIHtcXG4gICAgYW5pbWF0aW9uOiBmYWRlT3V0IDEwMG1zIGVhc2Utb3V0IGZvcndhcmRzO1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuQGtleWZyYW1lcyBmYWRlSW4ge1xcbiAgICAwJSB7XFxuICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTtcXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIH1cXG4gICAgOTklIHtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbn1cXG5Aa2V5ZnJhbWVzIGZhZGVPdXQge1xcbiAgICAwJSB7XFxuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgIDk5JSB7XFxuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTtcXG4gICAgfVxcbn1cXG5cXG4uY29tcGxldGVkVGl0bGUtd3JhcHBlciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJUSVRMRVxcXCI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG4jY29tcGxldGVkVGl0bGUge1xcbiAgICBncmlkLWFyZWE6IFRJVExFO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZzogN3B4IDBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xcbiAgICAtLWNvbDogd2hpdGU7XFxuICAgIGNvbG9yOiB2YXIoLS1jb2wpO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJTWU1CT0wgVElUTEVcXFwiXFxuICAgIFxcXCJCQVIgQkFSXFxcIjtcXG4gICAgZ2FwOiAwY2ggMC41Y2g7XFxuICAgIFxcbiAgICAtLXRyYW5zaXRpb25NUzogMzAwbXM7XFxuICAgIHRyYW5zaXRpb246IHZhcigtLXRyYW5zaXRpb25NUyk7XFxufVxcblxcbiNjb21wbGV0ZWRUaXRsZT5zdmcge1xcbiAgICBncmlkLWFyZWE6IFNZTUJPTDtcXG4gICAgaGVpZ2h0OiAwLjY1ZW07XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjFlbTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICByb3RhdGU6IDkwZGVnO1xcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG4gICAgYXNwZWN0LXJhdGlvOiAxLzE7XFxufVxcblxcbiNjb21wbGV0ZWRUaXRsZT5zdmcgKiB7XFxuICAgIGZpbGw6IHZhcigtLWNvbCkgIWltcG9ydGFudDtcXG59XFxuXFxuXFxuI2NvbXBsZXRlZFRpdGxlLmNvbGxhcHNlPnN2ZyB7XFxuICAgIHJvdGF0ZTogMGRlZztcXG59XFxuXFxuI2NvbXBsZXRlZFRpdGxlOjphZnRlciB7XFxuICAgIGdyaWQtYXJlYTogQkFSO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLXRvcDogM3B4O1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc5NSk7XFxuICAgIGhlaWdodDogMXB4O1xcbiAgICBcXG4gICAgdHJhbnNpdGlvbjogNTAwbXM7XFxuICAgIHdpZHRoOiAwJTtcXG59XFxuI2NvbXBsZXRlZFRpdGxlOmhvdmVyIHtcXG4gICAgLS1jb2w6IHJnYigxMTgsIDE3OSwgMjQ4KTtcXG59XFxuI2NvbXBsZXRlZFRpdGxlOmFjdGl2ZSB7XFxuICAgIC0tY29sOiByZ2IoMTUzLCAyMjYsIDIyNik7XFxufVxcbiNjb21wbGV0ZWRUaXRsZTpob3Zlcjo6YWZ0ZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sKTtcXG59XFxuXFxuLmxpc3RWaWV3IC5jb21wbGV0ZWRUaXRsZS13cmFwcGVyICNyZW1vdmVDb21wbGV0ZWQge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwJTtcXG4gICAgdHJhbnNsYXRlOiAwcHggLTNweDtcXG4gICAgcGFkZGluZzogMnB4IDhweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDg0LCA3MiwgMTI4KTtcXG4gICAgY29sb3I6IHJnYigyNDAsIDE5OCwgMjQ4KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDE0NSwgMTc0LCAxODcpO1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG5cXG4gICAgdHJhbnNpdGlvbjogMTAwbXM7XFxufVxcbi5saXN0VmlldyAuY29tcGxldGVkVGl0bGUtd3JhcHBlciAjcmVtb3ZlQ29tcGxldGVkOmhvdmVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2IoMTIwLCAxNDMsIDE2MSk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjcsIDQyLCA0Mik7XFxufVxcbi5saXN0VmlldyAuY29tcGxldGVkVGl0bGUtd3JhcHBlciAjcmVtb3ZlQ29tcGxldGVkOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMgbGkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDMxLCAzNiwgNDQsIDAuNDI1KTtcXG4gICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42MzcpO1xcbn1cXG5cXG4ubGlzdFZpZXcgLmNvbXBsZXRlZEl0ZW1zIGxpIGlucHV0W3R5cGU9J3RleHQnXSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbiAgICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuLmxpc3RWaWV3LmhpZGVQcmlvcml0eSBzZWxlY3Qge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG4ubGlzdFZpZXcuaGlkZURhdGUgLmRhdGUtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmxpc3RWaWV3IC5saXN0SXRlbXMgLnRhc2s6bm90KC50YXNrLmNoZWNrZWQpIHtcXG4gICAgYW5pbWF0aW9uOiB3ZWxjb21lLXRvLXVuY2hlY2tlZCAyMDBtcyBlYXNlLW91dDtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcXG59XFxuQGtleWZyYW1lcyB3ZWxjb21lLXRvLXVuY2hlY2tlZCB7XFxuICAgIDAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDBlbTtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICB9XFxuICAgIDUwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiA0ZW07XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICB9XFxufVxcblxcbi5saXN0VmlldyAubGlzdEl0ZW1zIC50YXNrLmNoZWNrZWQge1xcbiAgICBhbmltYXRpb246IG1vdmUtdG8tY29tcGxldGVkIDIwMG1zO1xcbn1cXG5Aa2V5ZnJhbWVzIG1vdmUtdG8tY29tcGxldGVkIHtcXG4gICAgNTAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICB9XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMgLnRhc2suY2hlY2tlZCB7XFxuICAgIGFuaW1hdGlvbjogd2VsY29tZS10by1jaGVja2VkIDIwMG1zIGVhc2Utb3V0O1xcbn1cXG5Aa2V5ZnJhbWVzIHdlbGNvbWUtdG8tY2hlY2tlZCB7XFxuICAgIDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICB9XFxuICAgIDUwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiA0ZW07XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICB9XFxufVxcblxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXMgLnRhc2s6bm90KC50YXNrLmNoZWNrZWQpIHtcXG4gICAgYW5pbWF0aW9uOiBtb3ZlLXRvLXVuY2hlY2tlZCAyMDBtcztcXG59XFxuQGtleWZyYW1lcyBtb3ZlLXRvLXVuY2hlY2tlZCB7XFxuICAgIDUwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiA0ZW07XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDBlbTtcXG4gICAgfVxcbn1cXG5cXG4ubGlzdFZpZXcgLmNvbXBsZXRlZEl0ZW1zLmNvbGxhcHNlIHtcXG4gICAgYW5pbWF0aW9uOiBjb21wbGV0ZWQtY29sbGFwc2UgMzAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5Aa2V5ZnJhbWVzIGNvbXBsZXRlZC1jb2xsYXBzZSB7XFxuICAgIDEwMCUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zcmVtKTtcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICB9XFxufVxcbi5saXN0VmlldyAuY29tcGxldGVkSXRlbXM6bm90KC5jb2xsYXBzZSkge1xcbiAgICBhbmltYXRpb246IGNvbXBsZXRlZC1leHBhbmQgMzAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XFxufVxcbkBrZXlmcmFtZXMgY29tcGxldGVkLWV4cGFuZCB7XFxuICAgIDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtM3JlbSk7XFxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICB9XFxuICAgIDk5JSB7XFxuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcmVtKTtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgICAgICBwb2ludGVyLWV2ZW50czogaW5pdGlhbDtcXG4gICAgfVxcbn1cXG5cXG4ubGlzdFZpZXcgOmlzKC5saXN0SXRlbXMsIC5jb21wbGV0ZWRJdGVtcykgbGkucmVtb3Zpbmcge1xcbiAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcXG4gICAgYW5pbWF0aW9uOiByZW1vdmluZyAzMDBtcyBlYXNlLWluLW91dCBmb3J3YXJkcyAhaW1wb3J0YW50O1xcbiAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgIG9wYWNpdHk6IDAlO1xcbn1cXG5Aa2V5ZnJhbWVzIHJlbW92aW5nIHtcXG4gICAgMCUge1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogM2VtO1xcbiAgICB9XFxuICAgIDcwJSB7XFxuICAgICAgICB3aWR0aDogNTAlO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAzZW07XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgIH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmxvYWRpbmctY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDAlO1xcbiAgICBsZWZ0OiAwJTtcXG5cXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEzLCAyMywgMTE5LCAwLjkzMik7XFxuXFxuICAgIHotaW5kZXg6IDQ7XFxuXFxuICAgIG9wYWNpdHk6IDAlO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLmxvYWRpbmcge1xcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhOyAqL1xcbiAgICBwb2ludGVyLWV2ZW50czogaW5oZXJpdDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG59XFxuXFxuLmxvYWRpbmcgaDEge1xcbiAgICBwb2ludGVyLWV2ZW50czogaW5oZXJpdDtcXG4gICAgZm9udC1zaXplOiA1NXB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIElFIDEwIGFuZCBJRSAxMSAqL1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTsgLyogU3RhbmRhcmQgc3ludGF4ICovXFxufVxcblxcbi5sb2FkaW5nIGgxOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICcuLi4nO1xcbiAgICBhbmltYXRpb246IGRvdHMgMjMwMG1zO1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBkb3RzIHtcXG4gICAgMCUge1xcbiAgICAgICAgY29udGVudDogJy4nO1xcbiAgICB9XFxuICAgIDI1JSB7XFxuICAgICAgICBjb250ZW50OiAnLic7XFxuICAgIH1cXG4gICAgNTAlIHtcXG4gICAgICAgIGNvbnRlbnQ6ICcuLic7XFxuICAgIH1cXG4gICAgNzUlIHtcXG4gICAgICAgIGNvbnRlbnQ6ICcuLi4nO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgY29udGVudDogJy4uLic7XFxuICAgIH1cXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9sb2FkaW5nLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGVBQWU7SUFDZixPQUFPO0lBQ1AsUUFBUTs7SUFFUixZQUFZO0lBQ1osV0FBVzs7SUFFWCxhQUFhO0lBQ2IscUJBQXFCOztJQUVyQiwwQ0FBMEM7O0lBRTFDLFVBQVU7O0lBRVYsV0FBVzs7SUFFWCxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSw0QkFBNEI7SUFDNUIsdUJBQXVCOztJQUV2QixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixrQkFBa0I7O0lBRWxCLHlCQUF5QixFQUFFLFdBQVc7SUFDdEMscUJBQXFCLEVBQUUsb0JBQW9CO0lBQzNDLGlCQUFpQixFQUFFLG9CQUFvQjtBQUMzQzs7QUFFQTtJQUNJLGNBQWM7SUFDZCxzQkFBc0I7SUFDdEIsbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0k7UUFDSSxZQUFZO0lBQ2hCO0lBQ0E7UUFDSSxZQUFZO0lBQ2hCO0lBQ0E7UUFDSSxhQUFhO0lBQ2pCO0lBQ0E7UUFDSSxjQUFjO0lBQ2xCO0lBQ0E7UUFDSSxjQUFjO0lBQ2xCO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxvYWRpbmctY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDAlO1xcbiAgICBsZWZ0OiAwJTtcXG5cXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEzLCAyMywgMTE5LCAwLjkzMik7XFxuXFxuICAgIHotaW5kZXg6IDQ7XFxuXFxuICAgIG9wYWNpdHk6IDAlO1xcblxcbiAgICB0cmFuc2l0aW9uOiAxMDBtcztcXG59XFxuXFxuLmxvYWRpbmcge1xcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhOyAqL1xcbiAgICBwb2ludGVyLWV2ZW50czogaW5oZXJpdDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG59XFxuXFxuLmxvYWRpbmcgaDEge1xcbiAgICBwb2ludGVyLWV2ZW50czogaW5oZXJpdDtcXG4gICAgZm9udC1zaXplOiA1NXB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIElFIDEwIGFuZCBJRSAxMSAqL1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTsgLyogU3RhbmRhcmQgc3ludGF4ICovXFxufVxcblxcbi5sb2FkaW5nIGgxOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICcuLi4nO1xcbiAgICBhbmltYXRpb246IGRvdHMgMjMwMG1zO1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBkb3RzIHtcXG4gICAgMCUge1xcbiAgICAgICAgY29udGVudDogJy4nO1xcbiAgICB9XFxuICAgIDI1JSB7XFxuICAgICAgICBjb250ZW50OiAnLic7XFxuICAgIH1cXG4gICAgNTAlIHtcXG4gICAgICAgIGNvbnRlbnQ6ICcuLic7XFxuICAgIH1cXG4gICAgNzUlIHtcXG4gICAgICAgIGNvbnRlbnQ6ICcuLi4nO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgY29udGVudDogJy4uLic7XFxuICAgIH1cXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOml0YWwsd2dodEAwLDEwMDswLDMwMDswLDQwMDswLDUwMDswLDcwMDswLDkwMDsxLDEwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDcwMDsxLDkwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NdWt0YTp3Z2h0QDIwMDszMDA7NDAwOzUwMDs2MDA7NzAwOzgwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBSb2JvdG8gZm9udCAqL1xcblxcbi8qIE11a3RhIEZvbnQgKi9cXG5cXG5odG1sLCBib2R5IHtcXG4gICAgbWFyZ2luOiAwJTtcXG4gICAgcGFkZGluZzogMCU7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiAxMDB2dztcXG59XFxuXFxuOnJvb3QgKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIG1hcmdpbjogMCU7XFxuICAgIHBhZGRpbmc6IDAlO1xcblxcbiAgICAtLWZvbnRUaXRsZTogJ011a3RhJywgc2Fucy1zZXJpZjtcXG4gICAgLS1mb250TWFpbjogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxuXFxuICAgIC0tbWVudUNvbDogcmdiKDI3LCAzMSwgNTEpO1xcbiAgICAtLWxpc3RWaWV3Q29sOiByZ2IoNiwgNDgsIDgzKTtcXG4gICAgLS1jb250ZW50Vmlld0NvbDogcmdiKDI5LCA2OCwgMTA1KTtcXG4gICAgLS1pbnNpZGVDb2w6IHJnYig2NywgMTA4LCAxMjgpO1xcblxcbiAgICAtLW1haW5Db250ZW50Q29sOiB3aGl0ZTtcXG4gICAgLS1mb250Q29sOiB2YXIoLS1tYWluQ29udGVudENvbCk7XFxufVxcblxcbmJvZHkge1xcbiAgICAtLWNvbE1pbnVzT25lOiAyO1xcbiAgICAtLWZpcnN0Q29sOiAxO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIDFmcjtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbmJvZHkuZG91YmxlIHtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcbn1cXG5cXG5ib2R5LnNpbmdsZSB7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcbn1cXG5cXG5ib2R5ICoge1xcbiAgICBjb2xvcjogdmFyKC0tZm9udENvbCk7XFxuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250TWFpbik7XFxufVxcblxcbmJvZHkgPiA6aXMoLm1lbnUtY29udGFpbmVyLCAubGlzdFZpZXctY29udGFpbmVyLCAuY29udGVudFZpZXctY29udGFpbmVyKSB7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcbmJvZHkgPiA6aXMoLm1lbnUtY29udGFpbmVyLCAubGlzdFZpZXctY29udGFpbmVyLCAuY29udGVudFZpZXctY29udGFpbmVyKSA+ICoge1xcbiAgICBtaW4td2lkdGg6IG1pbig0NGNoLCAxMDB2dyk7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuc3Bhbi5zZXBlcmF0b3Ige1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG4gICAgaGVpZ2h0OiAxcHg7XFxuICAgIHdpZHRoOiA4MCU7XFxuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzg0KTtcXG59XFxuXFxuLnRpdGxlLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xcbiAgICBnYXA6IDFjaDtcXG59XFxuXFxuLnRpdGxlLXdyYXBwZXIgYnV0dG9uIHtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGFzcGVjdC1yYXRpbzogMS8xO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udFRpdGxlKTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFBZ0I7O0FBR2hCLGVBQWU7O0FBR2Y7SUFDSSxVQUFVO0lBQ1YsV0FBVztJQUNYLGFBQWE7SUFDYixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixXQUFXOztJQUVYLGdDQUFnQztJQUNoQyxnQ0FBZ0M7O0lBRWhDLDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0Isa0NBQWtDO0lBQ2xDLDhCQUE4Qjs7SUFFOUIsdUJBQXVCO0lBQ3ZCLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2IsYUFBYTtJQUNiLG1DQUFtQztJQUNuQyxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksY0FBYztJQUNkLGFBQWE7SUFDYixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSwyQkFBMkI7SUFDM0IsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxVQUFVO0lBQ1Ysb0JBQW9CO0lBQ3BCLDRDQUE0QztBQUNoRDs7QUFFQTtJQUNJLGFBQWE7SUFDYiwrQkFBK0I7SUFDL0IsUUFBUTtBQUNaOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFlBQVk7SUFDWixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSw2QkFBNkI7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogUm9ib3RvIGZvbnQgKi9cXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86aXRhbCx3Z2h0QDAsMTAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNzAwOzAsOTAwOzEsMTAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNzAwOzEsOTAwJmRpc3BsYXk9c3dhcCcpO1xcblxcbi8qIE11a3RhIEZvbnQgKi9cXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NdWt0YTp3Z2h0QDIwMDszMDA7NDAwOzUwMDs2MDA7NzAwOzgwMCZkaXNwbGF5PXN3YXAnKTtcXG5cXG5odG1sLCBib2R5IHtcXG4gICAgbWFyZ2luOiAwJTtcXG4gICAgcGFkZGluZzogMCU7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiAxMDB2dztcXG59XFxuXFxuOnJvb3QgKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIG1hcmdpbjogMCU7XFxuICAgIHBhZGRpbmc6IDAlO1xcblxcbiAgICAtLWZvbnRUaXRsZTogJ011a3RhJywgc2Fucy1zZXJpZjtcXG4gICAgLS1mb250TWFpbjogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxuXFxuICAgIC0tbWVudUNvbDogcmdiKDI3LCAzMSwgNTEpO1xcbiAgICAtLWxpc3RWaWV3Q29sOiByZ2IoNiwgNDgsIDgzKTtcXG4gICAgLS1jb250ZW50Vmlld0NvbDogcmdiKDI5LCA2OCwgMTA1KTtcXG4gICAgLS1pbnNpZGVDb2w6IHJnYig2NywgMTA4LCAxMjgpO1xcblxcbiAgICAtLW1haW5Db250ZW50Q29sOiB3aGl0ZTtcXG4gICAgLS1mb250Q29sOiB2YXIoLS1tYWluQ29udGVudENvbCk7XFxufVxcblxcbmJvZHkge1xcbiAgICAtLWNvbE1pbnVzT25lOiAyO1xcbiAgICAtLWZpcnN0Q29sOiAxO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIDFmcjtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbmJvZHkuZG91YmxlIHtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcbn1cXG5cXG5ib2R5LnNpbmdsZSB7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcbn1cXG5cXG5ib2R5ICoge1xcbiAgICBjb2xvcjogdmFyKC0tZm9udENvbCk7XFxuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250TWFpbik7XFxufVxcblxcbmJvZHkgPiA6aXMoLm1lbnUtY29udGFpbmVyLCAubGlzdFZpZXctY29udGFpbmVyLCAuY29udGVudFZpZXctY29udGFpbmVyKSB7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcbmJvZHkgPiA6aXMoLm1lbnUtY29udGFpbmVyLCAubGlzdFZpZXctY29udGFpbmVyLCAuY29udGVudFZpZXctY29udGFpbmVyKSA+ICoge1xcbiAgICBtaW4td2lkdGg6IG1pbig0NGNoLCAxMDB2dyk7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuc3Bhbi5zZXBlcmF0b3Ige1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG4gICAgaGVpZ2h0OiAxcHg7XFxuICAgIHdpZHRoOiA4MCU7XFxuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzg0KTtcXG59XFxuXFxuLnRpdGxlLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xcbiAgICBnYXA6IDFjaDtcXG59XFxuXFxuLnRpdGxlLXdyYXBwZXIgYnV0dG9uIHtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGFzcGVjdC1yYXRpbzogMS8xO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udFRpdGxlKTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1lbnUtY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAyO1xcbn1cXG5ib2R5Om5vdChib2R5LnRyaXBsZSkgLm1lbnUtY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuYm9keTpub3QoYm9keS50cmlwbGUpIC5tZW51LWNvbnRhaW5lci52aXNpYmxlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjE4NSk7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBpbml0aWFsOyAgICBcXG59XFxuLm1lbnUge1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgbWluLXdpZHRoOiBpbml0aWFsICFpbXBvcnRhbnQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1lbnVDb2wpO1xcblxcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiBtaW4oMjUwcHgsIDEwMHZ3KTtcXG5cXG4gICAgcGFkZGluZzogMTBweDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoNCwgYXV0bykgMWZyO1xcbiAgICBnYXA6IDFyZW07XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWluLXdpZHRoOiBpbml0aWFsO1xcbn1cXG5cXG4ubWVudTpub3QoLm1lbnUudHJpcGxlKSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwJTtcXG4gICAgcmlnaHQ6IDEwMCU7XFxuICAgIHRyYW5zaXRpb246IDMwMG1zO1xcbn1cXG5cXG4ubWVudS52aXNpYmxlIHtcXG4gICAgdHJhbnNsYXRlOiAxMDAlO1xcbn1cXG5cXG4ubWVudS50cmlwbGUge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5tZW51IC50aXRsZS13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuXFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XFxuXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG4ubWVudSAjY2xvc2UtbWVudSB7XFxuXFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcbiAgICBcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG4gICAgLS1zaXplOiAxNXB4O1xcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNTIxKTtcXG4gICAgZm9udC1zaXplOiAxLjdyZW07XFxuXFxuICAgIHRyYW5zaXRpb246IDEwMG1zO1xcbn1cXG5cXG4ubWVudSAjY2xvc2UtbWVudTpob3ZlciB7XFxuICAgIHNjYWxlOiAxMjAlO1xcbiAgICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5tZW51LnRyaXBsZSAjY2xvc2UtbWVudSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tZW51IC50aXRsZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tZW51LnRyaXBsZSAudGl0bGUge1xcbiAgICBkaXNwbGF5OiBpbml0aWFsO1xcbn1cXG5cXG4ubWVudSAudGFza3Mtd3JhcHBlciwgLm1lbnUgLm5vdGVzLXdyYXBwZXIsIC5tZW51ICN0YXNrcywgLm1lbnUgI25vdGVzIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcblxcbjppcygubWVudSAudGFza3Mtd3JhcHBlciAqOm5vdCh1bCwgZGl2KSwgLm1lbnUgLm5vdGVzLXdyYXBwZXIgKjpub3QodWwsIGRpdikpIHtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgIHBhZGRpbmc6IDdweDtcXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICAgIHRyYW5zaXRpb246IDMwMG1zO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuOmlzKC5tZW51IC50YXNrcy13cmFwcGVyICo6bm90KHVsLCBkaXYpLCAubWVudSAubm90ZXMtd3JhcHBlciAqOm5vdCh1bCwgZGl2KSk6aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHdoaXRlO1xcbn1cXG46aXMoLm1lbnUgLnRhc2tzLXdyYXBwZXIgKjpub3QodWwsIGRpdiksIC5tZW51IC5ub3Rlcy13cmFwcGVyICo6bm90KHVsLCBkaXYpKS5zZWxlY3RlZCB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMCwgMjU1LCAyNTUsIDAuNDM4KTtcXG59XFxuXFxuOmlzKC5tZW51IC50YXNrcy13cmFwcGVyLCAubWVudSAubm90ZXMtd3JhcHBlcikgLm5ld0J0biB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4Mik7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xODUpO1xcbiAgICBmb250LXNpemU6IDAuODVlbTtcXG4gICAgcGFkZGluZy10b3A6IDVweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDVweDtcXG4gICAgbWFyZ2luLXRvcDogM3B4O1xcbn1cXG5cXG4ubmV3QnRuLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbn1cXG46aXMoLm1lbnUgLnRhc2tzLXdyYXBwZXIsIC5tZW51IC5ub3Rlcy13cmFwcGVyKSAubmV3QnRuLXdyYXBwZXIgaW5wdXQge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgyKTtcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjM5KTtcXG4gICAgZm9udC1zaXplOiAwLjg1ZW07XFxuICAgIHBhZGRpbmctdG9wOiA0cHg7XFxuICAgIHBhZGRpbmctYm90dG9tOiA0cHg7XFxuICAgIG1hcmdpbi10b3A6IDNweDtcXG59XFxuXFxuLm1lbnUgOmlzKCN0YXNrcywgI25vdGVzKSBsaSB7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICBhbmltYXRpb246IG1lbnUtbmV3IDEwMG1zIGVhc2UtaW4tb3V0IGZvcndhcmRzO1xcbn1cXG5Aa2V5ZnJhbWVzIG1lbnUtbmV3IHtcXG4gICAgMCUge1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgIH1cXG4gICAgNDAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDNlbTtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMTAwJTtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDNlbTtcXG4gICAgfVxcbn1cXG5cXG4ubWVudSA6aXMoI3Rhc2tzLCAjbm90ZXMpIGxpLnJlbW92aW5nIHtcXG4gICAgYW5pbWF0aW9uOiBtZW51LXJlbW92aW5nIDEwMG1zIGVhc2UtaW4tb3V0IGZvcndhcmRzO1xcbn1cXG5Aa2V5ZnJhbWVzIG1lbnUtcmVtb3Zpbmcge1xcbiAgICAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogM2VtO1xcbiAgICB9XFxuICAgIDYwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAzZW07XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogMGVtO1xcbiAgICB9XFxufVxcblxcbi5hdHRyaWJ1dGlvbiB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGVuZDtcXG4gICAgZ2FwOiAwLjVlbTtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG4uYXR0cmlidXRpb24gYSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLmF0dHJpYnV0aW9uIGE6aG92ZXIge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuLmF0dHJpYnV0aW9uIC5jcmVhdGVkLWJ5IGEge1xcbiAgICBjb2xvcjogYXF1YTtcXG59XFxuXFxuLmF0dHJpYnV0aW9uIC5zb3VyY2Uge1xcbiAgICBjb2xvcjogcmdiKDE5OCwgMTI2LCAyMjYpO1xcbn1cXG5cXG4uYXR0cmlidXRpb24gLndhcm5pbmcge1xcbiAgICBjb2xvcjogcmdiKDIzMywgMTk2LCAxMTYpO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL21lbnUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixXQUFXO0lBQ1gsb0JBQW9CO0FBQ3hCO0FBQ0E7SUFDSSxzQ0FBc0M7SUFDdEMsdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSxjQUFjO0lBQ2QsNkJBQTZCO0lBQzdCLGdDQUFnQzs7SUFFaEMsWUFBWTtJQUNaLHdCQUF3Qjs7SUFFeEIsYUFBYTs7SUFFYixhQUFhO0lBQ2IsdUNBQXVDO0lBQ3ZDLFNBQVM7O0lBRVQsa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsV0FBVztJQUNYLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QiwwQkFBMEI7O0lBRTFCLG1CQUFtQjs7SUFFbkIsaUJBQWlCO0FBQ3JCOztBQUVBOztJQUVJLGlCQUFpQjs7SUFFakIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixxQkFBcUI7O0lBRXJCLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsa0JBQWtCOztJQUVsQiw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLGlDQUFpQztJQUNqQyxpQkFBaUI7O0lBRWpCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0FBQ3JCOzs7QUFHQTtJQUNJLGVBQWU7SUFDZiw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLDBDQUEwQztBQUM5Qzs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQiw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsNENBQTRDO0lBQzVDLDJDQUEyQztJQUMzQyxpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLDhDQUE4QztBQUNsRDtBQUNBO0lBQ0k7UUFDSSxlQUFlO1FBQ2YsV0FBVztJQUNmO0lBQ0E7UUFDSSxlQUFlO1FBQ2YsV0FBVztJQUNmO0lBQ0E7UUFDSSxhQUFhO1FBQ2IsZUFBZTtJQUNuQjtBQUNKOztBQUVBO0lBQ0ksbURBQW1EO0FBQ3ZEO0FBQ0E7SUFDSTtRQUNJLGFBQWE7UUFDYixlQUFlO0lBQ25CO0lBQ0E7UUFDSSxlQUFlO1FBQ2YsV0FBVztJQUNmO0lBQ0E7UUFDSSxXQUFXO1FBQ1gsZUFBZTtJQUNuQjtBQUNKOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLDBCQUEwQjtBQUM5Qjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWVudS1jb250YWluZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHotaW5kZXg6IDI7XFxufVxcbmJvZHk6bm90KGJvZHkudHJpcGxlKSAubWVudS1jb250YWluZXIge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5ib2R5Om5vdChib2R5LnRyaXBsZSkgLm1lbnUtY29udGFpbmVyLnZpc2libGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMTg1KTtcXG4gICAgcG9pbnRlci1ldmVudHM6IGluaXRpYWw7ICAgIFxcbn1cXG4ubWVudSB7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBtaW4td2lkdGg6IGluaXRpYWwgIWltcG9ydGFudDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWVudUNvbCk7XFxuXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IG1pbigyNTBweCwgMTAwdncpO1xcblxcbiAgICBwYWRkaW5nOiAxMHB4O1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg0LCBhdXRvKSAxZnI7XFxuICAgIGdhcDogMXJlbTtcXG5cXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBtaW4td2lkdGg6IGluaXRpYWw7XFxufVxcblxcbi5tZW51Om5vdCgubWVudS50cmlwbGUpIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDAlO1xcbiAgICByaWdodDogMTAwJTtcXG4gICAgdHJhbnNpdGlvbjogMzAwbXM7XFxufVxcblxcbi5tZW51LnZpc2libGUge1xcbiAgICB0cmFuc2xhdGU6IDEwMCU7XFxufVxcblxcbi5tZW51LnRyaXBsZSB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLm1lbnUgLnRpdGxlLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG5cXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG5cXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi5tZW51ICNjbG9zZS1tZW51IHtcXG5cXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XFxuICAgIFxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcblxcbiAgICAtLXNpemU6IDE1cHg7XFxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41MjEpO1xcbiAgICBmb250LXNpemU6IDEuN3JlbTtcXG5cXG4gICAgdHJhbnNpdGlvbjogMTAwbXM7XFxufVxcblxcbi5tZW51ICNjbG9zZS1tZW51OmhvdmVyIHtcXG4gICAgc2NhbGU6IDEyMCU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLm1lbnUudHJpcGxlICNjbG9zZS1tZW51IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1lbnUgLnRpdGxlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1lbnUudHJpcGxlIC50aXRsZSB7XFxuICAgIGRpc3BsYXk6IGluaXRpYWw7XFxufVxcblxcbi5tZW51IC50YXNrcy13cmFwcGVyLCAubWVudSAubm90ZXMtd3JhcHBlciwgLm1lbnUgI3Rhc2tzLCAubWVudSAjbm90ZXMge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG59XFxuXFxuXFxuOmlzKC5tZW51IC50YXNrcy13cmFwcGVyICo6bm90KHVsLCBkaXYpLCAubWVudSAubm90ZXMtd3JhcHBlciAqOm5vdCh1bCwgZGl2KSkge1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgcGFkZGluZzogN3B4O1xcbiAgICB0ZXh0LWFsaWduOiBzdGFydDtcXG4gICAgdHJhbnNpdGlvbjogMzAwbXM7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbn1cXG5cXG46aXMoLm1lbnUgLnRhc2tzLXdyYXBwZXIgKjpub3QodWwsIGRpdiksIC5tZW51IC5ub3Rlcy13cmFwcGVyICo6bm90KHVsLCBkaXYpKTpob3ZlciB7XFxuICAgIGJvcmRlci1jb2xvcjogd2hpdGU7XFxufVxcbjppcygubWVudSAudGFza3Mtd3JhcHBlciAqOm5vdCh1bCwgZGl2KSwgLm1lbnUgLm5vdGVzLXdyYXBwZXIgKjpub3QodWwsIGRpdikpLnNlbGVjdGVkIHtcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiYSgwLCAyNTUsIDI1NSwgMC40MzgpO1xcbn1cXG5cXG46aXMoLm1lbnUgLnRhc2tzLXdyYXBwZXIsIC5tZW51IC5ub3Rlcy13cmFwcGVyKSAubmV3QnRuIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgyKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE4NSk7XFxuICAgIGZvbnQtc2l6ZTogMC44NWVtO1xcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAzcHg7XFxufVxcblxcbi5uZXdCdG4td3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxufVxcbjppcygubWVudSAudGFza3Mtd3JhcHBlciwgLm1lbnUgLm5vdGVzLXdyYXBwZXIpIC5uZXdCdG4td3JhcHBlciBpbnB1dCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wODIpO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzkpO1xcbiAgICBmb250LXNpemU6IDAuODVlbTtcXG4gICAgcGFkZGluZy10b3A6IDRweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDRweDtcXG4gICAgbWFyZ2luLXRvcDogM3B4O1xcbn1cXG5cXG4ubWVudSA6aXMoI3Rhc2tzLCAjbm90ZXMpIGxpIHtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIGFuaW1hdGlvbjogbWVudS1uZXcgMTAwbXMgZWFzZS1pbi1vdXQgZm9yd2FyZHM7XFxufVxcbkBrZXlmcmFtZXMgbWVudS1uZXcge1xcbiAgICAwJSB7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgfVxcbiAgICA0MCUge1xcbiAgICAgICAgbWF4LWhlaWdodDogM2VtO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICAgICAgbWF4LWhlaWdodDogM2VtO1xcbiAgICB9XFxufVxcblxcbi5tZW51IDppcygjdGFza3MsICNub3RlcykgbGkucmVtb3Zpbmcge1xcbiAgICBhbmltYXRpb246IG1lbnUtcmVtb3ZpbmcgMTAwbXMgZWFzZS1pbi1vdXQgZm9yd2FyZHM7XFxufVxcbkBrZXlmcmFtZXMgbWVudS1yZW1vdmluZyB7XFxuICAgIDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAzZW07XFxuICAgIH1cXG4gICAgNjAlIHtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDNlbTtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAwZW07XFxuICAgIH1cXG59XFxuXFxuLmF0dHJpYnV0aW9uIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgYWxpZ24tY29udGVudDogZW5kO1xcbiAgICBnYXA6IDAuNWVtO1xcbiAgICBmb250LXNpemU6IDFyZW07XFxufVxcblxcbi5hdHRyaWJ1dGlvbiBhIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYXR0cmlidXRpb24gYTpob3ZlciB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbn1cXG5cXG4uYXR0cmlidXRpb24gLmNyZWF0ZWQtYnkgYSB7XFxuICAgIGNvbG9yOiBhcXVhO1xcbn1cXG5cXG4uYXR0cmlidXRpb24gLnNvdXJjZSB7XFxuICAgIGNvbG9yOiByZ2IoMTk4LCAxMjYsIDIyNik7XFxufVxcblxcbi5hdHRyaWJ1dGlvbiAud2FybmluZyB7XFxuICAgIGNvbG9yOiByZ2IoMjMzLCAxOTYsIDExNik7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yaWdodC1jbGljay1kcm9wZG93biB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgei1pbmRleDogMztcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDQ5LCA1NSwgNzcpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzk3KTtcXG4gICAgYm9yZGVyLXJhZGl1czogN3B4O1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwJSAwJTtcXG4gICAgYW5pbWF0aW9uOiBtZW51LWV4cGFuZCAyMDBtcyBlYXNlLW91dCBmb3J3YXJkcztcXG59XFxuQGtleWZyYW1lcyBtZW51LWV4cGFuZCB7XFxuICAgIDAlIHtcXG4gICAgICAgIHNjYWxlOiA1MCU7XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDEwMCU7XFxuICAgICAgICBzY2FsZTogMTAwJTtcXG4gICAgfVxcbn1cXG4ucmlnaHQtY2xpY2stZHJvcGRvd24gPiAqIHtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDAuNWVtIDAuODVlbTtcXG59XFxuLnJpZ2h0LWNsaWNrLWRyb3Bkb3duID4gKjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTUxKTtcXG59XFxuLnJpZ2h0LWNsaWNrLWRyb3Bkb3duID4gKjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNjIpO1xcbn1cXG5cXG4ucmlnaHQtY2xpY2stZHJvcGRvd24gPiAqOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoODAsIDEyMCwgMTQ2LCAwLjU4OSk7XFxufVxcblxcbi5yaWdodC1jbGljay1kcm9wZG93bi5jb2xsYXBzZSB7XFxuICAgIC8qIHRyYW5zaXRpb246IDE1MG1zIHNjYWxlIGVhc2UtaW4tb3V0OyAqL1xcbiAgICBhbmltYXRpb246IG1lbnUtY29sbGFwc2UgMTUwbXMgZWFzZS1pbiBmb3J3YXJkcztcXG59XFxuQGtleWZyYW1lcyBtZW51LWNvbGxhcHNlIHtcXG4gICAgMTAwJSB7XFxuICAgICAgICBzY2FsZTogNTAlO1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIH1cXG59XFxuXFxuLnJpZ2h0LWNsaWNrLWRyb3Bkb3duOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgLS1zaXplOiAyMHB4O1xcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxuICAgIHRvcDogLTEwcHg7XFxuICAgIGxlZnQ6IC0xMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4IDEwcHggMHB4IDBweDtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVaKC00NWRlZyk7XFxuXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcmlnaHRDbGlja0Ryb3BEb3duLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGVBQWU7SUFDZixVQUFVO0lBQ1YsYUFBYTtJQUNiLGlDQUFpQztJQUNqQyw0Q0FBNEM7SUFDNUMsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2Qiw4Q0FBOEM7QUFDbEQ7QUFDQTtJQUNJO1FBQ0ksVUFBVTtRQUNWLFdBQVc7SUFDZjtJQUNBO1FBQ0ksYUFBYTtRQUNiLFdBQVc7SUFDZjtBQUNKO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIscUJBQXFCO0FBQ3pCO0FBQ0E7SUFDSSxnREFBZ0Q7QUFDcEQ7QUFDQTtJQUNJLDRDQUE0QztBQUNoRDs7QUFFQTtJQUNJLDJDQUEyQztBQUMvQzs7QUFFQTtJQUNJLHlDQUF5QztJQUN6QywrQ0FBK0M7QUFDbkQ7QUFDQTtJQUNJO1FBQ0ksVUFBVTtRQUNWLFdBQVc7UUFDWCxrQkFBa0I7SUFDdEI7QUFDSjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsNkJBQTZCO0lBQzdCLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixXQUFXO0lBQ1gsZ0NBQWdDO0lBQ2hDLDBCQUEwQjs7QUFFOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJpZ2h0LWNsaWNrLWRyb3Bkb3duIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB6LWluZGV4OiAzO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNDksIDU1LCA3Nyk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zOTcpO1xcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IDAlIDAlO1xcbiAgICBhbmltYXRpb246IG1lbnUtZXhwYW5kIDIwMG1zIGVhc2Utb3V0IGZvcndhcmRzO1xcbn1cXG5Aa2V5ZnJhbWVzIG1lbnUtZXhwYW5kIHtcXG4gICAgMCUge1xcbiAgICAgICAgc2NhbGU6IDUwJTtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgb3BhY2l0eTogMTAwJTtcXG4gICAgICAgIHNjYWxlOiAxMDAlO1xcbiAgICB9XFxufVxcbi5yaWdodC1jbGljay1kcm9wZG93biA+ICoge1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgcGFkZGluZzogMC41ZW0gMC44NWVtO1xcbn1cXG4ucmlnaHQtY2xpY2stZHJvcGRvd24gPiAqOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNTEpO1xcbn1cXG4ucmlnaHQtY2xpY2stZHJvcGRvd24gPiAqOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA2Mik7XFxufVxcblxcbi5yaWdodC1jbGljay1kcm9wZG93biA+ICo6YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4MCwgMTIwLCAxNDYsIDAuNTg5KTtcXG59XFxuXFxuLnJpZ2h0LWNsaWNrLWRyb3Bkb3duLmNvbGxhcHNlIHtcXG4gICAgLyogdHJhbnNpdGlvbjogMTUwbXMgc2NhbGUgZWFzZS1pbi1vdXQ7ICovXFxuICAgIGFuaW1hdGlvbjogbWVudS1jb2xsYXBzZSAxNTBtcyBlYXNlLWluIGZvcndhcmRzO1xcbn1cXG5Aa2V5ZnJhbWVzIG1lbnUtY29sbGFwc2Uge1xcbiAgICAxMDAlIHtcXG4gICAgICAgIHNjYWxlOiA1MCU7XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgfVxcbn1cXG5cXG4ucmlnaHQtY2xpY2stZHJvcGRvd246OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAtLXNpemU6IDIwcHg7XFxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcXG4gICAgdG9wOiAtMTBweDtcXG4gICAgbGVmdDogLTEwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAwcHggMHB4O1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZVooLTQ1ZGVnKTtcXG5cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvb2xUaXBzIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICB0b3A6IDAlO1xcbiAgICBsZWZ0OiAwJTtcXG4gICAgei1pbmRleDogMztcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi50b29sVGlwcyA+IGRpdiB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXG4gICAgLS1wb3NpdGlvblg6IDUwJTtcXG4gICAgLS1wb3NpdGlvblk6IDUwJTtcXG5cXG4gICAgdG9wOiB2YXIoLS1wb3NpdGlvblkpO1xcbiAgICBsZWZ0OiB2YXIoLS1wb3NpdGlvblgpO1xcblxcbiAgICAvKiBib3JkZXI6IDFweCBzb2xpZCByZWQ7ICovXFxufVxcblxcbi50b29sVGlwcyA+IGRpdiA+IHNwYW4ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHotaW5kZXg6IDM7XFxuICAgIFxcbiAgICBvcGFjaXR5OiAwJTtcXG4gICAgdHJhbnNpdGlvbjogMjAwbXM7XFxuICAgIFxcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIFxcbiAgICAtLXRvb2x0aXBCRzogcmdiYSgwLCAwLCAwLCAwLjg1Nik7XFxuICAgIFxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10b29sdGlwQkcpO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZzogNXB4IDdweDtcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgXFxuICAgIC8qIGRlZmF1bHQgcG9zaXRpb25pbmcgKi9cXG4gICAgYm90dG9tOiAxMDAlO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIC0tdmVydGljYWxPZmZzZXQ6IC0xNXB4O1xcbiAgICB0cmFuc2xhdGU6IC01MCUgdmFyKC0tdmVydGljYWxPZmZzZXQpO1xcbn1cXG5cXG4udG9vbFRpcHMgPiBkaXYuc2hvdyA+IHNwYW4ge1xcbiAgICBvcGFjaXR5OiAxMDAlO1xcbiAgICBwb2ludGVyLWV2ZW50czogYXV0bztcXG59XFxuXFxuLnRvb2xUaXBzID4gZGl2ID4gOmlzKGJvZHkudHJpcGxlIHNwYW4udHJpcGxlLWxlZnQsIGJvZHkuZG91YmxlIHNwYW4uZG91YmxlLWxlZnQsIGJvZHkuc2luZ2xlIHNwYW4uc2luZ2xlLWxlZnQpIHtcXG4gICAgbGVmdDogMCU7XFxuICAgIHRyYW5zbGF0ZTogLTglIHZhcigtLXZlcnRpY2FsT2Zmc2V0KTtcXG59XFxuXFxuLnRvb2xUaXBzID4gZGl2ID4gOmlzKGJvZHkudHJpcGxlIHNwYW4udHJpcGxlLXJpZ2h0LCBib2R5LmRvdWJsZSBzcGFuLmRvdWJsZS1yaWdodCwgYm9keS5zaW5nbGUgc3Bhbi5zaW5nbGUtcmlnaHQpIHtcXG4gICAgcmlnaHQ6IDAlO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICB0cmFuc2xhdGU6IDglIHZhcigtLXZlcnRpY2FsT2Zmc2V0KTtcXG59XFxuXFxuLnRvb2xUaXBzID4gZGl2ID4gOmlzKGJvZHkudHJpcGxlIHNwYW4udHJpcGxlLWJvdHRvbSwgYm9keS5kb3VibGUgc3Bhbi5kb3VibGUtYm90dG9tLCBib2R5LnNpbmdsZSBzcGFuLnNpbmdsZS1ib3R0b20pIHtcXG4gICAgLS12ZXJ0aWNhbE9mZnNldDogMTVweDtcXG4gICAgdG9wOiAxMDAlO1xcbiAgICBib3R0b206IGF1dG87XFxufVxcblxcbi50b29sVGlwcyA+IGRpdiA+IHNwYW46OmFmdGVyIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgLS1zaXplOiA3cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiBjYWxjKHZhcigtLXNpemUpKi0xKTtcXG4gICAgYm9yZGVyLXdpZHRoOiB2YXIoLS1zaXplKTtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgXFxuICAgIC8qIGRlZmF1bHQgaG9yaXpvbnRhbCBwb3NpdGlvbmluZyAqL1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIC8qIGRlZmF1bHQgdmVydGljYWwgcG9zaXRpb25pbmcgKi9cXG4gICAgdG9wOiAxMDAlO1xcbiAgICBib3JkZXItY29sb3I6IHZhcigtLXRvb2x0aXBCRykgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XFxufVxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1sZWZ0LCBib2R5LmRvdWJsZSBzcGFuLmRvdWJsZS1sZWZ0LCBib2R5LnNpbmdsZSBzcGFuLnNpbmdsZS1sZWZ0KTo6YWZ0ZXIge1xcbiAgICBsZWZ0OiAxNSU7XFxufVxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1yaWdodCwgYm9keS5kb3VibGUgc3Bhbi5kb3VibGUtcmlnaHQsIGJvZHkuc2luZ2xlIHNwYW4uc2luZ2xlLXJpZ2h0KTo6YWZ0ZXIge1xcbiAgICBsZWZ0OiA4NSU7XFxufVxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1ib3R0b20sIGJvZHkuZG91YmxlIHNwYW4uZG91YmxlLWJvdHRvbSwgYm9keS5zaW5nbGUgc3Bhbi5zaW5nbGUtYm90dG9tKTo6YWZ0ZXIge1xcbiAgICB0b3A6IGF1dG87XFxuICAgIGJvdHRvbTogMTAwJTtcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB2YXIoLS10b29sdGlwQkcpIHRyYW5zcGFyZW50O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3Rvb2x0aXBzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGVBQWU7SUFDZixZQUFZO0lBQ1osV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLG9CQUFvQjtJQUNwQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7O0lBRWxCLGdCQUFnQjtJQUNoQixnQkFBZ0I7O0lBRWhCLHFCQUFxQjtJQUNyQixzQkFBc0I7O0lBRXRCLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixVQUFVOztJQUVWLFdBQVc7SUFDWCxpQkFBaUI7O0lBRWpCLFlBQVk7O0lBRVosaUNBQWlDOztJQUVqQyxrQ0FBa0M7SUFDbEMsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLG9CQUFvQjs7SUFFcEIsd0JBQXdCO0lBQ3hCLFlBQVk7SUFDWixTQUFTO0lBQ1QsdUJBQXVCO0lBQ3ZCLHFDQUFxQztBQUN6Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxRQUFRO0lBQ1Isb0NBQW9DO0FBQ3hDOztBQUVBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVixtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxpQ0FBaUM7SUFDakMseUJBQXlCO0lBQ3pCLG1CQUFtQjs7SUFFbkIsbUNBQW1DO0lBQ25DLFNBQVM7SUFDVCxpQ0FBaUM7SUFDakMsU0FBUztJQUNULGtFQUFrRTtBQUN0RTtBQUNBO0lBQ0ksU0FBUztBQUNiO0FBQ0E7SUFDSSxTQUFTO0FBQ2I7QUFDQTtJQUNJLFNBQVM7SUFDVCxZQUFZO0lBQ1osa0VBQWtFO0FBQ3RFXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b29sVGlwcyB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgdG9wOiAwJTtcXG4gICAgbGVmdDogMCU7XFxuICAgIHotaW5kZXg6IDM7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udG9vbFRpcHMgPiBkaXYge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFxuICAgIC0tcG9zaXRpb25YOiA1MCU7XFxuICAgIC0tcG9zaXRpb25ZOiA1MCU7XFxuXFxuICAgIHRvcDogdmFyKC0tcG9zaXRpb25ZKTtcXG4gICAgbGVmdDogdmFyKC0tcG9zaXRpb25YKTtcXG5cXG4gICAgLyogYm9yZGVyOiAxcHggc29saWQgcmVkOyAqL1xcbn1cXG5cXG4udG9vbFRpcHMgPiBkaXYgPiBzcGFuIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB6LWluZGV4OiAzO1xcbiAgICBcXG4gICAgb3BhY2l0eTogMCU7XFxuICAgIHRyYW5zaXRpb246IDIwMG1zO1xcbiAgICBcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBcXG4gICAgLS10b29sdGlwQkc6IHJnYmEoMCwgMCwgMCwgMC44NTYpO1xcbiAgICBcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdG9vbHRpcEJHKTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBhZGRpbmc6IDVweCA3cHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIFxcbiAgICAvKiBkZWZhdWx0IHBvc2l0aW9uaW5nICovXFxuICAgIGJvdHRvbTogMTAwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICAtLXZlcnRpY2FsT2Zmc2V0OiAtMTVweDtcXG4gICAgdHJhbnNsYXRlOiAtNTAlIHZhcigtLXZlcnRpY2FsT2Zmc2V0KTtcXG59XFxuXFxuLnRvb2xUaXBzID4gZGl2LnNob3cgPiBzcGFuIHtcXG4gICAgb3BhY2l0eTogMTAwJTtcXG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxufVxcblxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1sZWZ0LCBib2R5LmRvdWJsZSBzcGFuLmRvdWJsZS1sZWZ0LCBib2R5LnNpbmdsZSBzcGFuLnNpbmdsZS1sZWZ0KSB7XFxuICAgIGxlZnQ6IDAlO1xcbiAgICB0cmFuc2xhdGU6IC04JSB2YXIoLS12ZXJ0aWNhbE9mZnNldCk7XFxufVxcblxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1yaWdodCwgYm9keS5kb3VibGUgc3Bhbi5kb3VibGUtcmlnaHQsIGJvZHkuc2luZ2xlIHNwYW4uc2luZ2xlLXJpZ2h0KSB7XFxuICAgIHJpZ2h0OiAwJTtcXG4gICAgbGVmdDogYXV0bztcXG4gICAgdHJhbnNsYXRlOiA4JSB2YXIoLS12ZXJ0aWNhbE9mZnNldCk7XFxufVxcblxcbi50b29sVGlwcyA+IGRpdiA+IDppcyhib2R5LnRyaXBsZSBzcGFuLnRyaXBsZS1ib3R0b20sIGJvZHkuZG91YmxlIHNwYW4uZG91YmxlLWJvdHRvbSwgYm9keS5zaW5nbGUgc3Bhbi5zaW5nbGUtYm90dG9tKSB7XFxuICAgIC0tdmVydGljYWxPZmZzZXQ6IDE1cHg7XFxuICAgIHRvcDogMTAwJTtcXG4gICAgYm90dG9tOiBhdXRvO1xcbn1cXG5cXG4udG9vbFRpcHMgPiBkaXYgPiBzcGFuOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIC0tc2l6ZTogN3B4O1xcbiAgICBtYXJnaW4tbGVmdDogY2FsYyh2YXIoLS1zaXplKSotMSk7XFxuICAgIGJvcmRlci13aWR0aDogdmFyKC0tc2l6ZSk7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIFxcbiAgICAvKiBkZWZhdWx0IGhvcml6b250YWwgcG9zaXRpb25pbmcgKi9cXG4gICAgbGVmdDogNTAlO1xcbiAgICAvKiBkZWZhdWx0IHZlcnRpY2FsIHBvc2l0aW9uaW5nICovXFxuICAgIHRvcDogMTAwJTtcXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS10b29sdGlwQkcpIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xcbn1cXG4udG9vbFRpcHMgPiBkaXYgPiA6aXMoYm9keS50cmlwbGUgc3Bhbi50cmlwbGUtbGVmdCwgYm9keS5kb3VibGUgc3Bhbi5kb3VibGUtbGVmdCwgYm9keS5zaW5nbGUgc3Bhbi5zaW5nbGUtbGVmdCk6OmFmdGVyIHtcXG4gICAgbGVmdDogMTUlO1xcbn1cXG4udG9vbFRpcHMgPiBkaXYgPiA6aXMoYm9keS50cmlwbGUgc3Bhbi50cmlwbGUtcmlnaHQsIGJvZHkuZG91YmxlIHNwYW4uZG91YmxlLXJpZ2h0LCBib2R5LnNpbmdsZSBzcGFuLnNpbmdsZS1yaWdodCk6OmFmdGVyIHtcXG4gICAgbGVmdDogODUlO1xcbn1cXG4udG9vbFRpcHMgPiBkaXYgPiA6aXMoYm9keS50cmlwbGUgc3Bhbi50cmlwbGUtYm90dG9tLCBib2R5LmRvdWJsZSBzcGFuLmRvdWJsZS1ib3R0b20sIGJvZHkuc2luZ2xlIHNwYW4uc2luZ2xlLWJvdHRvbSk6OmFmdGVyIHtcXG4gICAgdG9wOiBhdXRvO1xcbiAgICBib3R0b206IDEwMCU7XFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdmFyKC0tdG9vbHRpcEJHKSB0cmFuc3BhcmVudDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tZW51LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWVudS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGlzdFZpZXcuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9saXN0Vmlldy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGVudFZpZXcuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jb250ZW50Vmlldy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbG9hZGluZy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2xvYWRpbmcuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Rvb2x0aXBzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG9vbHRpcHMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FsZXJ0Vmlldy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FsZXJ0Vmlldy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmlnaHRDbGlja0Ryb3BEb3duLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmlnaHRDbGlja0Ryb3BEb3duLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8vIGltcG9ydGluZyBjc3NcbmltcG9ydCBtYWluU3R5bGVzIGZyb20gXCIuLy4uL3N0eWxlcy9tYWluLmNzc1wiXG5pbXBvcnQgbWVudVN0eWxlcyBmcm9tIFwiLi8uLi9zdHlsZXMvbWVudS5jc3NcIlxuaW1wb3J0IGxpc3RWaWV3dHlsZXMgZnJvbSBcIi4vLi4vc3R5bGVzL2xpc3RWaWV3LmNzc1wiXG5pbXBvcnQgY29udGVudFZpZXdTdHlsZXMgZnJvbSBcIi4vLi4vc3R5bGVzL2NvbnRlbnRWaWV3LmNzc1wiXG5pbXBvcnQgbG9hZGluZ1N0eWxlcyBmcm9tIFwiLi8uLi9zdHlsZXMvbG9hZGluZy5jc3NcIlxuaW1wb3J0IHRvb2x0aXBTdHlsZXMgZnJvbSBcIi4vLi4vc3R5bGVzL3Rvb2x0aXBzLmNzc1wiXG5pbXBvcnQgYWxlcnRWaWV3U3R5bGVzIGZyb20gXCIuLy4uL3N0eWxlcy9hbGVydFZpZXcuY3NzXCJcbmltcG9ydCByaWdodENsaWNrU3R5bGVzIGZyb20gXCIuLy4uL3N0eWxlcy9yaWdodENsaWNrRHJvcERvd24uY3NzXCJcblxuLy8gaW1wb3J0aW5nIG1vZHVsZXNcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIlxuXG4vLyBlbGVtZW50c1xuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6cm9vdCcpO1xuY29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbmNvbnN0IGNsb3NlTWVudUJ0bkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xvc2UtbWVudScpO1xuY29uc3Qgb3Blbk1lbnVCdG5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI29wZW4tbWVudScpO1xuY29uc3QgcmV0dXJuQnRuRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXR1cm4nKTtcblxuY29uc3QgbG9hZGluZ0NvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGluZy1jb250YWluZXInKTtcbmNvbnN0IHRvb2xUaXBzRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b29sVGlwcycpO1xuXG5jb25zdCBhbGVydFZpZXdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsZXJ0VmlldycpO1xuY29uc3QgYWxlcnRNc2dFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsZXJ0VmlldyAuYWxlcnQtbWVzc2FnZScpO1xuY29uc3QgYWxlcnRCdG5zQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbGVydFZpZXcgLmFsZXJ0QnRucy1jb250YWluZXInKTs7XG5jb25zdCBhbGVydFRpdGxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbGVydFZpZXcgLmFsZXJ0LXRpdGxlJyk7XG5cblxuY29uc3QgbWVudUNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1jb250YWluZXInKTtcbmNvbnN0IG1lbnVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUnKTtcbmNvbnN0IGxpc3RWaWV3Q29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0Vmlldy1jb250YWluZXInKTtcbmNvbnN0IGxpc3RWaWV3RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0VmlldycpO1xuY29uc3QgY29udGVudFZpZXdDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnRWaWV3LWNvbnRhaW5lcicpO1xuY29uc3QgY29udGVudFZpZXdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnRWaWV3Jyk7XG5cbmNvbnN0IHJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmlnaHQtY2xpY2stZHJvcGRvd24nKTtcblxuY29uc3QgYWxsVGFza3NNZW51RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51ICNhbGxUYXNrcycpO1xuY29uc3QgYWxsTm90ZXNNZW51RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51ICNhbGxOb3RlcycpO1xuY29uc3QgdGFza0xpc3RNZW51RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51ICN0YXNrcycpO1xuY29uc3Qgbm90ZUxpc3RNZW51RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51ICNub3RlcycpO1xuY29uc3QgbmV3QnRuTWVudUlucHV0RWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUgLm5ld0J0bi13cmFwcGVyIGlucHV0JyldO1xuY29uc3QgbmV3QnRuTWVudUVsZW1lbnRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51IC5uZXdCdG4td3JhcHBlciAubmV3QnRuJyldO1xuXG5jb25zdCBsaXN0TmFtZUluTGlzdFZpZXdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3RWaWV3ICNsaXN0TmFtZScpO1xuY29uc3QgbmV3QnRuTGlzdFZpZXdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3RWaWV3IC5saXN0TmFtZVdyYXBwZXIgLm5ld0J0bicpO1xuY29uc3QgbGlzdFZpZXdPcHRpb25zRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0VmlldyAub3B0aW9ucycpO1xuY29uc3Qgc29ydFByaW9yaXR5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzb3J0UHJpb3JpdHknKTtcbmNvbnN0IHNob3dQcmlvcml0eUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hvd1ByaW9yaXR5Jyk7XG5jb25zdCBzb3J0RGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc29ydERhdGUnKTtcbmNvbnN0IHNob3dEYXRlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaG93RGF0ZScpO1xuY29uc3QgbGlzdFZpZXdPcHRpb25FbGVtZW50cyA9IFtzb3J0UHJpb3JpdHlFbGVtZW50LCBzb3J0RGF0ZUVsZW1lbnQsIHNob3dQcmlvcml0eUVsZW1lbnQsIHNob3dEYXRlRWxlbWVudF07XG5jb25zdCBsaXN0SXRlbXNVTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdFZpZXcgLmxpc3RJdGVtcycpO1xuY29uc3QgY29tcGxldGVkSXRlbXNVTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdFZpZXcgLmNvbXBsZXRlZEl0ZW1zJyk7XG5jb25zdCBjb21wbGV0ZWRUaXRsZVdyYXBwZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3RWaWV3IC5jb21wbGV0ZWRUaXRsZS13cmFwcGVyJyk7XG5jb25zdCBjb21wbGV0ZWRUaXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdFZpZXcgI2NvbXBsZXRlZFRpdGxlJyk7XG5jb25zdCByZW1vdmVDb21wbGV0ZWRCdG5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3RWaWV3ICNyZW1vdmVDb21wbGV0ZWQnKTtcblxuY29uc3QgY29udGVudFZpZXdUaXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudFZpZXcgLml0ZW1UaXRsZScpO1xuY29uc3QgY29udGVudFZpZXdEZXNjRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50VmlldyB0ZXh0YXJlYS5kZXNjcmlwdGlvbicpO1xuY29uc3QgY29udGVudFZpZXdQcmlvcml0eUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudFZpZXcgLm9wdGlvbnMgc2VsZWN0Jyk7XG5jb25zdCBjb250ZW50Vmlld0RhdGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50VmlldyAub3B0aW9ucyBpbnB1dFt0eXBlPSdkYXRlJ11cIik7XG5jb25zdCBjb250ZW50Vmlld0RlbGV0ZUJ0bkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRWaWV3IC5vcHRpb25zICNkZWxldGVcIik7XG5jb25zdCBjb250ZW50Vmlld0NsZWFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudFZpZXcgLmNsZWFyXCIpO1xuXG5cbi8vIHN0YXRlIHZhcmlhYmxlc1xubGV0IGRpc3BsYXlTdGF0ZTsgLy8gcG9zc2libGUgc3RhdGVzOiB0cmlwbGUsIGRvdWJsZSwgc2luZ2xlXG5sZXQgY3VycmVudFZpZXcgPSBsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQ7XG5sZXQgY3VycmVudExpc3QgPSBbJ3Rhc2snLCAwXTtcbmxldCBjdXJyZW50SXRlbTtcbmxldCBsb2FkaW5nU3RhdHVzID0ge1xuICAgIFVJOiBmYWxzZSxcbiAgICBEYXRhOiBmYWxzZSxcbiAgICBFbmdpbmU6IGZhbHNlLFxufVxuXG4vLyBoYXJkY29kZWQgZGF0YVxuY29uc3QgZWxlbWVudHNXaG9zZUNsYXNzZXNSZWZsZWN0RGlzcGxheVN0YXRlID0gW2JvZHlFbGVtZW50LCBtZW51RWxlbWVudCwgbGlzdFZpZXdFbGVtZW50LCBjb250ZW50Vmlld0VsZW1lbnRdO1xuY29uc3QgcG9zc2libGVEaXNwbGF5U3RhdGVzID0gWyd0cmlwbGUnLCAnZG91YmxlJywgJ3NpbmdsZSddO1xuXG4vLyBtb2R1bGVzXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGUgKGlucHV0T2JqZWN0KSB7XG4gICAgbGV0IG5hbWUgPSBpbnB1dE9iamVjdC5uYW1lO1xuICAgIGxldCBsb2FkaW5nUHJvY2Vzc1N0YXR1cyA9IHt9O1xuICAgIGlucHV0T2JqZWN0LnByb2Nlc3Nlcy5mb3JFYWNoKHByb2Nlc3MgPT4ge1xuICAgICAgICBsb2FkaW5nUHJvY2Vzc1N0YXR1c1twcm9jZXNzXSA9IGZhbHNlO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB7bG9hZGluZ1Byb2Nlc3NTdGF0dXMsIG5hbWUsIC4uLmlucHV0T2JqZWN0LmNvbXBvbmVudHN9O1xufVxuXG5jb25zdCBVSSA9ICgoKSA9PiB7XG5cbiAgICBsZXQgbG9hZGluZ1NjcmVlblZpc2libGUgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXlTdGF0ZSAoKSB7XG5cbiAgICAgICAgRW5naW5lLnNldExvYWRpbmdTdGF0dXMoVUksICd1cGRhdGluZ0Rpc3BsYXknLCB0cnVlKTtcblxuICAgICAgICBsZXQgd2lkdGggPSByb290RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgbGV0IG1lbnVXaWR0aCA9IG1lbnVFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIFxuICAgICAgICBsZXQgcmVzdWx0O1xuICAgIFxuICAgICAgICBpZiAod2lkdGgvbWVudVdpZHRoIDwgMykge1xuICAgICAgICAgICAgcmVzdWx0ID0gJ2RvdWJsZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSAndHJpcGxlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICE9PSAnc2luZ2xlJykge1xuICAgICAgICAgICAgY3VycmVudFZpZXcgPSBsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRpc3BsYXlTdGF0ZSA9IHJlc3VsdDtcbiAgICAgICAgdXBkYXRlRGlzcGxheU1vZGUoKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheU1vZGUgKCkgeyAgICAgICAgXG4gICAgICAgIGFkZENsYXNzZXMoZGlzcGxheVN0YXRlLCBlbGVtZW50c1dob3NlQ2xhc3Nlc1JlZmxlY3REaXNwbGF5U3RhdGUpO1xuICAgICAgICBwb3NzaWJsZURpc3BsYXlTdGF0ZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlTdGF0ZSAhPT0gY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc05hbWUsIGVsZW1lbnRzV2hvc2VDbGFzc2VzUmVmbGVjdERpc3BsYXlTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGRpc3BsYXlTdGF0ZSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgICAgIHVwZGF0ZVNpbmdsZVZpZXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoJ2hpZGUnLCBbbGlzdFZpZXdDb250YWluZXJFbGVtZW50LCBjb250ZW50Vmlld0NvbnRhaW5lckVsZW1lbnRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIGxldCBvdmVyZmxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgWy4uLmdldExpc3RWaWV3SXRlbXMoKSwgbGlzdFZpZXdFbGVtZW50LCBsaXN0Vmlld09wdGlvbnNFbGVtZW50LCBjb250ZW50Vmlld0VsZW1lbnRdLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrRm9yU2Nyb2xsQmFycyhlbGVtZW50LCAnaG9yaXpvbnRhbCcpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh2aWV3T3ZlcmZsb3coKSAmJiBkaXNwbGF5U3RhdGUgIT09ICdzaW5nbGUnKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheVN0YXRlID0gZGlzcGxheVN0YXRlID09PSAndHJpcGxlJyA/ICdkb3VibGUnOidzaW5nbGUnO1xuICAgICAgICAgICAgICAgIHVwZGF0ZURpc3BsYXlNb2RlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEVuZ2luZS5zZXRMb2FkaW5nU3RhdHVzKFVJLCAndXBkYXRpbmdEaXNwbGF5JywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAzMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpZXdPdmVyZmxvdyAoKSB7XG4gICAgICAgIGxldCBvdmVyZmxvdyA9IGZhbHNlO1xuICAgICAgICBbXG4gICAgICAgICAgICAuLi5nZXRMaXN0Vmlld0l0ZW1zKCksXG4gICAgICAgICAgICBsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQsXG4gICAgICAgICAgICBsaXN0Vmlld0VsZW1lbnQsXG4gICAgICAgICAgICBsaXN0Vmlld09wdGlvbnNFbGVtZW50LFxuICAgICAgICAgICAgY29udGVudFZpZXdDb250YWluZXJFbGVtZW50LFxuICAgICAgICAgICAgY29udGVudFZpZXdFbGVtZW50LFxuICAgICAgICAgICAgbWVudUNvbnRhaW5lckVsZW1lbnQsXG4gICAgICAgICAgICBtZW51RWxlbWVudFxuICAgICAgICBdLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBpZiAoY2hlY2tGb3JTY3JvbGxCYXJzKGVsZW1lbnQsICdob3Jpem9udGFsJykgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlU2luZ2xlVmlldyAoKSB7XG4gICAgICAgIFtsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQsIGNvbnRlbnRWaWV3Q29udGFpbmVyRWxlbWVudF0uZm9yRWFjaCh2aWV3ID0+IHtcbiAgICAgICAgICAgIGlmICh2aWV3ICE9PSBjdXJyZW50Vmlldykge1xuICAgICAgICAgICAgICAgIHZpZXcuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheSgpIHtcbiAgICAgICAgdXBkYXRlRGlzcGxheVN0YXRlKCk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGhpZGVNZW51ICgpIHtcbiAgICAgICAgW21lbnVDb250YWluZXJFbGVtZW50LCBtZW51RWxlbWVudF0uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldExpc3RWaWV3SXRlbXMgKCkge1xuICAgICAgICByZXR1cm4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5saXN0VmlldyB1bCBsaScpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0ZvclNjcm9sbEJhcnMgKGVsZW1lbnQsIGNoZWNrPSdib3RoJykge1xuICAgICAgICByZXR1cm4gY2hlY2s9PT0nYm90aCcgfHwgY2hlY2s9PT0naG9yaXpvbnRhbCcgPyBlbGVtZW50LnNjcm9sbFdpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCA/IHRydWU6IGNoZWNrPT09J2JvdGgnID8gZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZWxlbWVudC5jbGllbnRIZWlnaHQ6IGZhbHNlIDplbGVtZW50LnNjcm9sbEhlaWdodCA+IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMgKGNsYXNzTmFtZSwgZWxlbWVudHM9W10pIHtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChlbGVtID0+IHtlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTt9KTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyAoY2xhc3NOYW1lLCBlbGVtZW50cz1bXSkge1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW0gPT4ge2VsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO30pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dMb2FkaW5nU2NyZWVuICgpIHtcbiAgICAgICAgbG9hZGluZ0NvbnRhaW5lckVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcxMDAlJztcbiAgICAgICAgbG9hZGluZ0NvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdpbml0aWFsJztcbiAgICAgICAgbG9hZGluZ1NjcmVlblZpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVMb2FkaW5nU2NyZWVuICgpIHtcbiAgICAgICAgbG9hZGluZ0NvbnRhaW5lckVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJSc7XG4gICAgICAgIGxvYWRpbmdDb250YWluZXJFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgIGxvYWRpbmdTY3JlZW5WaXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hpbGRFbGVtZW50cyAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGROb2Rlc10ucmVkdWNlKChmaW5hbCwgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQubm9kZU5hbWUgIT09ICcjdGV4dCcpIHtcbiAgICAgICAgICAgICAgICBmaW5hbC5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChyZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCksXG4gICAgICAgICAgcmlnaHQ6IE1hdGgucm91bmQocmVjdC5yaWdodCArIHdpbmRvdy5zY3JvbGxYKSxcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQocmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWSksXG4gICAgICAgICAgYm90dG9tOiBNYXRoLnJvdW5kKHJlY3QuYm90dG9tICsgd2luZG93LnNjcm9sbFkpLFxuICAgICAgICAgIHg6IE1hdGgucm91bmQocmVjdC54ICsgd2luZG93LnNjcm9sbFgpLFxuICAgICAgICAgIHk6IE1hdGgucm91bmQocmVjdC55ICsgd2luZG93LnNjcm9sbFkpLFxuICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKHJlY3Qud2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChyZWN0LmhlaWdodCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZFRvb2xUaXBzICh0b29sdGlwcz1nZXRDaGlsZEVsZW1lbnRzKHRvb2xUaXBzRWxlbWVudCkpIHsgLy8gZXhwZWN0cyBwYXJhbWF0ZXIgPHRvb2xUaXBzPiB0byBjb250YWluIGFuIGFycmF5IG9mIHRvb2xUaXAgZWxlbWVudHNcbiAgICAgICAgRW5naW5lLnNldExvYWRpbmdTdGF0dXMoVUksICdsb2FkaW5nVG9vbHRpcHMnLCB0cnVlKTtcbiAgICAgICAgYXdhaXQgdG9vbHRpcHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGxldCBjaGlsZEVsZW1lbnQgPSBnZXRDaGlsZEVsZW1lbnRzKGVsZW1lbnQpWzBdO1xuICAgICAgICAgICAgbGV0IGFsaWdubWVudCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwbGFjZScpOyAvLyBleGFtcGxlcyB0byBkZW1vbnN0cmF0ZSBmb3JtYXQgZm9yICdwbGFjZScgKEhUTUwgYXR0cmlidXRlKSAoPC0+IHNlcGVyYXRlcyBkaWZmZXJlbnQgZXhhbXBsZXMpIC0tLT4gY2VudGVyIDwtPiB0cmlwbGU6IGNlbnRlciA8LT4gZG91YmxlOiByaWdodDsgdHJpcGxlOiBsZWZ0IGJvdHRvbTsgPC0+IGxlZnQ7IHNpbmdsZTogY2VudGVyIHRvcDsgPC0+IGxlZnQgYm90dG9tOyBkb3VibGU6IGNlbnRlcjtcbiAgICAgICAgICAgIGxldCBkZWZhdWx0QWxpZ25tZW50ID0gJzsgY2VudGVyJztcbiAgICAgICAgICAgIGFsaWdubWVudCA9IGFsaWdubWVudCA9PT0gbnVsbCA/IGRlZmF1bHRBbGlnbm1lbnQ6YWxpZ25tZW50K2RlZmF1bHRBbGlnbm1lbnQ7IC8vIHRha2VzIGNhcmUgb2YgaXQgaWYgdGhlcmUgaXMgbm8gcGxhY2UgYXR0cmlidXRlIGluIHRoZSBodG1sIG9yIGlmIHRoZSBwbGFjZSBhdHRyaWJ1dGUgY29udGFpbnMgYW4gZW1wdHkgb3IgaW52YWxpZCBzdHJpbmdcbiAgICAgICAgICAgIGFsaWdubWVudCA9IGFsaWdubWVudC5zcGxpdCgnOycpLnJlZHVjZSgoZmluYWwsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjdXJyZW50LnRyaW0oKS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnVuc2hpZnQocmVzdWx0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WzFdID0gcmVzdWx0WzFdLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gWydyZXN0JywgY3VycmVudC50cmltKCkuc3BsaXQoJyAnKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFsxXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ2NlbnRlcicsICdyaWdodCcsICdsZWZ0J10uaW5jbHVkZXMocmVzdWx0WzFdWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsxXS5wdXNoKCd0b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoWyd0b3AnLCAnYm90dG9tJ10uaW5jbHVkZXMocmVzdWx0WzFdWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsxXS51bnNoaWZ0KCdjZW50ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgc3dpdGNoQWxpZ25YID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzd2l0Y2hBbGlnblkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKHJlc3VsdFsxXVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaEFsaWduWCA9IHJlc3VsdFsxXVswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoWydyaWdodCcsICdsZWZ0JywgJ2NlbnRlciddLmluY2x1ZGVzKHJlc3VsdFsxXVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaEFsaWduWSA9IHJlc3VsdFsxXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3dpdGNoQWxpZ25YICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WzFdWzFdID0gc3dpdGNoQWxpZ25YO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2l0Y2hBbGlnblkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbMV1bMF0gPSBzd2l0Y2hBbGlnblk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgY29ycmVjdEZvcm1hdCA9IHRydWU7IC8vIG9ubHkgcHVzaCB0byBmaW5hbCBpZiByZXN1bHQgaXMgaW4gdGhlIGNvcnJlY3QgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIGlmICghcG9zc2libGVEaXNwbGF5U3RhdGVzLmluY2x1ZGVzKHJlc3VsdFswXSkgJiYgJ3Jlc3QnICE9PSByZXN1bHRbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RGb3JtYXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbMV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghWydjZW50ZXInLCAncmlnaHQnLCAnbGVmdCcsICd0b3AnLCAnYm90dG9tJ10uaW5jbHVkZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0Rm9ybWF0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29ycmVjdEZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmaW5hbDtcbiAgICAgICAgICAgIH0sIFtdKTsgLy8gcmV0dXJucyBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdCAtLS0+IFsnPHZpZXdNb2RlICgncmVzdCcgbWVhbnMgYWxsIHVuc3BlY2lmaWVkIHZpZXdtb2Rlcyk+JywgWyc8aG9yem9udGFsIGFsaWdubWVudD4nLCAnPHZlcnRpY2FsIGFsaWdubWVudD4nXV1cbiAgICAgICAgICAgIGFsaWdubWVudCA9ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZpZXdNb2RlcyA9IFtbXSwgW10sIFtdLCBbXV0gLy8gW3RyaXBsZSwgZG91YmxlLCBzaW5nbGUsIHJlc3RdXG4gICAgICAgICAgICAgICAgYWxpZ25tZW50LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1bMF0gPT09ICdyZXN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01vZGVzWzNdLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbVswXSA9PT0gJ3RyaXBsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdNb2Rlc1swXS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1bMF0gPT09ICdkb3VibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3TW9kZXNbMV0ucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtWzBdID09PSAnc2luZ2xlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01vZGVzWzJdLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlld01vZGVzLnJlZHVjZSgoZmluYWwsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwucHVzaChjdXJyZW50WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluYWw7XG4gICAgICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgfSkoKSAvLyBtYWtpbmcgc3VyZSB0aGF0IHRoZXJlIGlzIG9ubHkgb25lIGluc3RhbmNlIG9mIGVhY2ggdmlld21vZGUgb3Igb2YgdHlwZSAncmVzdCdcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYW4gYXJyYXkgb2YgY2xhc3NlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBjaGlsZCBzcGFuIG9mIHRoZSB0b29sVGlwIGRpdiBlbGVtZW50XG4gICAgICAgICAgICBsZXQgYWxpZ25tZW50Q2xhc3NlcyA9ICgoKT0+e1xuICAgICAgICAgICAgICAgIGxldCB2aWV3bW9kZXMgPSBwb3NzaWJsZURpc3BsYXlTdGF0ZXMuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWdubWVudC5yZWR1Y2UoKGZpbmFsLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50WzBdICE9PSAncmVzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdtb2Rlcy5zcGxpY2Uodmlld21vZGVzLmluZGV4T2YoY3VycmVudFswXSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFsxXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsLnB1c2goY3VycmVudFswXSsnLScraXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRbMV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3bW9kZXMuZm9yRWFjaCh2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwucHVzaCh2aWV3KyctJytpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgICAgICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgfSkoKTsgLy8gdGhlc2UgY2xhc3NlcyBhcmUgaW4gdGhlIGZvcm1hdCBvZiAtLS0+ICc8dmlld21vZGU+LTxhbGlnbm1lbnQ+JyB8IEV4YW1wbGVzOiAtLS0+ICdkb3VibGUtcmlnaHQnLCAndHJpcGxlLWNlbnRlcicsICdzaW5nbGUtdG9wJywgJ2RvdWJsZS1ib3R0b20nLCAnc2luZ2xlLWxlZnQnXG5cbiAgICAgICAgICAgIGFsaWdubWVudENsYXNzZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGdldENvb3JkcyA9IHtcbiAgICAgICAgICAgICAgICAndHJpcGxlJzoge1xuICAgICAgICAgICAgICAgICAgICB4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHk6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2RvdWJsZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB5OiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdzaW5nbGUnOiB7XG4gICAgICAgICAgICAgICAgICAgIFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgeTogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAoKCk9PntcbiAgICAgICAgICAgICAgICBsZXQgdmlld21vZGVzID0gcG9zc2libGVEaXNwbGF5U3RhdGVzLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIGFsaWdubWVudC5mb3JFYWNoKGluc3RydWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZpZXcgPSBpbnN0cnVjdGlvblswXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsaWduWCA9IGluc3RydWN0aW9uWzFdWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWxpZ25ZID0gaW5zdHJ1Y3Rpb25bMV1bMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3ICE9PSAncmVzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdtb2Rlcy5zcGxpY2Uodmlld21vZGVzLmluZGV4T2YodmlldyksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldyA9IHZpZXdtb2RlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmlldykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBbdmlld107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmlldy5mb3JFYWNoKHZpZXdNb2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGlnblggPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q29vcmRzW3ZpZXdNb2RlXS54ID0gKHNwYXRpYWxEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzcGF0aWFsRGF0YS54ICsgKE1hdGgucm91bmQoc3BhdGlhbERhdGEud2lkdGgvMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ25YID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb29yZHNbdmlld01vZGVdLnggPSAoc3BhdGlhbERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwYXRpYWxEYXRhLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGFsaWduWCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldENvb3Jkc1t2aWV3TW9kZV0ueCA9IChzcGF0aWFsRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3BhdGlhbERhdGEucmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsaWduWSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb29yZHNbdmlld01vZGVdLnkgPSAoc3BhdGlhbERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwYXRpYWxEYXRhLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduWSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb29yZHNbdmlld01vZGVdLnkgPSAoc3BhdGlhbERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwYXRpYWxEYXRhLmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pKCkgLy8gY3JlYXRlIGFuZCBhZGRzIHRoZSBmdW5jdGlvbnMgZm9yIGdldENvb3JkcyBvYmplY3QgdGhhdCBpcyBzcGVjaWFsaXNlZCBmb3IgdGhlIGdpdmVuIGFsaWdubWVudFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgdGFyZ2V0RWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZm9yJykpXTtcblxuXG4gICAgICAgICAgICBsZXQgc2hvd0V2ZW50ID0gKGV2ZW50LCB0YXJnZXRFbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGF0aWFsRGF0YSA9IGdldE9mZnNldCh0YXJnZXRFbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvb3JkWCA9IGdldENvb3Jkc1tkaXNwbGF5U3RhdGVdLngoc3BhdGlhbERhdGEpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29vcmRZID0gZ2V0Q29vcmRzW2Rpc3BsYXlTdGF0ZV0ueShzcGF0aWFsRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUgPSBgLS1wb3NpdGlvblg6ICR7Y29vcmRYfXB4OyAtLXBvc2l0aW9uWTogJHtjb29yZFl9cHg7YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBoaWRlRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudHMuZm9yRWFjaCh0YXJnZXRFbGVtID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdG9vbHRpcFN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwU3RhdHVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnQoZXZlbnQsIHRhcmdldEVsZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RWxlbS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcFN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBTdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50KGV2ZW50LCB0YXJnZXRFbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBFbmdpbmUuc2V0TG9hZGluZ1N0YXR1cyhVSSwgJ2xvYWRpbmdUb29sdGlwcycsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWF0ZSAoKSB7XG4gICAgICAgIHVwZGF0ZURpc3BsYXlTdGF0ZSgpO1xuICAgICAgICBsb2FkVG9vbFRpcHMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzd2l0Y2hUb0NvbnRlbnRWaWV3ICgpIHtcbiAgICAgICAgaWYgKGRpc3BsYXlTdGF0ZSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3ID0gY29udGVudFZpZXdDb250YWluZXJFbGVtZW50O1xuICAgICAgICAgICAgdXBkYXRlU2luZ2xlVmlldygpO1xuICAgICAgICAgICAgY29udGVudFZpZXdUaXRsZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFsZXJ0ICh0aXRsZSwgbWVzc2FnZSkgeyAvLyBleHBlY3RlZCBwYXJhbWV0ZXJzIC0tPiB0aXRsZSwgbWVzc2FnZSwgYnV0dG9uIDwtIFlvdSBjYW4gcHJvdmlkZSBhcyBtYW55IGJ1dHRvbnMgYXMgeW91IHdhbnQgYnV0IGVhY2ggYnV0dG9uIG11c3QgYmUgYW4gYXJyYXkgd2l0aCB0aGUgZmlyc3QgaXRlbSBiZWluZyB0aGUgbGFiZWwsIGFuZCB0aGUgc2Vjb25kIHNob3VsZCBiZSB0aGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICAgIGlmICh0aXRsZSAhPT0gJycpIHtcbiAgICAgICAgICAgIGFsZXJ0VGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgYWxlcnRNc2dFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTtcblxuICAgICAgICB3aGlsZShhbGVydEJ0bnNDb250YWluZXJFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGFsZXJ0QnRuc0NvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQoYWxlcnRCdG5zQ29udGFpbmVyRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ0bkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGJ0bkVsZW1lbnQudGV4dENvbnRlbnQgPSBhcmd1bWVudHNbaV1bMF07XG4gICAgICAgICAgICBidG5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnRWaWV3RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1tpXVsxXSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbGVydEJ0bnNDb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGJ0bkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGFsZXJ0Vmlld0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdncmlkJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREYXRhQXR0cmlidXRlIChlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLSR7a2V5fWAsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRhQXR0cmlidXRlIChlbGVtZW50LCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2luZGV4Jykge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS0ke2tleX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGBkYXRhLSR7a2V5fWApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1lbnVMaXN0RWxlbWVudCAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgbGV0IG5hbWUgPSBEYXRhLmdldExpc3ROYW1lKHR5cGUsIGluZGV4KTtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBzZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsICd0eXBlJywgdHlwZSk7XG4gICAgICAgIHNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgJ2luZGV4JywgaW5kZXgpO1xuICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIG1lbnVMaXN0Q2xpY2tFdmVudChldmVudCwgdHlwZSwgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdHJpZ2dlclJpZ2h0Q2xpY2tNZW51KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgXCJEZWxldGUgdGhpcyBsaXN0XCI6ICgpPT4oRW5naW5lLmRlbGV0ZUxpc3QodHlwZSwgaW5kZXgpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3JlbW92aW5nJykpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0YXNrJykge1xuICAgICAgICAgICAgdGFza0xpc3RNZW51RWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vdGVMaXN0TWVudUVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJdGVtUG9zaXRpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBnZXRMaXN0U29ydGVkKGN1cnJlbnRMaXN0WzBdLCBEYXRhLmdldExpc3QoLi4uY3VycmVudExpc3QpKS5pbmRleE9mKGluZGV4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMaXN0SXRlbUVsZW1lbnQgKHR5cGUsIGluZGV4KSB7XG4gICAgICAgIGxldCBpdGVtRGF0YSA9IERhdGEuZ2V0SXRlbSh0eXBlLCBpbmRleCk7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgRGF0YS5zcGF3bk5ld0l0ZW1FbGVtKHR5cGUsIGluZGV4KTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHR5cGUpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgICAgICBsZXQgdG9nZ2xlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICB0b2dnbGVFbGVtLnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgICAgICAgdG9nZ2xlRWxlbS50b2dnbGVBdHRyaWJ1dGUoJ2NoZWNrZWQnLCBpdGVtRGF0YS5jaGVja2VkKTtcbiAgICAgICAgICAgIGlmIChpdGVtRGF0YS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2dnbGVFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0b2dnbGVFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIERhdGEudXBkYXRlSXRlbSh0eXBlLCBpbmRleCwge2NoZWNrZWQ6IGV2ZW50LnRhcmdldC5jaGVja2VkfSk7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykgJiYgZWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnbGlzdEl0ZW1zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tlZCcpID09PSBmYWxzZSAmJiBlbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWRJdGVtcycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtRWxlbWVudHMgPSBbLi4ubGlzdEl0ZW1zVUxFbGVtZW50LmNoaWxkcmVuXVxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbVBvcyA9IGdldEl0ZW1Qb3NpdGlvbihpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtRWxlbWVudHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1FbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBnZXRJdGVtUG9zaXRpb24oZ2V0RGF0YUF0dHJpYnV0ZShpdGVtRWxlbWVudHNbaV0sICdpbmRleCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uID4gaXRlbVBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW5baV0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3NpdGlvbisxID09PSBpdGVtUG9zIHx8IGkrMSA9PT0gaXRlbUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW5baV0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbXNVTEVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0b2dnbGVFbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGV4dEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0ZXh0RWxlbS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICB0ZXh0RWxlbS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgaXRlbURhdGEudGl0bGUpO1xuICAgICAgICB0ZXh0RWxlbS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIEVuZ2luZS51cGRhdGVJdGVtUHJvcGVydHkodHlwZSwgaW5kZXgsICdsaXN0VmlldycsIHt0aXRsZTogdGV4dEVsZW0udmFsdWV9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRleHRFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgRW5naW5lLm5ld0l0ZW0oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuYmx1cigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRleHRFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgbG9hZEl0ZW0odHlwZSwgaW5kZXgpO1xuICAgICAgICAgICAgc3dpdGNoVG9Db250ZW50VmlldygpO1xuICAgICAgICB9KVxuICAgICAgICBsZXQgdGV4dEVsZW1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGV4dEVsZW1Db250YWluZXIuY2xhc3NMaXN0LmFkZCgndGV4dENvbnRhaW5lcicpO1xuICAgICAgICB0ZXh0RWxlbUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRleHRFbGVtLmNsaWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0ZXh0RWxlbUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0RWxlbSk7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGV4dEVsZW1Db250YWluZXIpO1xuICAgICAgICBEYXRhLnVwZGF0ZUl0ZW1FbGVtKHR5cGUsIGluZGV4LCB7dGl0bGVFbGVtOiB0ZXh0RWxlbX0pO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgICAgICBsZXQgcHJpb3JpdHlFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICBwcmlvcml0eUVsZW0uY2xhc3NMaXN0LmFkZCgncHJpb3JpdHknKTtcbiAgICAgICAgICAgIGxldCBwcmlvcml0eU9wdGlvbnMgPSBbJ2xvdycsICdub3JtYWwnLCAnaGlnaCcsICd1cmdlbnQnXTtcbiAgICAgICAgICAgIHByaW9yaXR5T3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBvcHRpb24pO1xuICAgICAgICAgICAgICAgIGVsZW0udGV4dENvbnRlbnQgPSBvcHRpb25bMF0udG9VcHBlckNhc2UoKSArIG9wdGlvbi5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09PSBpdGVtRGF0YS5wcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtLnRvZ2dsZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJpb3JpdHlFbGVtLmFwcGVuZENoaWxkKGVsZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoaXRlbURhdGEucHJpb3JpdHkpO1xuICAgICAgICAgICAgcHJpb3JpdHlFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIEVuZ2luZS51cGRhdGVJdGVtUHJvcGVydHkodHlwZSwgaW5kZXgsICdsaXN0VmlldycsIHtwcmlvcml0eTogcHJpb3JpdHlFbGVtLnZhbHVlfSk7XG4gICAgICAgICAgICAgICAgcHJpb3JpdHlPcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHByaW9yaXR5RWxlbS52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocHJpb3JpdHlFbGVtKTtcbiAgICAgICAgICAgIERhdGEudXBkYXRlSXRlbUVsZW0odHlwZSwgaW5kZXgsIHtwcmlvcml0eUVsZW06IHByaW9yaXR5RWxlbX0pO1xuXG4gICAgICAgICAgICBsZXQgZGF0ZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgZGF0ZUVsZW0uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgICAgICAgICAgIGRhdGVFbGVtLnZhbHVlID0gaXRlbURhdGEuZGF0ZSA9PT0gJ05vIGR1ZSBkYXRlJyA/ICcnOml0ZW1EYXRhLmRhdGU7XG4gICAgICAgICAgICBpZiAoZGF0ZUVsZW0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUVsZW0uY2xhc3NMaXN0LmFkZCgnbm9EYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRlRWxlbS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBFbmdpbmUudXBkYXRlSXRlbVByb3BlcnR5KHR5cGUsIGluZGV4LCAnbGlzdFZpZXcnLCB7ZGF0ZTogZGF0ZUVsZW0udmFsdWV9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGRhdGVDb250YWluZXJFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkYXRlQ29udGFpbmVyRWxlbS5jbGFzc0xpc3QuYWRkKCdkYXRlLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgZGF0ZUNvbnRhaW5lckVsZW0uYXBwZW5kQ2hpbGQoZGF0ZUVsZW0pO1xuICAgICAgICAgICAgbGV0IG5vRGF0ZVNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgbm9EYXRlU3BhbkVsZW1lbnQudGV4dENvbnRlbnQgPSAnTm8gZHVlIGRhdGUnO1xuICAgICAgICAgICAgZGF0ZUNvbnRhaW5lckVsZW0uYXBwZW5kQ2hpbGQobm9EYXRlU3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgPiAtMSA9PT0gZmFsc2UpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVIaWdobGlnaHRlckVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgZGF0ZUNvbnRhaW5lckVsZW0uYXBwZW5kQ2hpbGQoZGF0ZUhpZ2hsaWdodGVyRWxlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGRhdGVDb250YWluZXJFbGVtKTtcbiAgICAgICAgICAgIERhdGEudXBkYXRlSXRlbUVsZW0odHlwZSwgaW5kZXgsIHtkYXRlRWxlbTogZGF0ZUVsZW19KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZW1vdmluZycpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCAnaW5kZXgnLCBpbmRleCk7XG4gICAgICAgIGlmIChpdGVtRGF0YS5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb21wbGV0ZWRJdGVtc1VMRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RJdGVtc1VMRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIERhdGEudXBkYXRlSXRlbUVsZW0odHlwZSwgaW5kZXgsIHtlbGVtOiBlbGVtZW50fSk7XG5cbiAgICAgICAgcmV0dXJuIHRleHRFbGVtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMaXN0ICh0eXBlLCBpbmRleCkge1xuICAgICAgICBjdXJyZW50TGlzdCA9IFt0eXBlLCBpbmRleF07XG4gICAgICAgIGxldCBtZW51TGlzdEVsZW1lbnRzID0gW2FsbFRhc2tzTWVudUVsZW1lbnQsIC4uLnRhc2tMaXN0TWVudUVsZW1lbnQuY2hpbGRyZW4sIGFsbE5vdGVzTWVudUVsZW1lbnQsIC4uLm5vdGVMaXN0TWVudUVsZW1lbnQuY2hpbGRyZW5dO1xuICAgICAgICBtZW51TGlzdEVsZW1lbnRzLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2V0RGF0YUF0dHJpYnV0ZShlbGVtLCAnaW5kZXgnKSAhPT0gaW5kZXggfHwgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtLCAndHlwZScpICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIG5ld0J0bkxpc3RWaWV3RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgbGlzdE5hbWVJbkxpc3RWaWV3RWxlbWVudC50b2dnbGVBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdCdG5MaXN0Vmlld0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICAgICAgICAgIGxpc3ROYW1lSW5MaXN0Vmlld0VsZW1lbnQudG9nZ2xlQXR0cmlidXRlKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ25vdGUnKSB7XG4gICAgICAgICAgICBsaXN0Vmlld09wdGlvbnNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBjb21wbGV0ZWRUaXRsZVdyYXBwZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBjb21wbGV0ZWRJdGVtc1VMRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdFZpZXdPcHRpb25zRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnO1xuICAgICAgICAgICAgY29tcGxldGVkVGl0bGVXcmFwcGVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnO1xuICAgICAgICAgICAgY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdncmlkJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGlzdE5hbWVJbkxpc3RWaWV3RWxlbWVudC52YWx1ZSA9IERhdGEuZ2V0TGlzdE5hbWUodHlwZSwgaW5kZXgpO1xuICAgICAgICBcbiAgICAgICAgRGF0YS5nZXRMaXN0T3B0aW9ucyh0eXBlLCBpbmRleCkuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsaXN0Vmlld09wdGlvbkVsZW1lbnRzW2luZGV4XS5jaGVja2VkID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV2dCA9IG5ldyBFdmVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBsaXN0Vmlld09wdGlvbkVsZW1lbnRzW2luZGV4XS5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgbGV0IGxpc3QgPSBnZXRMaXN0U29ydGVkKHR5cGUsIERhdGEuZ2V0TGlzdCh0eXBlLCBpbmRleCkpO1xuICAgICAgICBcbiAgICAgICAgW2xpc3RJdGVtc1VMRWxlbWVudCwgY29tcGxldGVkSXRlbXNVTEVsZW1lbnRdLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIERhdGEuY2xlYXJJdGVtRWxlbXMoKTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKChpdGVtSW5kZXgsIGkpID0+IHtcbiAgICAgICAgICAgIGNyZWF0ZUxpc3RJdGVtRWxlbWVudCh0eXBlLCBpdGVtSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpc3RJdGVtc1VMRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2FkSXRlbSh0eXBlLCBnZXREYXRhQXR0cmlidXRlKGxpc3RJdGVtc1VMRWxlbWVudC5jaGlsZHJlblswXSwgJ2luZGV4JykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYXJDb250ZW50VmlldygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TGlzdFNvcnRlZCAodHlwZSwgbGlzdD1EYXRhLmdldExpc3QoLi4uY3VycmVudExpc3QpKSB7XG4gICAgICAgIGxldCBzb3J0VHlwZSA9IG51bGw7XG4gICAgICAgIGlmIChsaXN0Vmlld09wdGlvbkVsZW1lbnRzWzBdLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHNvcnRUeXBlID0gJ3ByaW9yaXR5JztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdFZpZXdPcHRpb25FbGVtZW50c1sxXS5jaGVja2VkKSB7XG4gICAgICAgICAgICBpZiAoc29ydFR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzb3J0VHlwZSA9ICdib3RoJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc29ydFR5cGUgPSAnZGF0ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRUeXBlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc29ydFR5cGUgPT09ICdwcmlvcml0eScpIHtcbiAgICAgICAgICAgICAgICBsaXN0ID0gRGF0YS5zb3J0QnlQcmlvcml0eSh0eXBlLCBsaXN0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydFR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICAgICAgICAgIGxpc3QgPSBEYXRhLnNvcnRCeURhdGUodHlwZSwgbGlzdCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvcnRUeXBlID09PSAnYm90aCcpIHtcbiAgICAgICAgICAgICAgICBsaXN0ID0gRGF0YS5taXhTb3J0ZWQoRGF0YS5zb3J0QnlQcmlvcml0eSh0eXBlLCBsaXN0KSwgRGF0YS5zb3J0QnlEYXRlKHR5cGUsIGxpc3QpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkSXRlbSAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgY3VycmVudEl0ZW0gPSBbdHlwZSwgaW5kZXhdO1xuICAgICAgICBsZXQgaXRlbUVsZW1lbnRzID0gWy4uLmxpc3RJdGVtc1VMRWxlbWVudC5jaGlsZHJlbiwgLi4uY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuY2hpbGRyZW5dO1xuICAgICAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICAgIGlmIChnZXREYXRhQXR0cmlidXRlKGVsZW0sICdpbmRleCcpICE9PSBpbmRleCkge1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGl0ZW1EYXRhID0gRGF0YS5nZXRJdGVtKHR5cGUsIGluZGV4KTsgICAgXG5cbiAgICAgICAgY29udGVudFZpZXdUaXRsZUVsZW1lbnQudmFsdWUgPSBpdGVtRGF0YS50aXRsZTtcbiAgICAgICAgY29udGVudFZpZXdEZXNjRWxlbWVudC52YWx1ZSA9IGl0ZW1EYXRhLnRleHRCb2R5O1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgICAgICBjb250ZW50Vmlld1ByaW9yaXR5RWxlbWVudC52YWx1ZSA9IGl0ZW1EYXRhLnByaW9yaXR5O1xuICAgICAgICAgICAgY29udGVudFZpZXdEYXRlRWxlbWVudC52YWx1ZSA9IGl0ZW1EYXRhLmRhdGUgPT09ICdObyBkdWUgZGF0ZSc/ICcnOml0ZW1EYXRhLmRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudFZpZXdDbGVhckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICBbJ2NsZWFyJywgJ3Rhc2snLCAnbm90ZSddLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBjb250ZW50Vmlld0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpdGVtKTtcbiAgICAgICAgfSlcbiAgICAgICAgY29udGVudFZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQodHlwZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlclJpZ2h0Q2xpY2tNZW51IChldmVudCwgY29udGVudE9iamVjdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgY29udGVudCA9IE9iamVjdC5lbnRyaWVzKGNvbnRlbnRPYmplY3QpO1xuICAgICAgICB3aGlsZSAocmlnaHRDbGlja0Ryb3Bkb3duRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICByaWdodENsaWNrRHJvcGRvd25FbGVtZW50LnJlbW92ZUNoaWxkKHJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudC5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gZW50cnlbMF07XG4gICAgICAgICAgICBvcHRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIGVudHJ5WzFdKCk7XG4gICAgICAgICAgICAgICAgY29sbGFwc2VFdmVudCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByaWdodENsaWNrRHJvcGRvd25FbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH0pXG4gICAgICAgIHJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQuc3R5bGUubGVmdCA9IGV2ZW50LmNsaWVudFgrJ3B4JztcbiAgICAgICAgcmlnaHRDbGlja0Ryb3Bkb3duRWxlbWVudC5zdHlsZS50b3AgPSBldmVudC5jbGllbnRZKydweCc7XG4gICAgICAgIHJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2UnKTtcblxuICAgICAgICBsZXQgY2xpY2tDYXRjaGVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBvdXRzaWRlQ0xpY2tFdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ291dHNpZGUgY2xpY2sgZXZlbnQgdHJpZ2dlcmVkJyk7XG4gICAgICAgICAgICBpZiAoIXJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ21vdXNlbGVhdmUnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxldCBjb2xsYXBzZUV2ZW50ID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgcmlnaHRDbGlja0Ryb3Bkb3duRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xuICAgICAgICAgICAgcmlnaHRDbGlja0Ryb3Bkb3duRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgY29sbGFwc2VFdmVudCk7XG4gICAgICAgICAgICBjbGlja0NhdGNoZXJFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3V0c2lkZUNMaWNrRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrQ2F0Y2hlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvdXRzaWRlQ0xpY2tFdmVudCwgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmlnaHRDbGlja0Ryb3Bkb3duRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgY29sbGFwc2VFdmVudClcbiAgICAgICAgfSwgNTApO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gbG9hZERhdGEgKCkge1xuICAgICAgICBsZXQgdGFza0xpc3RzID0gRGF0YS5nZXRMaXN0KCd0YXNrTGlzdHMnKTtcbiAgICAgICAgbGV0IG5vdGVMaXN0cyA9IERhdGEuZ2V0TGlzdCgnbm90ZUxpc3RzJyk7XG4gICAgICAgIFt0YXNrTGlzdHMsIG5vdGVMaXN0c10uZm9yRWFjaCgobGlzdE9mTGlzdHMsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IGluZGV4ID09PSAwID8gJ3Rhc2snOidub3RlJztcbiAgICAgICAgICAgIGxpc3RPZkxpc3RzLmZvckVhY2gobGlzdEluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVNZW51TGlzdEVsZW1lbnQodHlwZSwgbGlzdEluZGV4KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIGxvYWRMaXN0KC4uLmN1cnJlbnRMaXN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMaXN0Vmlld09wdGlvbnNEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RWaWV3T3B0aW9uRWxlbWVudHMucmVkdWNlKChmaW5hbCwgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgZmluYWwucHVzaChjdXJyZW50LmNoZWNrZWQpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgICB9LCBbXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVJdGVtICh0eXBlLCBpbmRleCwgZXhjZXB0aW9uLCBlbnRyaWVzKSB7XG4gICAgICAgIGxldCBwcmVzZW50SXRlbSA9IF8uaXNFcXVhbChjdXJyZW50SXRlbSwgW3R5cGUsIGluZGV4XSk7XG4gICAgICAgIGxldCB0YXJnZXQgPSBleGNlcHRpb24gPT09ICdsaXN0VmlldycgPyAnY29udGVudFZpZXcnOidsaXN0Vmlldyc7XG4gICAgICAgIGZ1bmN0aW9uIGdldEVsZW1lbnQgKHRhcmdldCwgbmFtZSkge1xuICAgICAgICAgICAgbmFtZSArPSAnRWxlbSc7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSAnbGlzdFZpZXcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGEuZ2V0SXRlbUVsZW0odHlwZSwgaW5kZXgsIG5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGl0bGVFbGVtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50Vmlld1RpdGxlRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcmlvcml0eUVsZW0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRWaWV3UHJpb3JpdHlFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGVFbGVtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50Vmlld0RhdGVFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHRCb2R5RWxlbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudFZpZXdEZXNjRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhlbnRyaWVzKS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZ2V0RWxlbWVudCh0YXJnZXQsIGVudHJ5WzBdKTtcbiAgICAgICAgICAgIGlmIChbJ3RpdGxlJywgJ3ByaW9yaXR5JywgJ2RhdGUnXS5pbmNsdWRlcyhlbnRyeVswXSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSAnY29udGVudFZpZXcnIHx8IHByZXNlbnRJdGVtID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5WzBdID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5WzFdID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gJ2NvbnRlbnRWaWV3Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEVsZW1lbnQoJ2xpc3RWaWV3JywgJ2RhdGUnKS5jbGFzc0xpc3QuYWRkKCdub0RhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbm9EYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSAnY29udGVudFZpZXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RWxlbWVudCgnbGlzdFZpZXcnLCAnZGF0ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ25vRGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdub0RhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlSXRlbSAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKF8uaXNFcXVhbChjdXJyZW50SXRlbSwgW3R5cGUsIGluZGV4XSkpIHtcbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gRGF0YS5nZXRJdGVtKHR5cGUsIGluZGV4KS5jaGVja2VkO1xuICAgICAgICAgICAgbGV0IGxpc3QgPSBjaGVja2VkID8gY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuY2hpbGRyZW4gOiBsaXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgJiYgbGlzdEl0ZW1zVUxFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZEl0ZW0odHlwZSwgZ2V0RGF0YUF0dHJpYnV0ZShsaXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW5bMF0sICdpbmRleCcpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckNvbnRlbnRWaWV3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldERhdGFBdHRyaWJ1dGUobGlzdFtpXSwgJ2luZGV4JykgPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGlzdC5sZW5ndGgtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRJdGVtKHR5cGUsIGdldERhdGFBdHRyaWJ1dGUobGlzdFtpLTFdLCAnaW5kZXgnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRJdGVtKHR5cGUsIGdldERhdGFBdHRyaWJ1dGUobGlzdFtpKzFdLCAnaW5kZXgnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGl0ZW1FbGVtZW50cyA9IFsuLi5saXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW4sIC4uLmNvbXBsZXRlZEl0ZW1zVUxFbGVtZW50LmNoaWxkcmVuXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChnZXREYXRhQXR0cmlidXRlKGl0ZW1FbGVtZW50c1tpXSwgJ2luZGV4JykgPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaXRlbUVsZW1lbnRzW2ldLmNsYXNzTGlzdC5hZGQoJ3JlbW92aW5nJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ICh0eXBlLCBpbmRleCkge1xuICAgICAgICBpZiAoY3VycmVudExpc3RbMF0gPT09IHR5cGUgJiYgY3VycmVudExpc3RbMV0gPT09IDApIHtcbiAgICAgICAgICAgIGxldCBwcmVzZW50TGlzdEl0ZW1FbGVtZW50cyA9IFsuLi5saXN0SXRlbXNVTEVsZW1lbnQuY2hpbGRyZW4sIC4uLmNvbXBsZXRlZEl0ZW1zVUxFbGVtZW50LmNoaWxkcmVuXTtcbiAgICAgICAgICAgIHByZXNlbnRMaXN0SXRlbUVsZW1lbnRzLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1JbmRleCA9IGdldERhdGFBdHRyaWJ1dGUoZWxlbSwgJ2luZGV4Jyk7XG4gICAgICAgICAgICAgICAgaWYgKERhdGEuZ2V0SXRlbSh0eXBlLCBpdGVtSW5kZXgpLmxpc3RJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSXRlbSh0eXBlLCBpdGVtSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGlzdCA9IHR5cGUgPT09ICd0YXNrJyA/IFthbGxUYXNrc01lbnVFbGVtZW50LCAuLi50YXNrTGlzdE1lbnVFbGVtZW50LmNoaWxkcmVuXSA6IFthbGxOb3Rlc01lbnVFbGVtZW50LCAuLi5ub3RlTGlzdE1lbnVFbGVtZW50LmNoaWxkcmVuXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZ2V0RGF0YUF0dHJpYnV0ZShsaXN0W2ldLCAnaW5kZXgnKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0VxdWFsKGN1cnJlbnRMaXN0LCBbdHlwZSwgaW5kZXhdKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGlzdC5sZW5ndGgtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZExpc3QodHlwZSwgZ2V0RGF0YUF0dHJpYnV0ZShsaXN0W2ktMV0sICdpbmRleCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRMaXN0KHR5cGUsIGdldERhdGFBdHRyaWJ1dGUobGlzdFtpKzFdLCAnaW5kZXgnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGlzdFtpXS5jbGFzc0xpc3QuYWRkKCdyZW1vdmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJDb250ZW50VmlldyAoKSB7XG4gICAgICAgIGN1cnJlbnRJdGVtID0gbnVsbDtcblxuICAgICAgICBjb250ZW50Vmlld1RpdGxlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgICBjb250ZW50Vmlld0Rlc2NFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgIGNvbnRlbnRWaWV3UHJpb3JpdHlFbGVtZW50LnZhbHVlID0gJ25vcm1hbCc7XG4gICAgICAgIGNvbnRlbnRWaWV3RGF0ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgICAgY29udGVudFZpZXdDbGVhckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdncmlkJztcblxuICAgICAgICBbJ2NsZWFyJywgJ3Rhc2snLCAnbm90ZSddLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBjb250ZW50Vmlld0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpdGVtKTtcbiAgICAgICAgfSlcbiAgICAgICAgY29udGVudFZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NsZWFyJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTGlzdE5hbWUgKHR5cGUsIGluZGV4LCBuYW1lKSB7XG4gICAgICAgIGxldCBsaXN0ID0gdHlwZSA9PT0gJ3Rhc2snID8gdGFza0xpc3RNZW51RWxlbWVudC5jaGlsZHJlbiA6IG5vdGVMaXN0TWVudUVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGdldERhdGFBdHRyaWJ1dGUobGlzdFtpXSwgJ2luZGV4JykgPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgbGlzdFtpXS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlTW9kdWxlKHtcbiAgICAgICAgbmFtZTogJ1VJJyxcbiAgICAgICAgcHJvY2Vzc2VzOiBbJ3VwZGF0aW5nRGlzcGxheScsICdsb2FkaW5nVG9vbHRpcHMnXSxcbiAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgdXBkYXRlRGlzcGxheSxcbiAgICAgICAgICAgIGluaXRpYXRlLFxuICAgICAgICAgICAgaGlkZU1lbnUsXG4gICAgICAgICAgICBzd2l0Y2hUb0NvbnRlbnRWaWV3LFxuICAgICAgICAgICAgdXBkYXRlU2luZ2xlVmlldyxcbiAgICAgICAgICAgIGxvYWRpbmdTY3JlZW5WaXNpYmxlLFxuICAgICAgICAgICAgc2hvd0xvYWRpbmdTY3JlZW4sXG4gICAgICAgICAgICBoaWRlTG9hZGluZ1NjcmVlbixcbiAgICAgICAgICAgIGxvYWREYXRhLFxuICAgICAgICAgICAgYWxlcnQsXG4gICAgICAgICAgICBjcmVhdGVNZW51TGlzdEVsZW1lbnQsXG4gICAgICAgICAgICBsb2FkTGlzdCxcbiAgICAgICAgICAgIGxvYWRJdGVtLFxuICAgICAgICAgICAgZ2V0TGlzdFZpZXdPcHRpb25zRGF0YSxcbiAgICAgICAgICAgIGNyZWF0ZUxpc3RJdGVtRWxlbWVudCxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0sXG4gICAgICAgICAgICByZW1vdmVJdGVtLFxuICAgICAgICAgICAgcmVtb3ZlTGlzdCxcbiAgICAgICAgICAgIGdldERhdGFBdHRyaWJ1dGUsXG4gICAgICAgICAgICB1cGRhdGVMaXN0TmFtZSxcbiAgICAgICAgICAgIHZpZXdPdmVyZmxvdyxcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKVxuXG5jb25zdCBEYXRhID0gKCgpPT57ICAgIFxuICAgIGNvbnN0IGRlZmF1bHRMaXN0TmFtZXMgPSBbJ3Rhc2tMaXN0cycsICdub3RlTGlzdHMnLCAndGFza0l0ZW1zJywgJ25vdGVJdGVtcycsICd0YXNrTGlzdF8wJywgJ25vdGVMaXN0XzAnXTtcblxuICAgIGxldCBsaXN0SXRlbUVsZW1zID0ge1xuICAgICAgICB0YXNrOiB7fSxcbiAgICAgICAgbm90ZToge31cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckl0ZW1FbGVtcyAoKSB7XG4gICAgICAgIGxpc3RJdGVtRWxlbXMgPSB7XG4gICAgICAgICAgICB0YXNrOiB7fSxcbiAgICAgICAgICAgIG5vdGU6IHt9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVJdGVtRWxlbSAodHlwZSwgaW5kZXgsIGVudHJpZXMpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZW50cmllcykuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgICBsaXN0SXRlbUVsZW1zW3R5cGVdW2luZGV4XVtlbnRyeVswXV0gPSBlbnRyeVsxXTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3Bhd25OZXdJdGVtRWxlbSAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgbGlzdEl0ZW1FbGVtc1t0eXBlXVtpbmRleF0gPSB7XG4gICAgICAgICAgICBlbGVtOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aXRsZUVsZW06IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByaW9yaXR5RWxlbTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0ZUVsZW06IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJdGVtRWxlbSAodHlwZSwgaW5kZXgsIGVsZW1OYW1lKSB7XG4gICAgICAgIHJldHVybiBsaXN0SXRlbUVsZW1zW3R5cGVdW2luZGV4XVtlbGVtTmFtZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SXRlbVBvc2l0aW9uICh0eXBlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gZ2V0TGlzdCh0eXBlLCBjdXJyZW50TGlzdFsxXSkuaW5kZXhPZihpbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3Bhd25OZXdMaXN0ICh0eXBlLCBuYW1lKSB7XG4gICAgICAgIGxldCB0eXBlTGlzdHMgPSBkYXRhLmdldCh0eXBlKydMaXN0cycpO1xuICAgICAgICBsZXQgaW5kZXggPSBnZXROZXdJbmRleCh0eXBlTGlzdHMpO1xuICAgICAgICB0eXBlTGlzdHMucHVzaChpbmRleCk7XG4gICAgICAgIGRhdGEuc2V0KHR5cGUrJ0xpc3RzJywgdHlwZUxpc3RzKTtcbiAgICAgICAgbGV0IGxpc3ROYW1lID0gdHlwZSsnTGlzdF8nK2luZGV4O1xuICAgICAgICBkYXRhLnNldChsaXN0TmFtZSsnX25hbWUnLCBuYW1lKTtcbiAgICAgICAgZGF0YS5zZXQobGlzdE5hbWUrJ19vcHRpb25zJywgW2ZhbHNlLCBmYWxzZSwgdHJ1ZSwgdHJ1ZV0pO1xuICAgICAgICBkYXRhLnNldChsaXN0TmFtZSwgW10pO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdCAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgbGV0IGxpc3ROYW1lID0gdHlwZSsnTGlzdF8nK2luZGV4O1xuICAgICAgICBpZiAoZGF0YS5leGlzdHMobGlzdE5hbWUpKSB7XG4gICAgICAgICAgICBsZXQgbGlzdEl0ZW1zID0gZ2V0TGlzdCh0eXBlLCBpbmRleCk7XG4gICAgICAgICAgICBsaXN0SXRlbXMuZm9yRWFjaChpdGVtSW5kZXggPT4gcmVtb3ZlSXRlbSh0eXBlLCBpdGVtSW5kZXgpKTtcbiAgICAgICAgICAgIGxldCB0eXBlTGlzdHMgPSBkYXRhLmdldCh0eXBlKydMaXN0cycpO1xuICAgICAgICAgICAgdHlwZUxpc3RzLnNwbGljZSh0eXBlTGlzdHMuaW5kZXhPZihpbmRleCksIDEpO1xuICAgICAgICAgICAgZGF0YS5zZXQodHlwZSsnTGlzdHMnLCB0eXBlTGlzdHMpO1xuICAgICAgICAgICAgZGF0YS5yZW1vdmUobGlzdE5hbWUrJ19uYW1lJyk7XG4gICAgICAgICAgICBkYXRhLnJlbW92ZShsaXN0TmFtZSsnX29wdGlvbnMnKTtcbiAgICAgICAgICAgIGRhdGEucmVtb3ZlKGxpc3ROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExpc3QgZG9lc24ndCBleGlzdDogJHtsaXN0TmFtZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwYXduTmV3SXRlbSAodHlwZSwgbGlzdEluZGV4KSB7XG4gICAgICAgIGxldCBpdGVtID0gY3JlYXRlSXRlbSh0eXBlLCBsaXN0SW5kZXgpO1xuICAgICAgICBsZXQgbGlzdE5hbWUgPSB0eXBlKydMaXN0XycrbGlzdEluZGV4O1xuICAgICAgICBsZXQgbGlzdCA9IGRhdGEuZ2V0KGxpc3ROYW1lKTtcbiAgICAgICAgbGV0IHR5cGVMaXN0ID0gZGF0YS5nZXQodHlwZSsnSXRlbXMnKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBpbmRleCA9IGdldE5ld0luZGV4KHR5cGVMaXN0KTtcblxuICAgICAgICB0eXBlTGlzdC5wdXNoKGluZGV4KTtcbiAgICAgICAgZGF0YS5zZXQodHlwZSsnSXRlbXMnLCB0eXBlTGlzdCk7XG4gICAgICAgIFxuICAgICAgICBsaXN0LnB1c2goaW5kZXgpO1xuICAgICAgICBkYXRhLnNldChsaXN0TmFtZSwgbGlzdCk7XG5cbiAgICAgICAgXG4gICAgICAgIGxldCBpdGVtTmFtZSA9IHR5cGUrJ0l0ZW1fJytpbmRleDtcbiAgICAgICAgZGF0YS5zZXQoaXRlbU5hbWUsIGl0ZW0pO1xuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJdGVtICh0eXBlLCBpbmRleCkge1xuICAgICAgICBsZXQgaXRlbU5hbWUgPSB0eXBlKydJdGVtXycraW5kZXg7XG4gICAgICAgIGlmIChkYXRhLmV4aXN0cyhpdGVtTmFtZSkpIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gZGF0YS5nZXQoaXRlbU5hbWUpO1xuICAgICAgICAgICAgbGV0IGxpc3ROYW1lID0gdHlwZSsnTGlzdF8nK2l0ZW0ubGlzdEluZGV4O1xuICAgICAgICAgICAgbGV0IGxpc3QgPSBkYXRhLmdldChsaXN0TmFtZSk7XG4gICAgICAgICAgICBsaXN0LnNwbGljZShsaXN0LmluZGV4T2YoaW5kZXgpLCAxKTtcbiAgICAgICAgICAgIGRhdGEuc2V0KGxpc3ROYW1lLCBsaXN0KTtcbiAgICAgICAgICAgIGxldCB0eXBlTGlzdCA9IGRhdGEuZ2V0KHR5cGUrJ0l0ZW1zJyk7XG4gICAgICAgICAgICB0eXBlTGlzdC5zcGxpY2UodHlwZUxpc3QuaW5kZXhPZihpbmRleCksIDEpO1xuICAgICAgICAgICAgZGF0YS5zZXQodHlwZSsnSXRlbXMnLCB0eXBlTGlzdCk7XG4gICAgICAgICAgICBkYXRhLnJlbW92ZShpdGVtTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBJdGVtIGRvZXNuJ3QgZXhpc3Q6ICR7aXRlbU5hbWV9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXROZXdJbmRleCAoYXJyYXlPZkluZGV4ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheU9mSW5kZXhlcy5sZW5ndGgrMTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWFycmF5T2ZJbmRleGVzLmluY2x1ZGVzKGkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlSXRlbSAodHlwZSwgbGlzdEluZGV4KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcmVhdGVJdGVtJyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0eXBlOicsIHR5cGUpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsaXN0SW5kZXg6JywgbGlzdEluZGV4KVxuXG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbGlzdEluZGV4LFxuICAgICAgICAgICAgdGl0bGU6ICcnLFxuICAgICAgICAgICAgdGV4dEJvZHk6ICcnLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgICAgICByZXN1bHQucHJpb3JpdHkgPSAnbm9ybWFsJztcbiAgICAgICAgICAgIHJlc3VsdC5kYXRlID0gJ05vIGR1ZSBkYXRlJztcbiAgICAgICAgICAgIHJlc3VsdC5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJmaW5hbCByZXN1bHQ6IHZcIik7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKHJlc3VsdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMaXN0ICh0eXBlLCBpbmRleCkge1xuICAgICAgICB0eXBlID0gdHlwZS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR5cGU7XG4gICAgICAgIGlmICh0eXBlICE9PSAndGFzaycgfHwgdHlwZSAhPT0gJ2xpc3QnKSB7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS5pbmNsdWRlcygndGFzaycpID8gJ3Rhc2snOidub3RlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0ID09PSAndGFza2xpc3RzJyB8fCB0YXJnZXQgPT09ICdub3RlbGlzdHMnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5nZXQodHlwZSsnTGlzdHMnKS5zbGljZSgxKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdhbGwgdGFza3MnIHx8IHRhcmdldCA9PT0gJ2FsbCBub3RlcycpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaWQgPSB0eXBlKydMaXN0XycraW5kZXg7XG4gICAgICAgIGlmIChkYXRhLmV4aXN0cyhpZCkpIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gZGF0YS5nZXQoaWQrJ19uYW1lJyk7XG4gICAgICAgICAgICBsZXQgYWxsTGlzdCA9ICdBbGwgJyt0eXBlWzBdLnRvVXBwZXJDYXNlKCkrdHlwZS5zbGljZSgxKSsncyc7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gYWxsTGlzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmdldCh0eXBlKydJdGVtcycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5nZXQoaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGlzdCBkb2Vzbid0IGV4aXN0OiAke2lkfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldExpc3ROYW1lICh0eXBlLCBpbmRleCkge1xuICAgICAgICBsZXQgaWQgPSB0eXBlKydMaXN0XycraW5kZXg7XG4gICAgICAgIGlmIChkYXRhLmV4aXN0cyhpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmdldChpZCsnX25hbWUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExpc3QgZG9lc24ndCBleGlzdDogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEl0ZW0gKHR5cGUsIGluZGV4KSB7XG4gICAgICAgIGxldCBpdGVtTmFtZSA9IHR5cGUrJ0l0ZW1fJytpbmRleDtcbiAgICAgICAgaWYgKGRhdGEuZXhpc3RzKGl0ZW1OYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZ2V0KGl0ZW1OYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEl0ZW0gZG9lc24ndCBleGlzdDogJHtpdGVtTmFtZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRBbmV3ICgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgIGRhdGEuc2V0KCdUT1BfUHJvamVjdF9Ub0RvTGlzdF9TdG9yYWdlRXhpc3RzJywgdHJ1ZSk7XG4gICAgICAgIGRlZmF1bHRMaXN0TmFtZXMuZm9yRWFjaChuYW1lID0+IGRhdGEuc2V0KG5hbWUsIFtdKSk7XG4gICAgICAgIHNwYXduTmV3TGlzdCgndGFzaycsICdBbGwgVGFza3MnKTtcbiAgICAgICAgc3Bhd25OZXdMaXN0KCdub3RlJywgJ0FsbCBOb3RlcycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxpc3RPcHRpb25zICh0eXBlPWN1cnJlbnRMaXN0WzBdLCBpbmRleD1jdXJyZW50TGlzdFsxXSwgb3B0aW9uc0FycmF5PVVJLmdldExpc3RWaWV3T3B0aW9uc0RhdGEoKSkge1xuICAgICAgICBsZXQgaWQgPSB0eXBlKydMaXN0XycraW5kZXgrJ19vcHRpb25zJztcbiAgICAgICAgZGF0YS5zZXQoaWQsIG9wdGlvbnNBcnJheSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmVyaWZ5RGF0YSAoKSB7XG4gICAgICAgIEVuZ2luZS5zZXRMb2FkaW5nU3RhdHVzKERhdGEsICd2ZXJpZnlpbmdEYXRhJywgdHJ1ZSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJ2ZXJpZnlEYXRhKClcIik7XG4gICAgICAgIGxldCByZXN1bHQgPSB0cnVlO1xuICAgICAgICBsZXQgZGVmYXVsdExpc3RzRXhpc3QgPSBkZWZhdWx0TGlzdE5hbWVzLnJlZHVjZSgoZmluYWwsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLmV4aXN0cyhjdXJyZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJ0aGUgZm9sbG93aW5nIGRlZmF1bHRMaXN0IGRvZXNuJ3QgZXhpc3Q6XCIsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIGZpbmFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmluYWw7XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgICBpZiAoZGVmYXVsdExpc3RzRXhpc3QpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJ2ZXJpZnlpbmcgc3VibGlzdHMgYW5kIGl0ZW1zXCIpO1xuICAgICAgICAgICAgbGV0IHN1Ykxpc3RzQW5kSXRlbXNFeGlzdCA9IFsndGFza0xpc3RzJywgJ25vdGVMaXN0cyddLnJlZHVjZSgoZmluYWwsIGN1cnJlbnRMaXN0TmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGRhdGEuZ2V0KGN1cnJlbnRMaXN0TmFtZSkuZm9yRWFjaChzdWJMaXN0SW5kZXggPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViTGlzdE5hbWUgPSBjdXJyZW50TGlzdE5hbWUuc2xpY2UoMCwgY3VycmVudExpc3ROYW1lLmxlbmd0aC0xKSsnXycrc3ViTGlzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwKFwiY2hlY2tpbmcgc3VibGlzdDpcIiwgc3ViTGlzdE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc3ViTGlzdEluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIHN1Ymxpc3QgaW5kZXggaXMgbm90IGFuIGludGVnZXI6XCIsIHN1Ykxpc3RJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZXhpc3RzKHN1Ykxpc3ROYW1lKSA9PT0gZmFsc2UgfHwgZGF0YS5leGlzdHMoc3ViTGlzdE5hbWUrJ19uYW1lJykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgc3VibGlzdCBkb2Vzbid0IGV4aXN0IG9yIHN1Ymxpc3RfbmFtZSBkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU3VibGlzdCBleGlzdHM/XCIsIGRhdGEuZXhpc3RzKHN1Ykxpc3ROYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTdWJsaXN0X25hbWUgZXhpc3RzP1wiLCBkYXRhLmV4aXN0cyhzdWJMaXN0TmFtZSsnX25hbWUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZ2V0KHN1Ykxpc3ROYW1lKydfbmFtZScpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInN1Ykxpc3RfbmFtZSBpcyBlbXB0eVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmIChkYXRhLmV4aXN0cyhzdWJMaXN0TmFtZSsnX29wdGlvbnMnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInN1Ykxpc3Rfb3B0aW9ucyBkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShkYXRhLmdldChzdWJMaXN0TmFtZSsnX29wdGlvbnMnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInN1Ykxpc3Rfb3B0aW9ucyBpcyBpbnZhbGlkLiBOb3QgYW4gQXJyYXlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9uc1ZhbHVlc1ZhbGlkID0gZGF0YS5nZXQoc3ViTGlzdE5hbWUrJ19vcHRpb25zJykucmVkdWNlKCh2ZXJkaWN0LCB2YWx1ZSwgdmFsdWVJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHN1Ykxpc3Rfb3B0aW9ucyBhcnJheSBjb250YWlucyBhbiBpdGVtIHdpdGggaW52YWxpZCB2YWx1ZS4gTm90IGEgYm9vbGVhbi4gSXRlbSBpbmRleCBpczogJHt2YWx1ZUluZGV4fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJkaWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNWYWx1ZXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmVyaWZ5aW5nIHRoZSBpdGVtcyBvZiBzdWJMaXN0XCIsIHN1Ykxpc3ROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbXNFeGlzdCA9IGRhdGEuZ2V0KHN1Ykxpc3ROYW1lKS5yZWR1Y2UoKGl0ZW1UZXN0RmluYWwsIGN1cnJlbnRJdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1OYW1lID0gc3ViTGlzdE5hbWUuc2xpY2UoMCwgNCkrJ0l0ZW1fJytjdXJyZW50SXRlbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwKFwiY2hlY2tpbmcgaXRlbTpcIiwgaXRlbU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoY3VycmVudEl0ZW1JbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW0gaW5kZXggaXMgbm90IGFuIGludGVnZXI6XCIsIGN1cnJlbnRJdGVtSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVRlc3RGaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZXhpc3RzKGl0ZW1OYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInRoaXMgaXRlbSAoXCIsIGl0ZW1OYW1lLFwiKSBkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVRlc3RGaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBkYXRhLmdldChpdGVtTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInZlcmlmeWluZyBpdGVtJ3MgY29udGVudHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzT2ZUeXBlKGl0ZW0sIFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbSBpc24ndCBhbiBvYmplY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVRlc3RGaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgIT09ICd0YXNrJyAmJiBpdGVtLnR5cGUgIT09ICdub3RlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW0udHlwZSBpcyBpbnZhbGlkOlwiLCBpdGVtLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1UZXN0RmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIU51bWJlci5pc0ludGVnZXIoaXRlbS5saXN0SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbSdzIGxpc3RJbmRleCBpcyBub3QgYW4gSW50ZWdlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtVGVzdEZpbmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLnRpdGxlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgaXRlbS50ZXh0Qm9keSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJpdGVtJ3MgdGl0bGUgb3IgdGV4dEJvZHkgaXMgbm90IGEgc3RyaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW0ncyB0aXRsZTpcIiwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbSdzIHRleHRCb2R5XCIsIGl0ZW0udGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1UZXN0RmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAndGFzaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIml0ZW0gaXMgYSB0YXNrLCB2ZXJpZnlpbmcgcHJvcGVydGllcyB1bmlxdWUgdG8gdGFzayBpdGVtc1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5kYXRlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgaXRlbS5jaGVja2VkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbS5kYXRlIGlzIG5vdCBhIHN0cmluZyBvciBpdGVtLmNoZWNrZWQgaXMgbm90IGEgYm9vbGVhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd0eXBlb2YgaXRlbS5kYXRlOicsIHR5cGVvZiBpdGVtLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJ0eXBlb2YgaXRlbS5jaGVja2VkOlwiLCB0eXBlb2YgaXRlbS5jaGVja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVRlc3RGaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5wcmlvcml0eSAhPT0gJ2xvdycgJiYgaXRlbS5wcmlvcml0eSAhPT0gJ25vcm1hbCcgJiYgaXRlbS5wcmlvcml0eSAhPT0gJ2hpZ2gnICYmIGl0ZW0ucHJpb3JpdHkgIT09ICd1cmdlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW0ucHJpb3JpdHkgY29udGFpbnMgYW4gaW52YWxpZCB2YWx1ZTpcIiwgaXRlbS5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1UZXN0RmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZChcImNoZWNraW5nIGl0ZW06XCIsIGl0ZW1OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1UZXN0RmluYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNFeGlzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbXMgdmVyaWZpY2F0aW9uIGZhaWxlZCBmb3I6XCIsIHN1Ykxpc3ROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihgc3VibGlzdF9vcHRpb25zIGFycmF5J3MgaXRlbSB2ZXJpZmljYXRpb24gZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKFwiY2hlY2tpbmcgc3VibGlzdDpcIiwgc3ViTGlzdE5hbWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKFwidmVyaWZ5aW5nIHN1Ymxpc3RzIGFuZCBpdGVtc1wiKTtcbiAgICAgICAgICAgIGlmIChzdWJMaXN0c0FuZEl0ZW1zRXhpc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwic3ViTGlzdHMoYW5kL29yIHRoZWlyIGl0ZW1zJykgdmVyaWZpY2F0aW9uIGZhaWxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJ2ZXJpZnlpbmcgaXRlbXMgaW4gdGFza0l0ZW1zIGFuZCBub3RlSXRlbXNcIik7XG4gICAgICAgICAgICBbJ3Rhc2tJdGVtcycsICdub3RlSXRlbXMnXS5mb3JFYWNoKG1ldGFJdGVtTGlzdE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXAoJ3ZlcmlmeWluZyBpdGVtcyBvZjonLCBtZXRhSXRlbUxpc3ROYW1lKTtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IG1ldGFJdGVtTGlzdE5hbWUuc2xpY2UoMCwgNCk7XG4gICAgICAgICAgICAgICAgZGF0YS5nZXQobWV0YUl0ZW1MaXN0TmFtZSkuZm9yRWFjaChpdGVtSW5kZXggPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbU5hbWUgPSB0eXBlKydJdGVtXycraXRlbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInZlcmlmeWluZyB0aGF0XCIsIGl0ZW1OYW1lLCBcImV4aXN0cyBpbiBpdHMgbGlzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGl0ZW1JbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW1JbmRleCBpcyBub3QgYW4gaW50ZWdlcjpcIiwgaXRlbUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZXhpc3RzKGl0ZW1OYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihpdGVtTmFtZSwgXCJkb2Vzbid0IGV4aXN0IGF0IGFsbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1MaXN0SW5kZXggPSBkYXRhLmdldChpdGVtTmFtZSkubGlzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1MaXN0TmFtZSA9IHR5cGUrJ0xpc3RfJytpdGVtTGlzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGl0ZW1MaXN0SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaXRlbSdzIGxpc3RJbmRleCBpcyBub3QgYW4gaW50ZWdlcjpcIiwgaXRlbUxpc3RJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZXhpc3RzKGl0ZW1MaXN0TmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGl0ZW1MaXN0TmFtZSwgXCJkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbUxpc3QgPSBkYXRhLmdldCh0eXBlKydMaXN0XycraXRlbUxpc3RJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1MaXN0LmluY2x1ZGVzKGl0ZW1JbmRleCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIml0ZW0gZG9lc24ndCBleGlzdCBpbiBpdHMgbGlzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCd2ZXJpZnlpbmcgaXRlbXMgb2Y6JywgbWV0YUl0ZW1MaXN0TmFtZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZChcInZlcmlmeWluZyBpdGVtcyBpbiB0YXNrSXRlbXMgYW5kIG5vdGVJdGVtc1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcImFsbC9zb21lL29uZSBvZiB0aGUgZGVmYXVsdCBsaXN0cyB3ZXJlL3dhcyBub3QgZm91bmRcIik7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlIHx8IHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIEVuZ2luZS5zZXRMb2FkaW5nU3RhdHVzKERhdGEsICd2ZXJpZnlpbmdEYXRhJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoXCJ2ZXJpZnlEYXRhKClcIik7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmVyaWZ5RGF0YSgpIC0tPiByZXN1bHQ6IFBBU1NFRFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcInZlcmlmeURhdGEoKSAtLT4gcmVzdWx0OiBGQUlMRURcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWF0ZSAoKSB7XG4gICAgICAgIEVuZ2luZS5zZXRMb2FkaW5nU3RhdHVzKERhdGEsICdsb2FkaW5nRGF0YScsIHRydWUpO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAoZGF0YS5nZXQoJ1RPUF9Qcm9qZWN0X1RvRG9MaXN0X1N0b3JhZ2VFeGlzdHMnKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1dlIGhhdmUgcHJlLWV4aXN0aW5nIGRhdGEnKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZlcmlmeURhdGEoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBubyBwcmUtZXhpc3RpbmcgZGF0YScpO1xuICAgICAgICAgICAgbG9hZEFuZXcoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9ICduZXcnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgRW5naW5lLnNldExvYWRpbmdTdGF0dXMoRGF0YSwgJ2xvYWRpbmdEYXRhJywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNldDogKGtleSwgdmFsdWUpID0+IGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKSxcbiAgICAgICAgZ2V0OiBrZXkgPT4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKSxcbiAgICAgICAgcmVtb3ZlOiBrZXkgPT4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSxcbiAgICAgICAgZXhpc3RzOiBrZXkgPT4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSA9PT0gbnVsbCA/IGZhbHNlOnRydWUsIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ0xvY2FsU3RvcmFnZSAoKSB7XG4gICAgICAgIGNvbnNvbGUudGFibGUoXy5zb3J0QnkoT2JqZWN0LmVudHJpZXMobG9jYWxTdG9yYWdlKSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldExpc3RPcHRpb25zICh0eXBlLCBpbmRleCkge1xuICAgICAgICBsZXQgaWQgPSB0eXBlKydMaXN0XycraW5kZXgrJ19vcHRpb25zJztcbiAgICAgICAgaWYgKGRhdGEuZXhpc3RzKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZ2V0KGlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGF0YSBlbnRyeSBkb2Vzbid0IGV4aXN0OiAke2lkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlSXRlbSAodHlwZSwgaW5kZXgsIGVudHJpZXMpIHtcbiAgICAgICAgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVudHJpZXMpO1xuICAgICAgICBsZXQgaXRlbURhdGEgPSBkYXRhLmdldCh0eXBlKydJdGVtXycraW5kZXgpO1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgaXRlbURhdGFbZW50cnlbMF1dID0gZW50cnlbMV07XG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhLnNldCh0eXBlKydJdGVtXycraW5kZXgsIGl0ZW1EYXRhKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxpc3ROYW1lICh0eXBlLCBpbmRleCwgbmFtZSkge1xuICAgICAgICBsZXQgaWQgPSB0eXBlKydMaXN0XycraW5kZXg7XG4gICAgICAgIGRhdGEuc2V0KGlkKydfbmFtZScsIG5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeVByaW9yaXR5ICh0eXBlLCBpdGVtTGlzdD1nZXRMaXN0KC4uLmN1cnJlbnRMaXN0KSkge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IFsndXJnZW50JywgJ2hpZ2gnLCAnbm9ybWFsJywgJ2xvdyddO1xuICAgICAgICByZXR1cm4gaXRlbUxpc3Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgYSA9IG9wdGlvbnMuaW5kZXhPZihnZXRJdGVtKHR5cGUsIGEpLnByaW9yaXR5KTtcbiAgICAgICAgICAgIGIgPSBvcHRpb25zLmluZGV4T2YoZ2V0SXRlbSh0eXBlLCBiKS5wcmlvcml0eSk7XG4gICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeURhdGUgKHR5cGUsIGl0ZW1MaXN0PWdldExpc3QoLi4uY3VycmVudExpc3QpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBpdGVtTGlzdC5zbGljZSgwKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBhID0gZ2V0SXRlbSh0eXBlLCBhKS5kYXRlO1xuICAgICAgICAgICAgYiA9IGdldEl0ZW0odHlwZSwgYikuZGF0ZTtcbiAgICAgICAgICAgIGEgPSBhID09PSAnTm8gZHVlIGRhdGUnID8gbnVsbCA6IG5ldyBEYXRlKGEpO1xuICAgICAgICAgICAgYiA9IGIgPT09ICdObyBkdWUgZGF0ZScgPyBudWxsIDogbmV3IERhdGUoYik7XG4gICAgICAgICAgICBpZiAoW2EsIGJdLmluY2x1ZGVzKG51bGwpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWl4U29ydGVkICgpIHsgLy8gcGFyYW1zID0gbGlzdDEsIGxpc3QyLi4uIHdpdGggYWxsIGxpc3RzIGJhc2ljYWxseSBjb250YWluaW5nIHRoZSBzYW1lIGl0ZW1zLCBqdXN0IG9yZGVyZWQgZGlmZmVyZW50IChzb21ldGltZXMgb3JkZXJlZCB0aGUgc2FtZSlcbiAgICAgICAgbGV0IHByb2Nlc3NlZCA9IGFyZ3VtZW50c1swXS5yZWR1Y2UoKGZpbmFsLCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgZmluYWwucHVzaChbY3VycmVudCwgaW5kZXhdKTtcbiAgICAgICAgICAgIHJldHVybiBmaW5hbDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJndW1lbnRzW2ldLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHByb2Nlc3NlZEluZGV4ID0gYXJndW1lbnRzWzBdLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkW3Byb2Nlc3NlZEluZGV4XVsxXSArPSBpbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NlZC5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzc2VkW2luZGV4XVsxXSA9IGl0ZW1bMV0vYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHByb2Nlc3NlZCA9IHByb2Nlc3NlZC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYVsxXSAtIGJbMV07XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZC5yZWR1Y2UoKGZpbmFsLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICBmaW5hbC5wdXNoKGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZFNhbXBsZURhdGEgKCkge1xuICAgICAgICBsZXQgdGFza0xpc3RJbmRleCA9IHNwYXduTmV3TGlzdCgndGFzaycsICdTYW1wbGUgVGFzayBMaXN0Jyk7XG4gICAgICAgIGxldCBub3RlTGlzdEluZGV4ID0gc3Bhd25OZXdMaXN0KCdub3RlJywgJ1NhbXBsZSBOb3RlIExpc3QnKTtcbiAgICAgICAgdXBkYXRlTGlzdE9wdGlvbnMoJ3Rhc2snLCAwLCBbZmFsc2UsIGZhbHNlLCB0cnVlLCBmYWxzZV0pO1xuICAgICAgICBsZXQgaXRlbUluZGV4ID0gc3Bhd25OZXdJdGVtKCd0YXNrJywgdGFza0xpc3RJbmRleCk7XG4gICAgICAgIHVwZGF0ZUl0ZW0oJ3Rhc2snLCBpdGVtSW5kZXgsIHt0aXRsZTogJ0ZlZWQgdGhlIGRvZyd9KTtcbiAgICAgICAgaXRlbUluZGV4ID0gc3Bhd25OZXdJdGVtKCd0YXNrJywgdGFza0xpc3RJbmRleCk7XG4gICAgICAgIHVwZGF0ZUl0ZW0oJ3Rhc2snLCBpdGVtSW5kZXgsIHt0aXRsZTogJ0ZlZWQgdGhlIGNhdCd9KTtcbiAgICAgICAgaXRlbUluZGV4ID0gc3Bhd25OZXdJdGVtKCd0YXNrJywgdGFza0xpc3RJbmRleCk7XG4gICAgICAgIHVwZGF0ZUl0ZW0oJ3Rhc2snLCBpdGVtSW5kZXgsIHt0aXRsZTogXCJGZWVkIHRoZSBuZWlnaGJvdXIncyBraWRcIn0pO1xuICAgICAgICBpdGVtSW5kZXggPSBzcGF3bk5ld0l0ZW0oJ3Rhc2snLCB0YXNrTGlzdEluZGV4KTtcbiAgICAgICAgdXBkYXRlSXRlbSgndGFzaycsIGl0ZW1JbmRleCwge3RpdGxlOiAnRmVlZCB0aGUgbW9uc3RlciBpbiB0aGUgY2xvc2V0JywgY2hlY2tlZDp0cnVlfSk7XG5cbiAgICAgICAgaXRlbUluZGV4ID0gc3Bhd25OZXdJdGVtKCdub3RlJywgbm90ZUxpc3RJbmRleCk7XG4gICAgICAgIHVwZGF0ZUl0ZW0oJ25vdGUnLCBpdGVtSW5kZXgsIHt0aXRsZTogJ05vdGUgdG8gc2VsZicsIHRleHRCb2R5OiAnRGVhdGggaXMgZXZlcnl0aGluZyBmb3IgdGhlIGxpdmluZyBhbmQgbm90aGluZyBmb3IgdGhlIGRlYWQuJ30pO1xuICAgICAgICBpdGVtSW5kZXggPSBzcGF3bk5ld0l0ZW0oJ25vdGUnLCBub3RlTGlzdEluZGV4KTtcbiAgICAgICAgdXBkYXRlSXRlbSgnbm90ZScsIGl0ZW1JbmRleCwge3RpdGxlOiAnQW5vdGhlciBub3RlJywgdGV4dEJvZHk6IFwianVzdCBzb21lIGRlc2NyaXB0aW9uLCBkb24ndCBtaW5kIG1lLi4uXCJ9KTtcbiAgICAgICAgaXRlbUluZGV4ID0gc3Bhd25OZXdJdGVtKCdub3RlJywgbm90ZUxpc3RJbmRleCk7XG4gICAgICAgIHVwZGF0ZUl0ZW0oJ25vdGUnLCBpdGVtSW5kZXgsIHt0aXRsZTogJ3lldCBhbm90aGVyIG5vdGUnfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZU1vZHVsZSh7XG4gICAgICAgIG5hbWU6ICdEYXRhJyxcbiAgICAgICAgcHJvY2Vzc2VzOiBbJ3ZlcmlmeWluZ0RhdGEnLCAnbG9hZGluZ0RhdGEnXSxcbiAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgZ2V0TmV3SW5kZXgsXG4gICAgICAgICAgICBjcmVhdGVJdGVtLFxuICAgICAgICAgICAgZ2V0TGlzdCxcbiAgICAgICAgICAgIGdldExpc3ROYW1lLFxuICAgICAgICAgICAgZ2V0SXRlbSxcbiAgICAgICAgICAgIGluaXRpYXRlLFxuICAgICAgICAgICAgbG9hZEFuZXcsXG4gICAgICAgICAgICBzcGF3bk5ld0l0ZW0sXG4gICAgICAgICAgICBzcGF3bk5ld0xpc3QsXG4gICAgICAgICAgICByZW1vdmVJdGVtLFxuICAgICAgICAgICAgcmVtb3ZlTGlzdCxcbiAgICAgICAgICAgIGxvZ0xvY2FsU3RvcmFnZSxcbiAgICAgICAgICAgIHVwZGF0ZUxpc3RPcHRpb25zLFxuICAgICAgICAgICAgZ2V0TGlzdE9wdGlvbnMsXG4gICAgICAgICAgICB1cGRhdGVJdGVtLFxuICAgICAgICAgICAgZ2V0SXRlbVBvc2l0aW9uLFxuICAgICAgICAgICAgY2xlYXJJdGVtRWxlbXMsXG4gICAgICAgICAgICB1cGRhdGVJdGVtRWxlbSxcbiAgICAgICAgICAgIHNwYXduTmV3SXRlbUVsZW0sXG4gICAgICAgICAgICBnZXRJdGVtRWxlbSxcbiAgICAgICAgICAgIHVwZGF0ZUxpc3ROYW1lLFxuICAgICAgICAgICAgc29ydEJ5RGF0ZSxcbiAgICAgICAgICAgIHNvcnRCeVByaW9yaXR5LFxuICAgICAgICAgICAgbWl4U29ydGVkLFxuICAgICAgICAgICAgbG9hZFNhbXBsZURhdGEsXG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG5cbmNvbnN0IEVuZ2luZSA9KCgpPT57XG4gICAgXG4gICAgZnVuY3Rpb24gaW5pdGlhbGlzZSAoKSB7XG4gICAgICAgIFVJLmluaXRpYXRlKCk7XG4gICAgICAgIGxldCBkYXRhUmVzdWx0ID0gRGF0YS5pbml0aWF0ZSgpO1xuICAgICAgICBpZiAoZGF0YVJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIFVJLmFsZXJ0KFwiQWxlcnRcIiwgXCJGb3VuZCBvbGQgZGF0YSwgYnV0IGl0IHNlZW1zIGNvcnJ1cHRlZC4gWW91ciBkYXRhIGlzIGdvaW5nIHRvIGJlIHJlc2V0LlwiLCBbXCJPa1wiLCAoKT0+e0VuZ2luZS5yZXNldERhdGEoKX1dKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkYXRhUmVzdWx0ID09PSAnbmV3Jykge1xuICAgICAgICAgICAgICAgIFVJLmFsZXJ0KFwiSGVsbG9cIiwgXCJUaGlzIGlzIGEgZnJlc2ggc3RhcnQuIFdvdWxkIHlvdSBsaWtlIHRvIGxvYWQgc2FtcGxlIGxpc3RzP1wiLCBbJ1N1cmUnLCAoKSA9PiB7RGF0YS5sb2FkU2FtcGxlRGF0YSgpO1VJLmxvYWREYXRhKCl9XSwgWydObyB0aGFua3MnLCAoKSA9PiB7VUkubG9hZERhdGEoKX1dKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBVSS5sb2FkRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiByZXNldERhdGEgKCkge1xuICAgICAgICBzZXRMb2FkaW5nU3RhdHVzKEVuZ2luZSwgJ3Jlc2V0aW5nRGF0YScsIHRydWUpO1xuICAgICAgICBhd2FpdCBEYXRhLmxvYWRBbmV3KCk7XG4gICAgICAgIGF3YWl0IFVJLmxvYWREYXRhKCk7XG4gICAgICAgIHNldExvYWRpbmdTdGF0dXMoRW5naW5lLCAncmVzZXRpbmdEYXRhJywgZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRpbmcgPSB7XG4gICAgICAgIHN0YXJ0OiAoKSA9PiB7VUkuc2hvd0xvYWRpbmdTY3JlZW4oKX0sXG4gICAgICAgIGZpbmlzaDogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMobG9hZGluZ1N0YXR1cykuZm9yRWFjaChwcm9jZXNzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2VzcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgVUkuaGlkZUxvYWRpbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldExvYWRpbmdTdGF0dXMgKG1vZHVsZSwgcHJvY2Vzcywgc3RhdHVzKSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG1vZHVsZS5sb2FkaW5nUHJvY2Vzc1N0YXR1c1twcm9jZXNzXSA9IHRydWU7XG4gICAgICAgICAgICBsb2FkaW5nU3RhdHVzW21vZHVsZS5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoVUkubG9hZGluZ1NjcmVlblZpc2libGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZy5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1vZHVsZS5sb2FkaW5nUHJvY2Vzc1N0YXR1c1twcm9jZXNzXSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMobW9kdWxlLmxvYWRpbmdQcm9jZXNzU3RhdHVzKS5mb3JFYWNoKHByb2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVhZHkpIHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nU3RhdHVzW21vZHVsZS5uYW1lXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxvYWRpbmcuZmluaXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdMaXN0ICh0eXBlLCBuYW1lKSB7XG4gICAgICAgIGxldCBuZXdMaXN0SW5kZXggPSBEYXRhLnNwYXduTmV3TGlzdCh0eXBlLCBuYW1lKTtcbiAgICAgICAgVUkuY3JlYXRlTWVudUxpc3RFbGVtZW50KHR5cGUsIG5ld0xpc3RJbmRleCk7XG4gICAgICAgIFVJLmxvYWRMaXN0KHR5cGUsIG5ld0xpc3RJbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsZXRlTGlzdCAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgVUkucmVtb3ZlTGlzdCh0eXBlLCBpbmRleCk7XG4gICAgICAgIERhdGEucmVtb3ZlTGlzdCh0eXBlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3SXRlbSAoKSB7XG4gICAgICAgIGxldCB0eXBlID0gY3VycmVudExpc3RbMF07XG4gICAgICAgIGxldCBpdGVtSW5kZXggPSBEYXRhLnNwYXduTmV3SXRlbSh0eXBlLCBjdXJyZW50TGlzdFsxXSk7XG4gICAgICAgIFVJLmNyZWF0ZUxpc3RJdGVtRWxlbWVudCh0eXBlLCBpdGVtSW5kZXgpLmZvY3VzKCk7XG4gICAgICAgIFVJLmxvYWRJdGVtKHR5cGUsIGl0ZW1JbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlSXRlbVByb3BlcnR5ICh0eXBlLCBpbmRleCwgc291cmNlLCBlbnRyaWVzKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGVudHJpZXMpLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09ICdkYXRlJyAmJiB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICdObyBkdWUgZGF0ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBEYXRhLnVwZGF0ZUl0ZW0odHlwZSwgaW5kZXgsIHtbZW50cnlbMF1dOiB2YWx1ZX0pO1xuICAgICAgICB9KTtcbiAgICAgICAgVUkudXBkYXRlSXRlbSh0eXBlLCBpbmRleCwgc291cmNlLCBlbnRyaWVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMaXN0TmFtZSAodHlwZSwgaW5kZXgsIG5hbWUpIHtcbiAgICAgICAgVUkudXBkYXRlTGlzdE5hbWUodHlwZSwgaW5kZXgsIG5hbWUpO1xuICAgICAgICBEYXRhLnVwZGF0ZUxpc3ROYW1lKHR5cGUsIGluZGV4LCBuYW1lKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBkZWxldGVJdGVtICh0eXBlLCBpbmRleCkge1xuICAgICAgICBsZXQgaW5QcmVzZW50TGlzdCA9IGZhbHNlO1xuICAgICAgICBsZXQgcHJlc2VudExpc3QgPSBEYXRhLmdldExpc3QoLi4uY3VycmVudExpc3QpO1xuICAgICAgICBpZiAoXy5pc0VxdWFsKGN1cnJlbnRJdGVtLCBbdHlwZSwgaW5kZXhdKSkge1xuICAgICAgICAgICAgaW5QcmVzZW50TGlzdCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocHJlc2VudExpc3QuaW5jbHVkZXMoaW5kZXgpKSB7XG4gICAgICAgICAgICBpblByZXNlbnRMaXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5QcmVzZW50TGlzdCkge1xuICAgICAgICAgICAgYXdhaXQgVUkucmVtb3ZlSXRlbSh0eXBlLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgRGF0YS5yZW1vdmVJdGVtKHR5cGUsIGluZGV4KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNyZWF0ZU1vZHVsZSh7XG4gICAgICAgIG5hbWU6ICdFbmdpbmUnLFxuICAgICAgICBwcm9jZXNzZXM6IFsncmVzZXRpbmdEYXRhJ10sXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgIGluaXRpYWxpc2UsXG4gICAgICAgICAgICBsb2FkaW5nLFxuICAgICAgICAgICAgc2V0TG9hZGluZ1N0YXR1cyxcbiAgICAgICAgICAgIG5ld0xpc3QsXG4gICAgICAgICAgICByZXNldERhdGEsXG4gICAgICAgICAgICBkZWxldGVMaXN0LFxuICAgICAgICAgICAgbmV3SXRlbSxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW1Qcm9wZXJ0eSxcbiAgICAgICAgICAgIGRlbGV0ZUl0ZW0sXG4gICAgICAgICAgICB1cGRhdGVMaXN0TmFtZSxcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuLy8gZXZlbnRzXG4oKCkgPT4ge1xuICAgIGxldCB0cmFja1dpbmRvd1Jlc2l6ZUV2ZW50cyA9IFtdO1xuICAgIGxldCBwcmV2X3dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgd2luZG93Lm9ucmVzaXplID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRyYWNrV2luZG93UmVzaXplRXZlbnRzLnB1c2goMCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2tXaW5kb3dSZXNpemVFdmVudHMucG9wKCk7XG4gICAgICAgICAgICBpZiAodHJhY2tXaW5kb3dSZXNpemVFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoVmVyZGljdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5U3RhdGUgIT09ICd0cmlwbGUnICYmIHdpbmRvdy5pbm5lcldpZHRoLXByZXZfd2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoVmVyZGljdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXNwbGF5U3RhdGUgIT09ICdzaW5nbGUnICYmIHByZXZfd2lkdGgtd2luZG93LmlubmVyV2lkdGggPiAwICYmIFVJLnZpZXdPdmVyZmxvdygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoVmVyZGljdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh3aWR0aFZlcmRpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgVUkudXBkYXRlRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2X3dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDIwMCk7XG4gICAgfTtcbn0pKCk7IC8vIHdpbmRvdy5vbnJlc2l6ZVxub3Blbk1lbnVCdG5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgaWYgKGRpc3BsYXlTdGF0ZSAhPSAndHJpcGxlJykge1xuICAgICAgICBbbWVudUNvbnRhaW5lckVsZW1lbnQsIG1lbnVFbGVtZW50XS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG4gICAgICAgIH0pXG4gICAgfVxufSlcbmNsb3NlTWVudUJ0bkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICBVSS5oaWRlTWVudSgpO1xufSlcbm1lbnVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59KVxubWVudUNvbnRhaW5lckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICBVSS5oaWRlTWVudSgpO1xufSlcbnJldHVybkJ0bkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgY3VycmVudFZpZXcgPSBsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQ7XG4gICAgVUkudXBkYXRlU2luZ2xlVmlldygpO1xufSlcbm5ld0J0bk1lbnVFbGVtZW50cy5mb3JFYWNoKChuZXdCdG4sIGluZGV4KSA9PiB7XG4gICAgbmV3QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBuZXdCdG5NZW51SW5wdXRFbGVtZW50c1tpbmRleF0uc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICAgICAgZXZlbnQudGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIG5ld0J0bk1lbnVJbnB1dEVsZW1lbnRzW2luZGV4XS5mb2N1cygpO1xuICAgIH0pXG59KVxubmV3QnRuTWVudUlucHV0RWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBuZXdCdG5NZW51RWxlbWVudHNbaW5kZXhdLnN0eWxlLmRpc3BsYXkgPSAnaW5pdGlhbCc7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgbGV0IHR5cGUgPSBpbmRleCA9PT0gMCA/ICd0YXNrJzonbm90ZSc7XG4gICAgICAgICAgICBFbmdpbmUubmV3TGlzdCh0eXBlLCBldmVudC50YXJnZXQudmFsdWUudHJpbSgpKTtcbiAgICAgICAgICAgIGNsb3NlTWVudUJ0bkVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSAnJztcbiAgICB9KVxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9KVxufSlcbmFsbFRhc2tzTWVudUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgbWVudUxpc3RDbGlja0V2ZW50KGV2ZW50LCAndGFzaycsIDApO1xufSlcbmFsbE5vdGVzTWVudUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgbWVudUxpc3RDbGlja0V2ZW50KGV2ZW50LCAnbm90ZScsIDApO1xufSlcbmZ1bmN0aW9uIG1lbnVMaXN0Q2xpY2tFdmVudCAoZXZlbnQsIHR5cGUsIGluZGV4KSB7XG4gICAgVUkubG9hZExpc3QodHlwZSwgaW5kZXgpO1xuICAgIGNsb3NlTWVudUJ0bkVsZW1lbnQuY2xpY2soKTtcbiAgICBpZiAoVUkudmlld092ZXJmbG93KCkpIHtcbiAgICAgICAgVUkudXBkYXRlRGlzcGxheSgpO1xuICAgIH1cbn1cbnNob3dQcmlvcml0eUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09PSBmYWxzZSkge1xuICAgICAgICBsaXN0Vmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZVByaW9yaXR5Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdFZpZXdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGVQcmlvcml0eScpO1xuICAgIH1cbn0pXG5zaG93RGF0ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkID09PSBmYWxzZSkge1xuICAgICAgICBsaXN0Vmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZURhdGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0Vmlld0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZURhdGUnKTtcbiAgICB9XG59KVxuc29ydFByaW9yaXR5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICBEYXRhLnVwZGF0ZUxpc3RPcHRpb25zKCk7XG4gICAgVUkubG9hZExpc3QoLi4uY3VycmVudExpc3QpO1xufSk7XG5zb3J0RGF0ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XG4gICAgRGF0YS51cGRhdGVMaXN0T3B0aW9ucygpO1xuICAgIFVJLmxvYWRMaXN0KC4uLmN1cnJlbnRMaXN0KTtcbn0pO1xubGlzdFZpZXdPcHRpb25FbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XG4gICAgICAgIERhdGEudXBkYXRlTGlzdE9wdGlvbnMoKTtcbiAgICB9KTtcbn0pXG5uZXdCdG5MaXN0Vmlld0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgRW5naW5lLm5ld0l0ZW0oKTtcbn0pO1xuY29tcGxldGVkVGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgIGlmIChjb21wbGV0ZWRJdGVtc1VMRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbGxhcHNlJykpIHtcbiAgICAgICAgY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2UnKTtcbiAgICAgICAgY29tcGxldGVkVGl0bGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGVkSXRlbXNVTEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2UnKTtcbiAgICAgICAgY29tcGxldGVkVGl0bGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNlJyk7XG4gICAgfVxufSlcbmNvbnRlbnRWaWV3VGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuICAgIEVuZ2luZS51cGRhdGVJdGVtUHJvcGVydHkoY3VycmVudEl0ZW1bMF0sIGN1cnJlbnRJdGVtWzFdLCAnY29udGVudFZpZXcnLCB7dGl0bGU6IGNvbnRlbnRWaWV3VGl0bGVFbGVtZW50LnZhbHVlfSk7XG59KTtcbmNvbnRlbnRWaWV3RGVzY0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBldmVudCA9PiB7XG4gICAgRW5naW5lLnVwZGF0ZUl0ZW1Qcm9wZXJ0eShjdXJyZW50SXRlbVswXSwgY3VycmVudEl0ZW1bMV0sICdjb250ZW50VmlldycsIHt0ZXh0Qm9keTogY29udGVudFZpZXdEZXNjRWxlbWVudC52YWx1ZX0pO1xuICAgIGxldCBlbGVtID0gY29udGVudFZpZXdEZXNjRWxlbWVudDtcbiAgICBpZiAoZWxlbS5zY3JvbGxIZWlnaHQgPiBlbGVtLmNsaWVudEhlaWdodCkge1xuICAgICAgICBlbGVtLnN0eWxlLmhlaWdodCA9IGVsZW0uc2Nyb2xsSGVpZ2h0KzQrJ3B4JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJldl9oZWlnaHQgPSBlbGVtLmNsaWVudEhlaWdodC0xO1xuICAgICAgICB3aGlsZSAocHJldl9oZWlnaHQgIT09IGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBwcmV2X2hlaWdodCA9IGVsZW0uY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgZWxlbS5zdHlsZS5oZWlnaHQgPSBlbGVtLnNjcm9sbEhlaWdodCszKydweCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbS5zdHlsZS5oZWlnaHQgPSBlbGVtLnNjcm9sbEhlaWdodCs0KydweCc7XG4gICAgfVxufSk7XG5jb250ZW50Vmlld1ByaW9yaXR5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICBFbmdpbmUudXBkYXRlSXRlbVByb3BlcnR5KGN1cnJlbnRJdGVtWzBdLCBjdXJyZW50SXRlbVsxXSwgJ2NvbnRlbnRWaWV3Jywge3ByaW9yaXR5OiBjb250ZW50Vmlld1ByaW9yaXR5RWxlbWVudC52YWx1ZX0pO1xufSk7XG5jb250ZW50Vmlld0RhdGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuICAgIEVuZ2luZS51cGRhdGVJdGVtUHJvcGVydHkoY3VycmVudEl0ZW1bMF0sIGN1cnJlbnRJdGVtWzFdLCAnY29udGVudFZpZXcnLCB7ZGF0ZTogY29udGVudFZpZXdEYXRlRWxlbWVudC52YWx1ZX0pO1xufSk7XG5jb250ZW50Vmlld0RlbGV0ZUJ0bkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgVUkuYWxlcnQoXCJcIiwgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXM/XCIsIFtcIlllc1wiLCAoKSA9PiB7XG4gICAgICAgIEVuZ2luZS5kZWxldGVJdGVtKC4uLmN1cnJlbnRJdGVtKTtcbiAgICAgICAgaWYgKGRpc3BsYXlTdGF0ZSA9PT0gJ3NpbmdsZScgJiYgY3VycmVudFZpZXcgPT09IGNvbnRlbnRWaWV3Q29udGFpbmVyRWxlbWVudCkge1xuICAgICAgICAgICAgY3VycmVudFZpZXcgPSBsaXN0Vmlld0NvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgICAgICBVSS51cGRhdGVTaW5nbGVWaWV3KCk7XG4gICAgICAgIH1cbiAgICB9XSwgWydObycsICgpPT57fV0pO1xufSk7XG5yZW1vdmVDb21wbGV0ZWRCdG5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgIFVJLmFsZXJ0KFwiXCIsIFwiQWxsIGNvbXBsZXRlZCB0YXNrcyBpbiB0aGlzIGxpc3Qgd2lsbCBiZSBkZWxldGVkLiBBcmUgeW91IHN1cmU/XCIsIFtcIlllc1wiLCAoKSA9PiB7XG4gICAgICAgIFsuLi5jb21wbGV0ZWRJdGVtc1VMRWxlbWVudC5jaGlsZHJlbl0uZm9yRWFjaChpdGVtRWxlbSA9PiB7XG4gICAgICAgICAgICBFbmdpbmUuZGVsZXRlSXRlbShjdXJyZW50TGlzdFswXSwgVUkuZ2V0RGF0YUF0dHJpYnV0ZShpdGVtRWxlbSwgJ2luZGV4JykpO1xuICAgICAgICB9KTtcbiAgICB9XSwgW1wiTm9cIiwgKCkgPT4ge31dKVxufSk7XG5saXN0TmFtZUluTGlzdFZpZXdFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZXZlbnQgPT4ge1xuICAgIEVuZ2luZS51cGRhdGVMaXN0TmFtZSguLi5jdXJyZW50TGlzdCwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbn0pO1xubGlzdE5hbWVJbkxpc3RWaWV3RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgbGlzdE5hbWVJbkxpc3RWaWV3RWxlbWVudC5ibHVyKCk7XG4gICAgfVxufSk7XG5cblxuLy8gdG9vbCBmdW5jdGlvbnNcbmZ1bmN0aW9uIGlzT2ZUeXBlKHN1YmplY3QsIHR5cGU9dW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0eXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgc3ViamVjdFR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ViamVjdCk7XG4gICAgc3ViamVjdFR5cGUgPSBzdWJqZWN0VHlwZS5zbGljZSg4LCBzdWJqZWN0VHlwZS5sZW5ndGgtMSkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdWJqZWN0VHlwZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3ViamVjdFR5cGUgPT09IHR5cGU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlTXVsdGlwbGVJdGVtc0FzRXF1YWwgKCkge1xuICAgIGxldCB2ZXJkaWN0ID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICAgIGxldCBpdGVtMSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgbGV0IGl0ZW0yID0gYXJndW1lbnRzW2krMV07XG4gICAgICAgIGlmIChfLmlzRXF1YWwoaXRlbTEsIGl0ZW0yKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZlcmRpY3QgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2ZXJkaWN0O1xufVxuXG4vLyBvbiBzdGFydFxuRW5naW5lLmluaXRpYWxpc2UoKTtcbi8vIGZvciB0ZXN0aW5nXG4vLyBjb25zb2xlLmxvZygnLS0tLS0tLS1UZXN0aW5nLS0tLS0tLS0nKTtcbi8vIERhdGEubG9nTG9jYWxTdG9yYWdlKCk7XG4vLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLUVuZCBvZiBUZXN0aW5nLS0tLS0tLS0tJylcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIlBMQUNFSE9MREVSIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJSZWdFeHAiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW1TdGFydCIsInJlV2hpdGVzcGFjZSIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzTG93ZXJSYW5nZSIsInJzVXBwZXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNNb2RpZmllciIsInJzT3B0VmFyIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImciLCJPYmplY3QiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInJlcXVpcmUiLCJ0eXBlcyIsImJpbmRpbmciLCJlIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcHBseSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImNhbGwiLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsInNldHRlciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbmRleCIsInZhbHVlIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiQXJyYXkiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImtleSIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwib2JqZWN0IiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsIm4iLCJiYXNlVHJpbSIsInN0cmluZyIsInRyaW1tZWRFbmRJbmRleCIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJjb3VudEhvbGRlcnMiLCJwbGFjZWhvbGRlciIsImRlYnVyckxldHRlciIsImVzY2FwZUh0bWxDaGFyIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJtYXBUb0FycmF5Iiwic2l6ZSIsImZvckVhY2giLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb0FycmF5Iiwic2V0Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJtYXRjaCIsInVuaWNvZGVUb0FycmF5Iiwic3BsaXQiLCJhc2NpaVRvQXJyYXkiLCJjaGFyQXQiLCJ1bmVzY2FwZUh0bWxDaGFyIiwiXyIsInJ1bkluQ29udGV4dCIsImNvbnRleHQiLCJ1aWQiLCJkZWZhdWx0cyIsInBpY2siLCJEYXRlIiwiRXJyb3IiLCJNYXRoIiwiVHlwZUVycm9yIiwiYXJyYXlQcm90byIsInByb3RvdHlwZSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsImhhc093blByb3BlcnR5IiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJrZXlzIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0Q3JlYXRlIiwiY3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpY2UiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZWZpbmVQcm9wZXJ0eSIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJtaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXkiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiYWRkIiwiU3RhY2siLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0IiwicGF0aHMiLCJza2lwIiwiZ2V0IiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJzeW1ib2wiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwicG9wIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm5hbWUiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsInByb3BlcnR5IiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjcml0ZXJpYSIsImNvbXBhcmVyIiwic29ydCIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVNvcnRCeSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJpbmRleE9mIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImVuZCIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwiYXJndW1lbnRzIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJmbiIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJMZW5ndGgiLCJhcnJTdGFja2VkIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwidHlwZSIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlS2V5c0luIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZSIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJyb3VuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmaWx0ZXIiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVqZWN0IiwicmVtb3ZlIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJ0YXJnZXQiLCJwb3NpdGlvbiIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJnbG9iYWwiLCJuZXdFbmQiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwibm1kIiwiY2hpbGRyZW4iLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwiaHJlZiIsIm5jIiwicm9vdEVsZW1lbnQiLCJib2R5RWxlbWVudCIsImNsb3NlTWVudUJ0bkVsZW1lbnQiLCJvcGVuTWVudUJ0bkVsZW1lbnQiLCJyZXR1cm5CdG5FbGVtZW50IiwibG9hZGluZ0NvbnRhaW5lckVsZW1lbnQiLCJ0b29sVGlwc0VsZW1lbnQiLCJhbGVydFZpZXdFbGVtZW50IiwiYWxlcnRNc2dFbGVtZW50IiwiYWxlcnRCdG5zQ29udGFpbmVyRWxlbWVudCIsImFsZXJ0VGl0bGVFbGVtZW50IiwibWVudUNvbnRhaW5lckVsZW1lbnQiLCJtZW51RWxlbWVudCIsImxpc3RWaWV3Q29udGFpbmVyRWxlbWVudCIsImxpc3RWaWV3RWxlbWVudCIsImNvbnRlbnRWaWV3Q29udGFpbmVyRWxlbWVudCIsImNvbnRlbnRWaWV3RWxlbWVudCIsInJpZ2h0Q2xpY2tEcm9wZG93bkVsZW1lbnQiLCJhbGxUYXNrc01lbnVFbGVtZW50IiwiYWxsTm90ZXNNZW51RWxlbWVudCIsInRhc2tMaXN0TWVudUVsZW1lbnQiLCJub3RlTGlzdE1lbnVFbGVtZW50IiwibmV3QnRuTWVudUlucHV0RWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibmV3QnRuTWVudUVsZW1lbnRzIiwibGlzdE5hbWVJbkxpc3RWaWV3RWxlbWVudCIsIm5ld0J0bkxpc3RWaWV3RWxlbWVudCIsImxpc3RWaWV3T3B0aW9uc0VsZW1lbnQiLCJzb3J0UHJpb3JpdHlFbGVtZW50Iiwic2hvd1ByaW9yaXR5RWxlbWVudCIsInNvcnREYXRlRWxlbWVudCIsInNob3dEYXRlRWxlbWVudCIsImxpc3RWaWV3T3B0aW9uRWxlbWVudHMiLCJsaXN0SXRlbXNVTEVsZW1lbnQiLCJjb21wbGV0ZWRJdGVtc1VMRWxlbWVudCIsImNvbXBsZXRlZFRpdGxlV3JhcHBlckVsZW1lbnQiLCJjb21wbGV0ZWRUaXRsZUVsZW1lbnQiLCJyZW1vdmVDb21wbGV0ZWRCdG5FbGVtZW50IiwiY29udGVudFZpZXdUaXRsZUVsZW1lbnQiLCJjb250ZW50Vmlld0Rlc2NFbGVtZW50IiwiY29udGVudFZpZXdQcmlvcml0eUVsZW1lbnQiLCJjb250ZW50Vmlld0RhdGVFbGVtZW50IiwiY29udGVudFZpZXdEZWxldGVCdG5FbGVtZW50IiwiY29udGVudFZpZXdDbGVhckVsZW1lbnQiLCJkaXNwbGF5U3RhdGUiLCJjdXJyZW50SXRlbSIsImN1cnJlbnRWaWV3IiwiY3VycmVudExpc3QiLCJsb2FkaW5nU3RhdHVzIiwiVUkiLCJEYXRhIiwiRW5naW5lIiwiZWxlbWVudHNXaG9zZUNsYXNzZXNSZWZsZWN0RGlzcGxheVN0YXRlIiwicG9zc2libGVEaXNwbGF5U3RhdGVzIiwiY3JlYXRlTW9kdWxlIiwiaW5wdXRPYmplY3QiLCJsb2FkaW5nUHJvY2Vzc1N0YXR1cyIsInByb2Nlc3NlcyIsImNvbXBvbmVudHMiLCJsb2FkaW5nU2NyZWVuVmlzaWJsZSIsInVwZGF0ZURpc3BsYXlTdGF0ZSIsInNldExvYWRpbmdTdGF0dXMiLCJjbGllbnRXaWR0aCIsInVwZGF0ZURpc3BsYXlNb2RlIiwiY2xhc3NOYW1lIiwiZWxlbWVudHMiLCJlbGVtIiwiY2xhc3NMaXN0IiwiYWRkQ2xhc3NlcyIsInJlbW92ZUNsYXNzZXMiLCJ1cGRhdGVTaW5nbGVWaWV3Iiwib3ZlcmZsb3ciLCJnZXRMaXN0Vmlld0l0ZW1zIiwiY2hlY2tGb3JTY3JvbGxCYXJzIiwidmlld092ZXJmbG93IiwiY2hlY2siLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImdldENoaWxkRWxlbWVudHMiLCJjaGlsZE5vZGVzIiwiZmluYWwiLCJub2RlTmFtZSIsInN3aXRjaFRvQ29udGVudFZpZXciLCJmb2N1cyIsInNldERhdGFBdHRyaWJ1dGUiLCJnZXREYXRhQXR0cmlidXRlIiwiTnVtYmVyIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlTWVudUxpc3RFbGVtZW50IiwiZ2V0TGlzdE5hbWUiLCJ0ZXh0Q29udGVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIm1lbnVMaXN0Q2xpY2tFdmVudCIsImNvbnRlbnRPYmplY3QiLCJwcmV2ZW50RGVmYXVsdCIsIm9wdGlvbiIsImNvbGxhcHNlRXZlbnQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJjbGlja0NhdGNoZXJFbGVtZW50Iiwib3V0c2lkZUNMaWNrRXZlbnQiLCJjb25zb2xlIiwibG9nIiwiY29udGFpbnMiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidHJpZ2dlclJpZ2h0Q2xpY2tNZW51IiwiZGVsZXRlTGlzdCIsImdldEl0ZW1Qb3NpdGlvbiIsImdldExpc3RTb3J0ZWQiLCJnZXRMaXN0IiwiY3JlYXRlTGlzdEl0ZW1FbGVtZW50IiwiaXRlbURhdGEiLCJnZXRJdGVtIiwic3Bhd25OZXdJdGVtRWxlbSIsInRvZ2dsZUVsZW0iLCJ0b2dnbGVBdHRyaWJ1dGUiLCJjaGVja2VkIiwic3RvcFByb3BhZ2F0aW9uIiwidXBkYXRlSXRlbSIsInBhcmVudEVsZW1lbnQiLCJpdGVtRWxlbWVudHMiLCJpdGVtUG9zIiwiY3VycmVudFBvc2l0aW9uIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwidGV4dEVsZW0iLCJ0aXRsZSIsInVwZGF0ZUl0ZW1Qcm9wZXJ0eSIsImtleUNvZGUiLCJjdHJsS2V5IiwibmV3SXRlbSIsImJsdXIiLCJsb2FkSXRlbSIsInRleHRFbGVtQ29udGFpbmVyIiwiY2xpY2siLCJ1cGRhdGVJdGVtRWxlbSIsInRpdGxlRWxlbSIsInByaW9yaXR5RWxlbSIsInByaW9yaXR5T3B0aW9ucyIsInByaW9yaXR5IiwiZGF0ZUVsZW0iLCJkYXRlIiwiZGF0ZUNvbnRhaW5lckVsZW0iLCJub0RhdGVTcGFuRWxlbWVudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRhdGVIaWdobGlnaHRlckVsZW0iLCJsb2FkTGlzdCIsImRpc3BsYXkiLCJnZXRMaXN0T3B0aW9ucyIsImV2dCIsImNsZWFySXRlbUVsZW1zIiwiaXRlbUluZGV4IiwiY2xlYXJDb250ZW50VmlldyIsInNvcnRUeXBlIiwic29ydEJ5UHJpb3JpdHkiLCJzb3J0QnlEYXRlIiwibWl4U29ydGVkIiwidGV4dEJvZHkiLCJyZW1vdmVJdGVtIiwidXBkYXRlRGlzcGxheSIsImluaXRpYXRlIiwiYXN5bmMiLCJ0b29sdGlwcyIsImNoaWxkRWxlbWVudCIsImFsaWdubWVudCIsImRlZmF1bHRBbGlnbm1lbnQiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJzd2l0Y2hBbGlnblgiLCJzd2l0Y2hBbGlnblkiLCJjb3JyZWN0Rm9ybWF0Iiwidmlld01vZGVzIiwidmlld21vZGVzIiwiZ2V0Q29vcmRzIiwieCIsInkiLCJYIiwiaW5zdHJ1Y3Rpb24iLCJhbGlnblgiLCJhbGlnblkiLCJ2aWV3TW9kZSIsInNwYXRpYWxEYXRhIiwid2lkdGgiLCJyaWdodCIsImJvdHRvbSIsInRhcmdldEVsZW1lbnRzIiwic2hvd0V2ZW50IiwidGFyZ2V0RWxlbSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImhlaWdodCIsImdldE9mZnNldCIsImNvb3JkWCIsImNvb3JkWSIsImhpZGVFdmVudCIsInRvb2x0aXBTdGF0dXMiLCJsb2FkVG9vbFRpcHMiLCJoaWRlTWVudSIsInNob3dMb2FkaW5nU2NyZWVuIiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJoaWRlTG9hZGluZ1NjcmVlbiIsImxvYWREYXRhIiwibGlzdE9mTGlzdHMiLCJsaXN0SW5kZXgiLCJhbGVydCIsImJ0bkVsZW1lbnQiLCJnZXRMaXN0Vmlld09wdGlvbnNEYXRhIiwiZXhjZXB0aW9uIiwicHJlc2VudEl0ZW0iLCJnZXRFbGVtZW50IiwiZ2V0SXRlbUVsZW0iLCJyZW1vdmVMaXN0IiwidXBkYXRlTGlzdE5hbWUiLCJkZWZhdWx0TGlzdE5hbWVzIiwibGlzdEl0ZW1FbGVtcyIsInRhc2siLCJub3RlIiwic3Bhd25OZXdMaXN0IiwidHlwZUxpc3RzIiwiZ2V0TmV3SW5kZXgiLCJsaXN0TmFtZSIsInNwYXduTmV3SXRlbSIsImNyZWF0ZUl0ZW0iLCJ0eXBlTGlzdCIsIml0ZW1OYW1lIiwiZXhpc3RzIiwiZXJyb3IiLCJhcnJheU9mSW5kZXhlcyIsImxvYWRBbmV3IiwibG9jYWxTdG9yYWdlIiwidXBkYXRlTGlzdE9wdGlvbnMiLCJvcHRpb25zQXJyYXkiLCJzZXRJdGVtIiwicGFyc2UiLCJncm91cENvbGxhcHNlZCIsIndhcm4iLCJzdWJMaXN0c0FuZEl0ZW1zRXhpc3QiLCJjdXJyZW50TGlzdE5hbWUiLCJzdWJMaXN0SW5kZXgiLCJzdWJMaXN0TmFtZSIsInZlcmRpY3QiLCJ2YWx1ZUluZGV4IiwiaXRlbVRlc3RGaW5hbCIsImN1cnJlbnRJdGVtSW5kZXgiLCJzdWJqZWN0Iiwic3ViamVjdFR5cGUiLCJpc09mVHlwZSIsImdyb3VwRW5kIiwibWV0YUl0ZW1MaXN0TmFtZSIsIml0ZW1MaXN0SW5kZXgiLCJpdGVtTGlzdE5hbWUiLCJ2ZXJpZnlEYXRhIiwibG9nTG9jYWxTdG9yYWdlIiwidGFibGUiLCJlbGVtTmFtZSIsIml0ZW1MaXN0IiwiZ2V0VGltZSIsInByb2Nlc3NlZCIsInByb2Nlc3NlZEluZGV4IiwibG9hZFNhbXBsZURhdGEiLCJ0YXNrTGlzdEluZGV4Iiwibm90ZUxpc3RJbmRleCIsImxvYWRpbmciLCJmaW5pc2giLCJyZWFkeSIsInN0YXR1cyIsImluaXRpYWxpc2UiLCJkYXRhUmVzdWx0IiwicmVzZXREYXRhIiwibmV3TGlzdEluZGV4IiwiZGVsZXRlSXRlbSIsImluUHJlc2VudExpc3QiLCJwcmVzZW50TGlzdCIsInRyYWNrV2luZG93UmVzaXplRXZlbnRzIiwicHJldl93aWR0aCIsImlubmVyV2lkdGgiLCJvbnJlc2l6ZSIsIndpZHRoVmVyZGljdCIsIm5ld0J0biIsInByZXZfaGVpZ2h0IiwiaXRlbUVsZW0iXSwic291cmNlUm9vdCI6IiJ9