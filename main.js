/*! For license information please see main.js.LICENSE.txt */
(()=>{var n={250:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".alertView {\n    position: fixed;\n    z-index: 4;\n    top: 0%;\n    left: 0%;\n    height: 100%;\n    width: 100%;\n\n    display: none; /* will be 'grid' via javascript */\n    place-content: center;\n\n    background-color: rgba(0, 0, 0, 0.589);\n}\n\n.alertBox {\n    background-color: rgb(110, 45, 45);\n\n    width: min(100vw, 400px);\n    padding: 3vw;\n    border: 2px solid rgb(204, 71, 71);\n    border-radius: 0.5rem;\n\n    display: grid;\n    gap: 1rem;\n}\n\n.alert-title {\n    color: aqua;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n.alert-message {\n    font-size: 1.75rem;\n    text-align: center;\n    color: rgb(238, 236, 218);\n}\n\n.alertBtns-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-around;\n}\n\n.alertBtns-container button {\n    padding: 0.25em 0.5em;\n    \n    font-size: 1.2rem;\n    font-weight: bold;\n\n    background-color: rgb(231, 167, 48);\n    border: 2px solid rgb(0, 0, 0);\n    border-radius: 0.25em;\n    color: black;\n\n    transition: 100ms;\n}\n.alertBtns-container button:hover {\n    background-color: rgb(221, 61, 69);\n    outline: 1px solid black;\n    /* color: white; */\n    scale: 105%;\n}\n.alertBtns-container button:active {\n    scale: 97%;\n    transition: 50ms;\n}","",{version:3,sources:["webpack://./src/styles/alertView.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,UAAU;IACV,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,WAAW;;IAEX,aAAa,EAAE,kCAAkC;IACjD,qBAAqB;;IAErB,sCAAsC;AAC1C;;AAEA;IACI,kCAAkC;;IAElC,wBAAwB;IACxB,YAAY;IACZ,kCAAkC;IAClC,qBAAqB;;IAErB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,qBAAqB;;IAErB,iBAAiB;IACjB,iBAAiB;;IAEjB,mCAAmC;IACnC,8BAA8B;IAC9B,qBAAqB;IACrB,YAAY;;IAEZ,iBAAiB;AACrB;AACA;IACI,kCAAkC;IAClC,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;AACf;AACA;IACI,UAAU;IACV,gBAAgB;AACpB",sourcesContent:[".alertView {\n    position: fixed;\n    z-index: 4;\n    top: 0%;\n    left: 0%;\n    height: 100%;\n    width: 100%;\n\n    display: none; /* will be 'grid' via javascript */\n    place-content: center;\n\n    background-color: rgba(0, 0, 0, 0.589);\n}\n\n.alertBox {\n    background-color: rgb(110, 45, 45);\n\n    width: min(100vw, 400px);\n    padding: 3vw;\n    border: 2px solid rgb(204, 71, 71);\n    border-radius: 0.5rem;\n\n    display: grid;\n    gap: 1rem;\n}\n\n.alert-title {\n    color: aqua;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n.alert-message {\n    font-size: 1.75rem;\n    text-align: center;\n    color: rgb(238, 236, 218);\n}\n\n.alertBtns-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-around;\n}\n\n.alertBtns-container button {\n    padding: 0.25em 0.5em;\n    \n    font-size: 1.2rem;\n    font-weight: bold;\n\n    background-color: rgb(231, 167, 48);\n    border: 2px solid rgb(0, 0, 0);\n    border-radius: 0.25em;\n    color: black;\n\n    transition: 100ms;\n}\n.alertBtns-container button:hover {\n    background-color: rgb(221, 61, 69);\n    outline: 1px solid black;\n    /* color: white; */\n    scale: 105%;\n}\n.alertBtns-container button:active {\n    scale: 97%;\n    transition: 50ms;\n}"],sourceRoot:""}]);const s=a},540:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".contentView-container.hide {\n    display: none;\n}\n\n.contentView {\n    background-color: var(--contentViewCol);\n    \n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    gap: 10px;\n\n    position: relative;\n    z-index: 0;\n}\n\n.contentView.hide {\n    display: none;\n}\n\n.contentView .title-wrapper {\n    display: grid;\n    grid-template-columns: 1fr;\n    overflow: visible;\n}\n\n.contentView.single .title-wrapper {\n    grid-template-columns: auto 1fr;\n}\n\n.contentView #return {\n    background-color: transparent;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    opacity: 75%;\n    display: none;\n    max-height: 2.5rem;\n    aspect-ratio: 1/1;\n    place-content: center;\n    position: relative;\n}\n\n.contentView.single #return {\n    display: grid;\n}\n\n.contentView #return:hover {\n    opacity: 100%;\n}\n\n.contentView #return img {\n    height: 100%;\n    width: 100%;\n}\n\n.contentView ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--fontCol);\n    opacity: 0.5; /* Firefox */\n  }\n\n.contentView .description-wrapper {\n    position: relative;\n    background-color: red;\n    height: max-content;\n}\n\n.contentView textarea {\n    min-height: 13em;\n    width: 100%;\n\n    resize: none;\n}\n\n.contentView .itemTitle, .contentView textarea {\n    border-radius: 5px;\n\n    padding: 6px;\n\n    font-size: 1rem;\n\n    border: 2px solid rgb(80, 98, 104);\n\n    background-color: var(--insideCol);\n}\n\n.contentView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    justify-content: end;\n    align-self: start;\n    gap: 1ch;\n}\n\n.contentView .options * {\n    font-size: 1rem;\n}\n\n.contentView .options input[type='date'] {\n    min-width: 13ch;\n}\n\n.contentView .options :is(.date-container, select, input) {\n    background-color: var(--insideCol);\n    border-radius: 3px;\n    border: none;\n    padding: 3px;\n}\n\n.contentView #delete {\n    background-color: rgb(182, 17, 44);\n    border: 2px solid rgb(201, 140, 61);\n    color: rgb(255, 228, 206);\n    border-radius: 4px;\n    padding: 3px 20px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n\n.contentView #delete:hover {\n    border-color: rgb(219, 184, 139);\n    background-color: rgb(167, 0, 0);\n    color: white;\n}\n.contentView #delete:active {\n    background-color: black;\n    border-color: white;\n}\n\n.contentView .clear {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    padding: 0px 20px;\n\n    background-color: rgba(0, 0, 0, 0.281);\n\n    display: grid;\n    place-content: center;\n    z-index: 3;\n\n}\n\n.contentView .clear p {\n    text-align: center;\n    user-select: none;\n    font-size: 1.5rem;\n\n    background-color: rgba(0, 0, 0, 0.384);\n    padding: 0.5em;\n    border-radius: 0.35em;\n}\n\n.contentView.note .options :is(select, .date-container) {\n    display: none;\n}","",{version:3,sources:["webpack://./src/styles/contentView.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;;AAEA;IACI,uCAAuC;;IAEvC,aAAa;;IAEb,aAAa;IACb,iCAAiC;IACjC,SAAS;;IAET,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,6BAA6B;IAC7B,6BAA6B;IAC7B,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,iBAAiB;IACjB,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA,6BAA6B,yCAAyC;IAClE,qBAAqB;IACrB,YAAY,EAAE,YAAY;EAC5B;;AAEF;IACI,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,WAAW;;IAEX,YAAY;AAChB;;AAEA;IACI,kBAAkB;;IAElB,YAAY;;IAEZ,eAAe;;IAEf,kCAAkC;;IAElC,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,oBAAoB;IACpB,iBAAiB;IACjB,QAAQ;AACZ;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kCAAkC;IAClC,kBAAkB;IAClB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kCAAkC;IAClC,mCAAmC;IACnC,yBAAyB;IACzB,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;;IAEf,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;IAChC,gCAAgC;IAChC,YAAY;AAChB;AACA;IACI,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,iBAAiB;;IAEjB,sCAAsC;;IAEtC,aAAa;IACb,qBAAqB;IACrB,UAAU;;AAEd;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;;IAEjB,sCAAsC;IACtC,cAAc;IACd,qBAAqB;AACzB;;AAEA;IACI,aAAa;AACjB",sourcesContent:[".contentView-container.hide {\n    display: none;\n}\n\n.contentView {\n    background-color: var(--contentViewCol);\n    \n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    gap: 10px;\n\n    position: relative;\n    z-index: 0;\n}\n\n.contentView.hide {\n    display: none;\n}\n\n.contentView .title-wrapper {\n    display: grid;\n    grid-template-columns: 1fr;\n    overflow: visible;\n}\n\n.contentView.single .title-wrapper {\n    grid-template-columns: auto 1fr;\n}\n\n.contentView #return {\n    background-color: transparent;\n    border: 2px solid transparent;\n    border-radius: 5px;\n    opacity: 75%;\n    display: none;\n    max-height: 2.5rem;\n    aspect-ratio: 1/1;\n    place-content: center;\n    position: relative;\n}\n\n.contentView.single #return {\n    display: grid;\n}\n\n.contentView #return:hover {\n    opacity: 100%;\n}\n\n.contentView #return img {\n    height: 100%;\n    width: 100%;\n}\n\n.contentView ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: var(--fontCol);\n    opacity: 0.5; /* Firefox */\n  }\n\n.contentView .description-wrapper {\n    position: relative;\n    background-color: red;\n    height: max-content;\n}\n\n.contentView textarea {\n    min-height: 13em;\n    width: 100%;\n\n    resize: none;\n}\n\n.contentView .itemTitle, .contentView textarea {\n    border-radius: 5px;\n\n    padding: 6px;\n\n    font-size: 1rem;\n\n    border: 2px solid rgb(80, 98, 104);\n\n    background-color: var(--insideCol);\n}\n\n.contentView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    justify-content: end;\n    align-self: start;\n    gap: 1ch;\n}\n\n.contentView .options * {\n    font-size: 1rem;\n}\n\n.contentView .options input[type='date'] {\n    min-width: 13ch;\n}\n\n.contentView .options :is(.date-container, select, input) {\n    background-color: var(--insideCol);\n    border-radius: 3px;\n    border: none;\n    padding: 3px;\n}\n\n.contentView #delete {\n    background-color: rgb(182, 17, 44);\n    border: 2px solid rgb(201, 140, 61);\n    color: rgb(255, 228, 206);\n    border-radius: 4px;\n    padding: 3px 20px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n\n.contentView #delete:hover {\n    border-color: rgb(219, 184, 139);\n    background-color: rgb(167, 0, 0);\n    color: white;\n}\n.contentView #delete:active {\n    background-color: black;\n    border-color: white;\n}\n\n.contentView .clear {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    padding: 0px 20px;\n\n    background-color: rgba(0, 0, 0, 0.281);\n\n    display: grid;\n    place-content: center;\n    z-index: 3;\n\n}\n\n.contentView .clear p {\n    text-align: center;\n    user-select: none;\n    font-size: 1.5rem;\n\n    background-color: rgba(0, 0, 0, 0.384);\n    padding: 0.5em;\n    border-radius: 0.35em;\n}\n\n.contentView.note .options :is(select, .date-container) {\n    display: none;\n}"],sourceRoot:""}]);const s=a},973:(n,t,e)=>{"use strict";e.d(t,{Z:()=>d});var r=e(537),i=e.n(r),o=e(645),a=e.n(o),s=e(667),l=e.n(s),u=new URL(e(535),e.b),c=a()(i()),A=l()(u);c.push([n.id,".listView-container.hide {\n    display: none;\n}\n\n.listView {\n    background-color: var(--listViewCol);\n    display: grid;\n    align-content: start;\n    gap: 15px;\n\n    padding: 10px;\n\n    position: relative;\n    z-index: 1;\n}\n\n.listView.hide {\n    display: none;\n}\n\n.listView .title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n}\n\n.listView.triple #open-menu {\n    display: none;\n}\n\n.listView #open-menu {\n    max-height: 2.5rem;\n    background-color: transparent;\n    border: 2px solid white;\n    border-radius: 5px;\n    opacity: 75%;\n}\n\n.listView #open-menu:hover {\n    opacity: 100%;\n}\n\n.listView #open-menu>img {\n    height: 100%;\n    width: 100%;\n}\n\n.listView .title {\n    font-size: 2.5rem;\n}\n\n.listView.triple .title {\n    display: none;\n}\n\n.listView .listNameWrapper {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 10px;\n}\n\n.listView .listNameWrapper .newBtn {\n    background-color: rgb(49, 71, 100);\n    color: rgba(255, 255, 255, 0.788);\n    border: 1px solid rgba(114, 151, 207, 0.281);\n    border-radius: 5px;\n    font-size: 0.9rem;\n    padding: 6px 15px;\n    align-self: center;\n\n    transition: 100ms;\n}\n\n.listView .listNameWrapper .newBtn:hover {\n    border-color: rgba(255, 255, 255, 0.473);\n    background-color: rgba(95, 149, 170, 0.527);\n}\n.listView .listNameWrapper .newBtn:active {\n    background-color: white;\n}\n\n#listName {\n    background-color: transparent;\n    border: none;\n    font-size: 1.75rem;\n    border-bottom: 1px solid transparent;\n    width: 100%;\n    min-width: min-content;\n}\n#listName:focus {\n    outline: none;\n    border-bottom-color: rgba(255, 255, 255, 0.781);\n    border-radius: 0%;\n}\n\n.listView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    gap: 1ch;\n}\n\n.listView .options, .listView .options * {\n    overflow: visible;\n}\n\n.listView .options :is(.sort, .show) {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 0.5ch;\n}\n\n.listView .sort span {\n    min-width: max-content;\n}\n\n.listView :is(.sort, .show) input {\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n}\n.listView :is(.sort, .show) input::before {\n    background-color: transparent;\n    border: 1px solid white;\n    padding: 3px 5px;\n    border-radius: 5px;\n}\n\n.listView :is(#sortPriority, #showPriority)::before {\n    content: 'Priority';\n}\n.listView :is(#sortDate, #showDate)::before {\n    content: 'Date';\n}\n.listView :is(.sort, .show) input:hover::before {\n    background-color: rgba(255, 255, 255, 0.096);\n}\n.listView :is(.sort, .show) input:checked::before {\n    background-color: white;\n    color: black;\n}\n\n.listView ul {\n    display: grid;\n    gap: 7px;\n    margin-bottom: 10px;\n}\n\n.listView ul li {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-auto-flow: column;\n    justify-content: start;\n    gap: 10px;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    padding: 3px 10px;\n    transition: 250ms;\n    background-color: rgba(129, 205, 255, 0.123);\n}\n.listView ul li.note {\n    grid-template-columns: 1fr;\n}\n.listView ul li.selected {\n    border-color: rgba(255, 255, 255, 0.623);\n}\n\n.listView.single ul li .textContainer {\n    position: relative;\n}\n\n.listView.single ul li .textContainer::before {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n}\n\n.listView ul li:hover {\n    border-color: rgba(255, 255, 255, 0.308);\n}\n.listView ul li:focus-within {\n    border-bottom-color: white;\n}\n\n.listView ul li * {\n    background-color: transparent;\n    border: none;\n    font-size: 1rem;\n}\n.listView ul li *:focus {\n    outline: none;\n}\n\n.listView ul li input[type='checkbox'] {\n    -webkit-appearance: none;\n    appearance: none;\n    --size: 18px;\n    width: var(--size);\n    height: var(--size);\n    align-self: center;\n\n    --col: rgb(255, 255, 255);\n    opacity: 40%;\n    border: 2px solid var(--col);\n    border-radius: 5px;\n\n    position: relative;\n    overflow: visible;\n\n    transition: 200ms;\n}\n.listView ul li input[type='checkbox']:hover {\n    opacity: 60%;\n}\n\n.listView ul li input[type='checkbox']::before {\n    position: absolute;\n    content: '';\n    background-color: rgb(145, 178, 209);\n    translate: -1px -4px;\n}\n\n.listView .completedItems li input[type='checkbox']::before {\n    color: rgb(134, 139, 255);\n}\n\n.listView ul li input[type='checkbox']:checked::before {\n    content: '';\n\n    --image: url("+A+");\n    --size: 20px;\n    mask-image: var(--image);\n    mask-repeat: no-repeat;\n    mask-size: var(--size);\n    -webkit-mask-image: var(--image);\n    -webkit-mask-repeat: no-repeat;\n    -webkit-mask-size: var(--size);\n\n    background-color: var(--col);\n    width: var(--size);\n    height: var(--size);\n}\n\n.listView ul li input[type='text'] {\n    padding: 5px 0px;\n    width: 100%;\n    min-width: 5ch;\n    text-overflow: ellipsis;\n}\n\n.listView ul li select {\n    border-radius: 3px;\n}\n\n.listView ul li select:focus {\n    background-color: var(--listViewCol);\n}\n\ninput[type='date'] {\n    font-family: inherit;\n    text-align: end;\n    width: 14ch;\n    position: relative;\n    z-index: 2;\n}\n\n.date-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: center;\n    height: 100%;\n    align-items: center;\n    position: relative;\n}\n\n.date-container:hover input~span {\n    --size: 18px;\n    height: var(--size);\n    width: var(--size);\n    border-radius: 3px;\n    background-color: rgba(234, 241, 241, 0.74);\n\n    position: absolute;\n    z-index: 1;\n    right: 0;\n    translate: -1px 0px;\n}\n\n.date-container p {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-content: center;\n    border-radius: inherit;\n}\n\n.date-container input[type='date']~p {\n    visibility: hidden;\n}\n\n.date-container:not(:hover) :is(input[type='date'].noDate, input[type='date'].noDate~span) {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n}\n\n.date-container:hover :is(input[type='date'].noDate, input[type='date'].noDate~span) {\n    visibility: visible;\n    animation: fadeIn 100ms ease-out forwards;\n}\n\n.date-container:not(:hover) input[type='date'].noDate+p {\n    position: absolute;\n    right: 0%;\n    animation: fadeIn 100ms ease-out forwards;\n    visibility: visible;\n    color: white;\n}\n\n.date-container:hover input[type='date'].noDate+p {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n    color: transparent;\n}\n\n@keyframes fadeIn {\n    0% {\n        color: rgba(255, 255, 255, 0);\n        visibility: visible;\n    }\n    99% {\n        color: white;\n    }\n    100% {\n        color: white;\n    }\n}\n@keyframes fadeOut {\n    0% {\n        visibility: visible;\n        color: white;\n    }\n    99% {\n        visibility: visible;\n        color: rgba(255, 255, 255, 0);\n    }\n    100% {\n        visibility: hidden;\n        color: rgba(255, 255, 255, 0);\n    }\n}\n\n.completedTitle-wrapper {\n    position: relative;\n\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-areas: \"TITLE\";\n    align-items: center;\n\n    overflow: visible;\n}\n\n#completedTitle {\n    grid-area: TITLE;\n    width: 100%;\n    padding: 7px 0px;\n    border-radius: 6px;\n    background-color: transparent;\n    text-align: start;\n    font-size: 1.2rem;\n    --col: white;\n    color: var(--col);\n    border: none;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-areas: \"SYMBOL TITLE\"\n    \"BAR BAR\";\n    gap: 0ch 0.5ch;\n    \n    --transitionMS: 300ms;\n    transition: var(--transitionMS);\n}\n\n#completedTitle>svg {\n    grid-area: SYMBOL;\n    height: 0.65em;\n    margin-left: 0.1em;\n    align-self: center;\n    rotate: 90deg;\n    transition: 100ms;\n    aspect-ratio: 1/1;\n}\n\n#completedTitle>svg * {\n    fill: var(--col) !important;\n}\n\n\n#completedTitle.collapse>svg {\n    rotate: 0deg;\n}\n\n#completedTitle::after {\n    grid-area: BAR;\n    display: block;\n    margin-top: 3px;\n    content: '';\n    background-color: rgba(255, 255, 255, 0.795);\n    height: 1px;\n    \n    transition: 500ms;\n    width: 0%;\n}\n#completedTitle:hover {\n    --col: rgb(118, 179, 248);\n}\n#completedTitle:active {\n    --col: rgb(153, 226, 226);\n}\n#completedTitle:hover::after {\n    width: 100%;\n    background-color: var(--col);\n}\n\n.listView .completedTitle-wrapper #removeCompleted {\n    position: absolute;\n    right: 0%;\n    translate: 0px -3px;\n    padding: 2px 8px;\n    background-color: rgb(84, 72, 128);\n    color: rgb(240, 198, 248);\n    border: 1px solid rgb(145, 174, 187);\n    border-radius: 3px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n.listView .completedTitle-wrapper #removeCompleted:hover {\n    border-color: rgb(120, 143, 161);\n    background-color: rgb(167, 42, 42);\n}\n.listView .completedTitle-wrapper #removeCompleted:active {\n    background-color: white;\n    color: black;\n}\n\n.listView .completedItems li {\n    background-color: rgba(31, 36, 44, 0.425);\n    color: rgba(255, 255, 255, 0.637);\n}\n\n.listView .completedItems li input[type='text'] {\n    text-decoration: line-through;\n    color: inherit;\n}\n\n.listView.hidePriority select {\n    display: none;\n}\n.listView.hideDate .date-container {\n    display: none;\n}\n\n.listView .listItems .task:not(.task.checked) {\n    animation: welcome-to-unchecked 200ms ease-out;\n    animation-iteration-count: 1;\n}\n@keyframes welcome-to-unchecked {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .listItems .task.checked {\n    animation: move-to-completed 200ms;\n}\n@keyframes move-to-completed {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems .task.checked {\n    animation: welcome-to-checked 200ms ease-out;\n}\n@keyframes welcome-to-checked {\n    0% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .completedItems .task:not(.task.checked) {\n    animation: move-to-unchecked 200ms;\n}\n@keyframes move-to-unchecked {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems.collapse {\n    animation: completed-collapse 300ms ease-out forwards;\n    pointer-events: none;\n}\n@keyframes completed-collapse {\n    100% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n    }\n}\n.listView .completedItems:not(.collapse) {\n    animation: completed-expand 300ms ease-out forwards;\n}\n@keyframes completed-expand {\n    0% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n        pointer-events: none;\n    }\n    99% {\n        pointer-events: none;\n    }\n    100% {\n        transform: translateY(0rem);\n        opacity: 100%;\n        pointer-events: initial;\n    }\n}\n\n.listView :is(.listItems, .completedItems) li.removing {\n    justify-self: end;\n    animation: removing 300ms ease-in-out forwards !important;\n    max-height: 0em;\n    opacity: 0%;\n}\n@keyframes removing {\n    0% {\n        width: 100%;\n        opacity: 100%;\n        max-height: 3em;\n    }\n    70% {\n        width: 50%;\n        opacity: 0%;\n        max-height: 3em;\n    }\n    100% {\n        max-height: 0em;\n    }\n}","",{version:3,sources:["webpack://./src/styles/listView.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,oBAAoB;IACpB,SAAS;;IAET,aAAa;;IAEb,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,6BAA6B;IAC7B,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,SAAS;AACb;;AAEA;IACI,kCAAkC;IAClC,iCAAiC;IACjC,4CAA4C;IAC5C,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;;IAElB,iBAAiB;AACrB;;AAEA;IACI,wCAAwC;IACxC,2CAA2C;AAC/C;AACA;IACI,uBAAuB;AAC3B;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,oCAAoC;IACpC,WAAW;IACX,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,+CAA+C;IAC/C,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,QAAQ;AACZ;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,qBAAqB;IACrB,wBAAwB;AAC5B;AACA;IACI,6BAA6B;IAC7B,uBAAuB;IACvB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;AACA;IACI,eAAe;AACnB;AACA;IACI,4CAA4C;AAChD;AACA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,QAAQ;IACR,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,sBAAsB;IACtB,sBAAsB;IACtB,SAAS;IACT,6BAA6B;IAC7B,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,4CAA4C;AAChD;AACA;IACI,0BAA0B;AAC9B;AACA;IACI,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,wCAAwC;AAC5C;AACA;IACI,0BAA0B;AAC9B;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,eAAe;AACnB;AACA;IACI,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;;IAElB,yBAAyB;IACzB,YAAY;IACZ,4BAA4B;IAC5B,kBAAkB;;IAElB,kBAAkB;IAClB,iBAAiB;;IAEjB,iBAAiB;AACrB;AACA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,oCAAoC;IACpC,oBAAoB;AACxB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;;IAEX,gDAA0C;IAC1C,YAAY;IACZ,wBAAwB;IACxB,sBAAsB;IACtB,sBAAsB;IACtB,gCAAgC;IAChC,8BAA8B;IAC9B,8BAA8B;;IAE9B,4BAA4B;IAC5B,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,WAAW;IACX,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;IAClB,kBAAkB;IAClB,2CAA2C;;IAE3C,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,0CAA0C;IAC1C,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,yCAAyC;AAC7C;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,yCAAyC;IACzC,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,0CAA0C;IAC1C,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI;QACI,6BAA6B;QAC7B,mBAAmB;IACvB;IACA;QACI,YAAY;IAChB;IACA;QACI,YAAY;IAChB;AACJ;AACA;IACI;QACI,mBAAmB;QACnB,YAAY;IAChB;IACA;QACI,mBAAmB;QACnB,6BAA6B;IACjC;IACA;QACI,kBAAkB;QAClB,6BAA6B;IACjC;AACJ;;AAEA;IACI,kBAAkB;;IAElB,aAAa;IACb,0BAA0B;IAC1B,4BAA4B;IAC5B,mBAAmB;;IAEnB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,kBAAkB;IAClB,6BAA6B;IAC7B,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;IACZ,iBAAiB;IACjB,YAAY;IACZ,aAAa;IACb,+BAA+B;IAC/B;aACS;IACT,cAAc;;IAEd,qBAAqB;IACrB,+BAA+B;AACnC;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,cAAc;IACd,eAAe;IACf,WAAW;IACX,4CAA4C;IAC5C,WAAW;;IAEX,iBAAiB;IACjB,SAAS;AACb;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,WAAW;IACX,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,gBAAgB;IAChB,kCAAkC;IAClC,yBAAyB;IACzB,oCAAoC;IACpC,kBAAkB;IAClB,eAAe;;IAEf,iBAAiB;AACrB;AACA;IACI,gCAAgC;IAChC,kCAAkC;AACtC;AACA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,yCAAyC;IACzC,iCAAiC;AACrC;;AAEA;IACI,6BAA6B;IAC7B,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;;AAEA;IACI,8CAA8C;IAC9C,4BAA4B;AAChC;AACA;IACI;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,eAAe;IACnB;IACA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI,kCAAkC;AACtC;AACA;IACI;QACI,eAAe;IACnB;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,4CAA4C;AAChD;AACA;IACI;QACI,WAAW;QACX,eAAe;IACnB;IACA;QACI,eAAe;IACnB;IACA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI,kCAAkC;AACtC;AACA;IACI;QACI,eAAe;IACnB;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,qDAAqD;IACrD,oBAAoB;AACxB;AACA;IACI;QACI,4BAA4B;QAC5B,kBAAkB;QAClB,WAAW;IACf;AACJ;AACA;IACI,mDAAmD;AACvD;AACA;IACI;QACI,4BAA4B;QAC5B,kBAAkB;QAClB,WAAW;QACX,oBAAoB;IACxB;IACA;QACI,oBAAoB;IACxB;IACA;QACI,2BAA2B;QAC3B,aAAa;QACb,uBAAuB;IAC3B;AACJ;;AAEA;IACI,iBAAiB;IACjB,yDAAyD;IACzD,eAAe;IACf,WAAW;AACf;AACA;IACI;QACI,WAAW;QACX,aAAa;QACb,eAAe;IACnB;IACA;QACI,UAAU;QACV,WAAW;QACX,eAAe;IACnB;IACA;QACI,eAAe;IACnB;AACJ",sourcesContent:[".listView-container.hide {\n    display: none;\n}\n\n.listView {\n    background-color: var(--listViewCol);\n    display: grid;\n    align-content: start;\n    gap: 15px;\n\n    padding: 10px;\n\n    position: relative;\n    z-index: 1;\n}\n\n.listView.hide {\n    display: none;\n}\n\n.listView .title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n}\n\n.listView.triple #open-menu {\n    display: none;\n}\n\n.listView #open-menu {\n    max-height: 2.5rem;\n    background-color: transparent;\n    border: 2px solid white;\n    border-radius: 5px;\n    opacity: 75%;\n}\n\n.listView #open-menu:hover {\n    opacity: 100%;\n}\n\n.listView #open-menu>img {\n    height: 100%;\n    width: 100%;\n}\n\n.listView .title {\n    font-size: 2.5rem;\n}\n\n.listView.triple .title {\n    display: none;\n}\n\n.listView .listNameWrapper {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 10px;\n}\n\n.listView .listNameWrapper .newBtn {\n    background-color: rgb(49, 71, 100);\n    color: rgba(255, 255, 255, 0.788);\n    border: 1px solid rgba(114, 151, 207, 0.281);\n    border-radius: 5px;\n    font-size: 0.9rem;\n    padding: 6px 15px;\n    align-self: center;\n\n    transition: 100ms;\n}\n\n.listView .listNameWrapper .newBtn:hover {\n    border-color: rgba(255, 255, 255, 0.473);\n    background-color: rgba(95, 149, 170, 0.527);\n}\n.listView .listNameWrapper .newBtn:active {\n    background-color: white;\n}\n\n#listName {\n    background-color: transparent;\n    border: none;\n    font-size: 1.75rem;\n    border-bottom: 1px solid transparent;\n    width: 100%;\n    min-width: min-content;\n}\n#listName:focus {\n    outline: none;\n    border-bottom-color: rgba(255, 255, 255, 0.781);\n    border-radius: 0%;\n}\n\n.listView .options {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n    gap: 1ch;\n}\n\n.listView .options, .listView .options * {\n    overflow: visible;\n}\n\n.listView .options :is(.sort, .show) {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 0.5ch;\n}\n\n.listView .sort span {\n    min-width: max-content;\n}\n\n.listView :is(.sort, .show) input {\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n}\n.listView :is(.sort, .show) input::before {\n    background-color: transparent;\n    border: 1px solid white;\n    padding: 3px 5px;\n    border-radius: 5px;\n}\n\n.listView :is(#sortPriority, #showPriority)::before {\n    content: 'Priority';\n}\n.listView :is(#sortDate, #showDate)::before {\n    content: 'Date';\n}\n.listView :is(.sort, .show) input:hover::before {\n    background-color: rgba(255, 255, 255, 0.096);\n}\n.listView :is(.sort, .show) input:checked::before {\n    background-color: white;\n    color: black;\n}\n\n.listView ul {\n    display: grid;\n    gap: 7px;\n    margin-bottom: 10px;\n}\n\n.listView ul li {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-auto-flow: column;\n    justify-content: start;\n    gap: 10px;\n    border: 1px solid transparent;\n    border-radius: 4px;\n    padding: 3px 10px;\n    transition: 250ms;\n    background-color: rgba(129, 205, 255, 0.123);\n}\n.listView ul li.note {\n    grid-template-columns: 1fr;\n}\n.listView ul li.selected {\n    border-color: rgba(255, 255, 255, 0.623);\n}\n\n.listView.single ul li .textContainer {\n    position: relative;\n}\n\n.listView.single ul li .textContainer::before {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n}\n\n.listView ul li:hover {\n    border-color: rgba(255, 255, 255, 0.308);\n}\n.listView ul li:focus-within {\n    border-bottom-color: white;\n}\n\n.listView ul li * {\n    background-color: transparent;\n    border: none;\n    font-size: 1rem;\n}\n.listView ul li *:focus {\n    outline: none;\n}\n\n.listView ul li input[type='checkbox'] {\n    -webkit-appearance: none;\n    appearance: none;\n    --size: 18px;\n    width: var(--size);\n    height: var(--size);\n    align-self: center;\n\n    --col: rgb(255, 255, 255);\n    opacity: 40%;\n    border: 2px solid var(--col);\n    border-radius: 5px;\n\n    position: relative;\n    overflow: visible;\n\n    transition: 200ms;\n}\n.listView ul li input[type='checkbox']:hover {\n    opacity: 60%;\n}\n\n.listView ul li input[type='checkbox']::before {\n    position: absolute;\n    content: '';\n    background-color: rgb(145, 178, 209);\n    translate: -1px -4px;\n}\n\n.listView .completedItems li input[type='checkbox']::before {\n    color: rgb(134, 139, 255);\n}\n\n.listView ul li input[type='checkbox']:checked::before {\n    content: '';\n\n    --image: url('../assets/images/check.svg');\n    --size: 20px;\n    mask-image: var(--image);\n    mask-repeat: no-repeat;\n    mask-size: var(--size);\n    -webkit-mask-image: var(--image);\n    -webkit-mask-repeat: no-repeat;\n    -webkit-mask-size: var(--size);\n\n    background-color: var(--col);\n    width: var(--size);\n    height: var(--size);\n}\n\n.listView ul li input[type='text'] {\n    padding: 5px 0px;\n    width: 100%;\n    min-width: 5ch;\n    text-overflow: ellipsis;\n}\n\n.listView ul li select {\n    border-radius: 3px;\n}\n\n.listView ul li select:focus {\n    background-color: var(--listViewCol);\n}\n\ninput[type='date'] {\n    font-family: inherit;\n    text-align: end;\n    width: 14ch;\n    position: relative;\n    z-index: 2;\n}\n\n.date-container {\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: center;\n    height: 100%;\n    align-items: center;\n    position: relative;\n}\n\n.date-container:hover input~span {\n    --size: 18px;\n    height: var(--size);\n    width: var(--size);\n    border-radius: 3px;\n    background-color: rgba(234, 241, 241, 0.74);\n\n    position: absolute;\n    z-index: 1;\n    right: 0;\n    translate: -1px 0px;\n}\n\n.date-container p {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-content: center;\n    border-radius: inherit;\n}\n\n.date-container input[type='date']~p {\n    visibility: hidden;\n}\n\n.date-container:not(:hover) :is(input[type='date'].noDate, input[type='date'].noDate~span) {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n}\n\n.date-container:hover :is(input[type='date'].noDate, input[type='date'].noDate~span) {\n    visibility: visible;\n    animation: fadeIn 100ms ease-out forwards;\n}\n\n.date-container:not(:hover) input[type='date'].noDate+p {\n    position: absolute;\n    right: 0%;\n    animation: fadeIn 100ms ease-out forwards;\n    visibility: visible;\n    color: white;\n}\n\n.date-container:hover input[type='date'].noDate+p {\n    animation: fadeOut 100ms ease-out forwards;\n    visibility: hidden;\n    color: transparent;\n}\n\n@keyframes fadeIn {\n    0% {\n        color: rgba(255, 255, 255, 0);\n        visibility: visible;\n    }\n    99% {\n        color: white;\n    }\n    100% {\n        color: white;\n    }\n}\n@keyframes fadeOut {\n    0% {\n        visibility: visible;\n        color: white;\n    }\n    99% {\n        visibility: visible;\n        color: rgba(255, 255, 255, 0);\n    }\n    100% {\n        visibility: hidden;\n        color: rgba(255, 255, 255, 0);\n    }\n}\n\n.completedTitle-wrapper {\n    position: relative;\n\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-areas: \"TITLE\";\n    align-items: center;\n\n    overflow: visible;\n}\n\n#completedTitle {\n    grid-area: TITLE;\n    width: 100%;\n    padding: 7px 0px;\n    border-radius: 6px;\n    background-color: transparent;\n    text-align: start;\n    font-size: 1.2rem;\n    --col: white;\n    color: var(--col);\n    border: none;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-areas: \"SYMBOL TITLE\"\n    \"BAR BAR\";\n    gap: 0ch 0.5ch;\n    \n    --transitionMS: 300ms;\n    transition: var(--transitionMS);\n}\n\n#completedTitle>svg {\n    grid-area: SYMBOL;\n    height: 0.65em;\n    margin-left: 0.1em;\n    align-self: center;\n    rotate: 90deg;\n    transition: 100ms;\n    aspect-ratio: 1/1;\n}\n\n#completedTitle>svg * {\n    fill: var(--col) !important;\n}\n\n\n#completedTitle.collapse>svg {\n    rotate: 0deg;\n}\n\n#completedTitle::after {\n    grid-area: BAR;\n    display: block;\n    margin-top: 3px;\n    content: '';\n    background-color: rgba(255, 255, 255, 0.795);\n    height: 1px;\n    \n    transition: 500ms;\n    width: 0%;\n}\n#completedTitle:hover {\n    --col: rgb(118, 179, 248);\n}\n#completedTitle:active {\n    --col: rgb(153, 226, 226);\n}\n#completedTitle:hover::after {\n    width: 100%;\n    background-color: var(--col);\n}\n\n.listView .completedTitle-wrapper #removeCompleted {\n    position: absolute;\n    right: 0%;\n    translate: 0px -3px;\n    padding: 2px 8px;\n    background-color: rgb(84, 72, 128);\n    color: rgb(240, 198, 248);\n    border: 1px solid rgb(145, 174, 187);\n    border-radius: 3px;\n    font-size: 1rem;\n\n    transition: 100ms;\n}\n.listView .completedTitle-wrapper #removeCompleted:hover {\n    border-color: rgb(120, 143, 161);\n    background-color: rgb(167, 42, 42);\n}\n.listView .completedTitle-wrapper #removeCompleted:active {\n    background-color: white;\n    color: black;\n}\n\n.listView .completedItems li {\n    background-color: rgba(31, 36, 44, 0.425);\n    color: rgba(255, 255, 255, 0.637);\n}\n\n.listView .completedItems li input[type='text'] {\n    text-decoration: line-through;\n    color: inherit;\n}\n\n.listView.hidePriority select {\n    display: none;\n}\n.listView.hideDate .date-container {\n    display: none;\n}\n\n.listView .listItems .task:not(.task.checked) {\n    animation: welcome-to-unchecked 200ms ease-out;\n    animation-iteration-count: 1;\n}\n@keyframes welcome-to-unchecked {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .listItems .task.checked {\n    animation: move-to-completed 200ms;\n}\n@keyframes move-to-completed {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems .task.checked {\n    animation: welcome-to-checked 200ms ease-out;\n}\n@keyframes welcome-to-checked {\n    0% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 100%;\n    }\n}\n\n.listView .completedItems .task:not(.task.checked) {\n    animation: move-to-unchecked 200ms;\n}\n@keyframes move-to-unchecked {\n    50% {\n        max-height: 4em;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.listView .completedItems.collapse {\n    animation: completed-collapse 300ms ease-out forwards;\n    pointer-events: none;\n}\n@keyframes completed-collapse {\n    100% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n    }\n}\n.listView .completedItems:not(.collapse) {\n    animation: completed-expand 300ms ease-out forwards;\n}\n@keyframes completed-expand {\n    0% {\n        transform: translateY(-3rem);\n        visibility: hidden;\n        opacity: 0%;\n        pointer-events: none;\n    }\n    99% {\n        pointer-events: none;\n    }\n    100% {\n        transform: translateY(0rem);\n        opacity: 100%;\n        pointer-events: initial;\n    }\n}\n\n.listView :is(.listItems, .completedItems) li.removing {\n    justify-self: end;\n    animation: removing 300ms ease-in-out forwards !important;\n    max-height: 0em;\n    opacity: 0%;\n}\n@keyframes removing {\n    0% {\n        width: 100%;\n        opacity: 100%;\n        max-height: 3em;\n    }\n    70% {\n        width: 50%;\n        opacity: 0%;\n        max-height: 3em;\n    }\n    100% {\n        max-height: 0em;\n    }\n}"],sourceRoot:""}]);const d=c},11:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".loading-container {\n    position: fixed;\n    top: 0%;\n    left: 0%;\n\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    place-content: center;\n\n    background-color: rgba(13, 23, 119, 0.932);\n\n    z-index: 4;\n\n    opacity: 0%;\n\n    transition: 100ms;\n}\n\n.loading {\n    /* background-color: aqua; */\n    pointer-events: inherit;\n\n    display: grid;\n}\n\n.loading h1 {\n    pointer-events: inherit;\n    font-size: 55px;\n    text-align: center;\n\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10 and IE 11 */\n    user-select: none; /* Standard syntax */\n}\n\n.loading h1::after {\n    content: '...';\n    animation: dots 2300ms;\n    animation-iteration-count: infinite;\n}\n\n@keyframes dots {\n    0% {\n        content: '.';\n    }\n    25% {\n        content: '.';\n    }\n    50% {\n        content: '..';\n    }\n    75% {\n        content: '...';\n    }\n    100% {\n        content: '...';\n    }\n}\n\n","",{version:3,sources:["webpack://./src/styles/loading.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,OAAO;IACP,QAAQ;;IAER,YAAY;IACZ,WAAW;;IAEX,aAAa;IACb,qBAAqB;;IAErB,0CAA0C;;IAE1C,UAAU;;IAEV,WAAW;;IAEX,iBAAiB;AACrB;;AAEA;IACI,4BAA4B;IAC5B,uBAAuB;;IAEvB,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,kBAAkB;;IAElB,yBAAyB,EAAE,WAAW;IACtC,qBAAqB,EAAE,oBAAoB;IAC3C,iBAAiB,EAAE,oBAAoB;AAC3C;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,mCAAmC;AACvC;;AAEA;IACI;QACI,YAAY;IAChB;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;IACA;QACI,cAAc;IAClB;IACA;QACI,cAAc;IAClB;AACJ",sourcesContent:[".loading-container {\n    position: fixed;\n    top: 0%;\n    left: 0%;\n\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    place-content: center;\n\n    background-color: rgba(13, 23, 119, 0.932);\n\n    z-index: 4;\n\n    opacity: 0%;\n\n    transition: 100ms;\n}\n\n.loading {\n    /* background-color: aqua; */\n    pointer-events: inherit;\n\n    display: grid;\n}\n\n.loading h1 {\n    pointer-events: inherit;\n    font-size: 55px;\n    text-align: center;\n\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10 and IE 11 */\n    user-select: none; /* Standard syntax */\n}\n\n.loading h1::after {\n    content: '...';\n    animation: dots 2300ms;\n    animation-iteration-count: infinite;\n}\n\n@keyframes dots {\n    0% {\n        content: '.';\n    }\n    25% {\n        content: '.';\n    }\n    50% {\n        content: '..';\n    }\n    75% {\n        content: '...';\n    }\n    100% {\n        content: '...';\n    }\n}\n\n"],sourceRoot:""}]);const s=a},756:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Mukta:wght@200;300;400;500;600;700;800&display=swap);"]),a.push([n.id,"/* Roboto font */\n\n/* Mukta Font */\n\nhtml, body {\n    margin: 0%;\n    padding: 0%;\n    height: 100vh;\n    width: 100vw;\n}\n\n:root * {\n    box-sizing: border-box;\n    margin: 0%;\n    padding: 0%;\n\n    --fontTitle: 'Mukta', sans-serif;\n    --fontMain: 'Roboto', sans-serif;\n\n    --menuCol: rgb(27, 31, 51);\n    --listViewCol: rgb(6, 48, 83);\n    --contentViewCol: rgb(29, 68, 105);\n    --insideCol: rgb(67, 108, 128);\n\n    --mainContentCol: white;\n    --fontCol: var(--mainContentCol);\n}\n\nbody {\n    --colMinusOne: 2;\n    --firstCol: 1;\n    display: grid;\n    grid-template-columns: auto 1fr 1fr;\n    overflow: visible;\n}\n\nbody.double {\n    grid-template-columns: 1fr 1fr;\n}\n\nbody.single {\n    grid-template-columns: 1fr;\n}\n\nbody * {\n    color: var(--fontCol);\n    font-family: var(--fontMain);\n}\n\nbody > :is(.menu-container, .listView-container, .contentView-container) {\n    overflow: auto;\n    display: grid;\n    height: 100%;\n}\nbody > :is(.menu-container, .listView-container, .contentView-container) > * {\n    min-width: min(44ch, 100vw);\n    height: 100%;\n}\n\nspan.seperator {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    height: 1px;\n    width: 80%;\n    justify-self: center;\n    background-color: rgba(255, 255, 255, 0.384);\n}\n\n.title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    gap: 1ch;\n}\n\n.title-wrapper button {\n    color: black;\n    height: 100%;\n    aspect-ratio: 1/1;\n}\n\n.title {\n    font-family: var(--fontTitle);\n}\n\nbutton, input {\n    user-select: none;\n}\n\nul {\n    list-style: none;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA,gBAAgB;;AAGhB,eAAe;;AAGf;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,WAAW;;IAEX,gCAAgC;IAChC,gCAAgC;;IAEhC,0BAA0B;IAC1B,6BAA6B;IAC7B,kCAAkC;IAClC,8BAA8B;;IAE9B,uBAAuB;IACvB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,aAAa;IACb,mCAAmC;IACnC,iBAAiB;AACrB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,qBAAqB;IACrB,4BAA4B;AAChC;;AAEA;IACI,cAAc;IACd,aAAa;IACb,YAAY;AAChB;AACA;IACI,2BAA2B;IAC3B,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,oBAAoB;IACpB,4CAA4C;AAChD;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["/* Roboto font */\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\n/* Mukta Font */\n@import url('https://fonts.googleapis.com/css2?family=Mukta:wght@200;300;400;500;600;700;800&display=swap');\n\nhtml, body {\n    margin: 0%;\n    padding: 0%;\n    height: 100vh;\n    width: 100vw;\n}\n\n:root * {\n    box-sizing: border-box;\n    margin: 0%;\n    padding: 0%;\n\n    --fontTitle: 'Mukta', sans-serif;\n    --fontMain: 'Roboto', sans-serif;\n\n    --menuCol: rgb(27, 31, 51);\n    --listViewCol: rgb(6, 48, 83);\n    --contentViewCol: rgb(29, 68, 105);\n    --insideCol: rgb(67, 108, 128);\n\n    --mainContentCol: white;\n    --fontCol: var(--mainContentCol);\n}\n\nbody {\n    --colMinusOne: 2;\n    --firstCol: 1;\n    display: grid;\n    grid-template-columns: auto 1fr 1fr;\n    overflow: visible;\n}\n\nbody.double {\n    grid-template-columns: 1fr 1fr;\n}\n\nbody.single {\n    grid-template-columns: 1fr;\n}\n\nbody * {\n    color: var(--fontCol);\n    font-family: var(--fontMain);\n}\n\nbody > :is(.menu-container, .listView-container, .contentView-container) {\n    overflow: auto;\n    display: grid;\n    height: 100%;\n}\nbody > :is(.menu-container, .listView-container, .contentView-container) > * {\n    min-width: min(44ch, 100vw);\n    height: 100%;\n}\n\nspan.seperator {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    height: 1px;\n    width: 80%;\n    justify-self: center;\n    background-color: rgba(255, 255, 255, 0.384);\n}\n\n.title-wrapper {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    gap: 1ch;\n}\n\n.title-wrapper button {\n    color: black;\n    height: 100%;\n    aspect-ratio: 1/1;\n}\n\n.title {\n    font-family: var(--fontTitle);\n}\n\nbutton, input {\n    user-select: none;\n}\n\nul {\n    list-style: none;\n}"],sourceRoot:""}]);const s=a},195:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".menu-container {\n    position: relative;\n    z-index: 2;\n}\nbody:not(body.triple) .menu-container {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n}\nbody:not(body.triple) .menu-container.visible {\n    background-color: rgba(0, 0, 0, 0.185);\n    pointer-events: initial;    \n}\n.menu {\n    overflow: auto;\n    min-width: initial !important;\n    background-color: var(--menuCol);\n\n    height: 100%;\n    width: min(250px, 100vw);\n\n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: repeat(4, auto) 1fr;\n    gap: 1rem;\n\n    position: relative;\n    min-width: initial;\n}\n\n.menu:not(.menu.triple) {\n    position: absolute;\n    top: 0%;\n    right: 100%;\n    transition: 300ms;\n}\n\n.menu.visible {\n    translate: 100%;\n}\n\n.menu.triple {\n    display: grid;\n    position: relative;\n}\n\n.menu .title-wrapper {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr;\n\n    margin-bottom: 15px;\n\n    overflow: visible;\n}\n\n.menu #close-menu {\n\n    justify-self: end;\n    \n    overflow: visible;\n    display: grid;\n    place-content: center;\n\n    --size: 15px;\n    height: var(--size);\n    width: var(--size);\n\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.521);\n    font-size: 1.7rem;\n\n    transition: 100ms;\n}\n\n.menu #close-menu:hover {\n    scale: 120%;\n    color: white;\n}\n\n.menu.triple #close-menu {\n    display: none;\n}\n\n.menu .title {\n    display: none;\n}\n\n.menu.triple .title {\n    display: initial;\n}\n\n.menu .tasks-wrapper, .menu .notes-wrapper, .menu #tasks, .menu #notes {\n    display: grid;\n    overflow: visible;\n}\n\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)) {\n    font-size: 1rem;\n    background-color: transparent;\n    border: none;\n    border-radius: 3px;\n    padding: 7px;\n    text-align: start;\n    transition: 300ms;\n    border: 2px solid transparent;\n}\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)):hover {\n    border-color: white;\n}\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)).selected {\n    border: 2px solid rgba(0, 255, 255, 0.438);\n}\n\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn {\n    text-align: center;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 1px solid rgba(255, 255, 255, 0.185);\n    font-size: 0.85em;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    margin-top: 3px;\n}\n\n.newBtn-wrapper {\n    display: grid;\n}\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn-wrapper input {\n    display: none;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 2px solid rgba(255, 255, 255, 0.39);\n    font-size: 0.85em;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    margin-top: 3px;\n}\n\n.menu :is(#tasks, #notes) li {\n    user-select: none;\n    animation: menu-new 100ms ease-in-out forwards;\n}\n@keyframes menu-new {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    40% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n}\n\n.menu :is(#tasks, #notes) li.removing {\n    animation: menu-removing 100ms ease-in-out forwards;\n}\n@keyframes menu-removing {\n    0% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n    60% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.attribution {\n    display: grid;\n    align-content: end;\n    gap: 0.5em;\n    font-size: 1rem;\n}\n\n.attribution a {\n    text-decoration: none;\n}\n\n.attribution a:hover {\n    text-decoration: underline;\n}\n\n.attribution .created-by a {\n    color: aqua;\n}\n\n.attribution .source {\n    color: rgb(198, 126, 226);\n}\n\n.attribution .warning {\n    color: rgb(233, 196, 116);\n}","",{version:3,sources:["webpack://./src/styles/menu.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;AACA;IACI,sCAAsC;IACtC,uBAAuB;AAC3B;AACA;IACI,cAAc;IACd,6BAA6B;IAC7B,gCAAgC;;IAEhC,YAAY;IACZ,wBAAwB;;IAExB,aAAa;;IAEb,aAAa;IACb,uCAAuC;IACvC,SAAS;;IAET,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,0BAA0B;;IAE1B,mBAAmB;;IAEnB,iBAAiB;AACrB;;AAEA;;IAEI,iBAAiB;;IAEjB,iBAAiB;IACjB,aAAa;IACb,qBAAqB;;IAErB,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;;IAElB,6BAA6B;IAC7B,YAAY;IACZ,iCAAiC;IACjC,iBAAiB;;IAEjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,iBAAiB;AACrB;;;AAGA;IACI,eAAe;IACf,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;AACvB;AACA;IACI,0CAA0C;AAC9C;;AAEA;IACI,kBAAkB;IAClB,4CAA4C;IAC5C,4CAA4C;IAC5C,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,4CAA4C;IAC5C,2CAA2C;IAC3C,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,8CAA8C;AAClD;AACA;IACI;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,aAAa;QACb,eAAe;IACnB;AACJ;;AAEA;IACI,mDAAmD;AACvD;AACA;IACI;QACI,aAAa;QACb,eAAe;IACnB;IACA;QACI,eAAe;QACf,WAAW;IACf;IACA;QACI,WAAW;QACX,eAAe;IACnB;AACJ;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:[".menu-container {\n    position: relative;\n    z-index: 2;\n}\nbody:not(body.triple) .menu-container {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n}\nbody:not(body.triple) .menu-container.visible {\n    background-color: rgba(0, 0, 0, 0.185);\n    pointer-events: initial;    \n}\n.menu {\n    overflow: auto;\n    min-width: initial !important;\n    background-color: var(--menuCol);\n\n    height: 100%;\n    width: min(250px, 100vw);\n\n    padding: 10px;\n\n    display: grid;\n    grid-template-rows: repeat(4, auto) 1fr;\n    gap: 1rem;\n\n    position: relative;\n    min-width: initial;\n}\n\n.menu:not(.menu.triple) {\n    position: absolute;\n    top: 0%;\n    right: 100%;\n    transition: 300ms;\n}\n\n.menu.visible {\n    translate: 100%;\n}\n\n.menu.triple {\n    display: grid;\n    position: relative;\n}\n\n.menu .title-wrapper {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr;\n\n    margin-bottom: 15px;\n\n    overflow: visible;\n}\n\n.menu #close-menu {\n\n    justify-self: end;\n    \n    overflow: visible;\n    display: grid;\n    place-content: center;\n\n    --size: 15px;\n    height: var(--size);\n    width: var(--size);\n\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.521);\n    font-size: 1.7rem;\n\n    transition: 100ms;\n}\n\n.menu #close-menu:hover {\n    scale: 120%;\n    color: white;\n}\n\n.menu.triple #close-menu {\n    display: none;\n}\n\n.menu .title {\n    display: none;\n}\n\n.menu.triple .title {\n    display: initial;\n}\n\n.menu .tasks-wrapper, .menu .notes-wrapper, .menu #tasks, .menu #notes {\n    display: grid;\n    overflow: visible;\n}\n\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)) {\n    font-size: 1rem;\n    background-color: transparent;\n    border: none;\n    border-radius: 3px;\n    padding: 7px;\n    text-align: start;\n    transition: 300ms;\n    border: 2px solid transparent;\n}\n\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)):hover {\n    border-color: white;\n}\n:is(.menu .tasks-wrapper *:not(ul, div), .menu .notes-wrapper *:not(ul, div)).selected {\n    border: 2px solid rgba(0, 255, 255, 0.438);\n}\n\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn {\n    text-align: center;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 1px solid rgba(255, 255, 255, 0.185);\n    font-size: 0.85em;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    margin-top: 3px;\n}\n\n.newBtn-wrapper {\n    display: grid;\n}\n:is(.menu .tasks-wrapper, .menu .notes-wrapper) .newBtn-wrapper input {\n    display: none;\n    background-color: rgba(255, 255, 255, 0.082);\n    border: 2px solid rgba(255, 255, 255, 0.39);\n    font-size: 0.85em;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    margin-top: 3px;\n}\n\n.menu :is(#tasks, #notes) li {\n    user-select: none;\n    animation: menu-new 100ms ease-in-out forwards;\n}\n@keyframes menu-new {\n    0% {\n        max-height: 0em;\n        opacity: 0%;\n    }\n    40% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n}\n\n.menu :is(#tasks, #notes) li.removing {\n    animation: menu-removing 100ms ease-in-out forwards;\n}\n@keyframes menu-removing {\n    0% {\n        opacity: 100%;\n        max-height: 3em;\n    }\n    60% {\n        max-height: 3em;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 0%;\n        max-height: 0em;\n    }\n}\n\n.attribution {\n    display: grid;\n    align-content: end;\n    gap: 0.5em;\n    font-size: 1rem;\n}\n\n.attribution a {\n    text-decoration: none;\n}\n\n.attribution a:hover {\n    text-decoration: underline;\n}\n\n.attribution .created-by a {\n    color: aqua;\n}\n\n.attribution .source {\n    color: rgb(198, 126, 226);\n}\n\n.attribution .warning {\n    color: rgb(233, 196, 116);\n}"],sourceRoot:""}]);const s=a},421:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".right-click-dropdown {\n    position: fixed;\n    z-index: 3;\n    display: grid;\n    background-color: rgb(49, 55, 77);\n    border: 1px solid rgba(255, 255, 255, 0.397);\n    border-radius: 7px;\n    font-size: 1rem;\n    overflow: visible;\n    list-style: none;\n    transform-origin: 0% 0%;\n    animation: menu-expand 200ms ease-out forwards;\n}\n@keyframes menu-expand {\n    0% {\n        scale: 50%;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        scale: 100%;\n    }\n}\n.right-click-dropdown > * {\n    user-select: none;\n    padding: 0.5em 0.85em;\n}\n.right-click-dropdown > *:not(:first-child) {\n    border-top: 1px solid rgba(255, 255, 255, 0.151);\n}\n.right-click-dropdown > *:hover {\n    background-color: rgba(255, 255, 255, 0.062);\n}\n\n.right-click-dropdown > *:active {\n    background-color: rgba(80, 120, 146, 0.589);\n}\n\n.right-click-dropdown.collapse {\n    /* transition: 150ms scale ease-in-out; */\n    animation: menu-collapse 150ms ease-in forwards;\n}\n@keyframes menu-collapse {\n    100% {\n        scale: 50%;\n        opacity: 0%;\n        visibility: hidden;\n    }\n}\n\n.right-click-dropdown::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    --size: 20px;\n    width: var(--size);\n    height: var(--size);\n    top: -10px;\n    left: -10px;\n    border-radius: 10px 10px 0px 0px;\n    transform: rotateZ(-45deg);\n\n}","",{version:3,sources:["webpack://./src/styles/rightClickDropDown.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,UAAU;IACV,aAAa;IACb,iCAAiC;IACjC,4CAA4C;IAC5C,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,uBAAuB;IACvB,8CAA8C;AAClD;AACA;IACI;QACI,UAAU;QACV,WAAW;IACf;IACA;QACI,aAAa;QACb,WAAW;IACf;AACJ;AACA;IACI,iBAAiB;IACjB,qBAAqB;AACzB;AACA;IACI,gDAAgD;AACpD;AACA;IACI,4CAA4C;AAChD;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,yCAAyC;IACzC,+CAA+C;AACnD;AACA;IACI;QACI,UAAU;QACV,WAAW;QACX,kBAAkB;IACtB;AACJ;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,6BAA6B;IAC7B,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,gCAAgC;IAChC,0BAA0B;;AAE9B",sourcesContent:[".right-click-dropdown {\n    position: fixed;\n    z-index: 3;\n    display: grid;\n    background-color: rgb(49, 55, 77);\n    border: 1px solid rgba(255, 255, 255, 0.397);\n    border-radius: 7px;\n    font-size: 1rem;\n    overflow: visible;\n    list-style: none;\n    transform-origin: 0% 0%;\n    animation: menu-expand 200ms ease-out forwards;\n}\n@keyframes menu-expand {\n    0% {\n        scale: 50%;\n        opacity: 0%;\n    }\n    100% {\n        opacity: 100%;\n        scale: 100%;\n    }\n}\n.right-click-dropdown > * {\n    user-select: none;\n    padding: 0.5em 0.85em;\n}\n.right-click-dropdown > *:not(:first-child) {\n    border-top: 1px solid rgba(255, 255, 255, 0.151);\n}\n.right-click-dropdown > *:hover {\n    background-color: rgba(255, 255, 255, 0.062);\n}\n\n.right-click-dropdown > *:active {\n    background-color: rgba(80, 120, 146, 0.589);\n}\n\n.right-click-dropdown.collapse {\n    /* transition: 150ms scale ease-in-out; */\n    animation: menu-collapse 150ms ease-in forwards;\n}\n@keyframes menu-collapse {\n    100% {\n        scale: 50%;\n        opacity: 0%;\n        visibility: hidden;\n    }\n}\n\n.right-click-dropdown::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    --size: 20px;\n    width: var(--size);\n    height: var(--size);\n    top: -10px;\n    left: -10px;\n    border-radius: 10px 10px 0px 0px;\n    transform: rotateZ(-45deg);\n\n}"],sourceRoot:""}]);const s=a},887:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,'.toolTips {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    top: 0%;\n    left: 0%;\n    z-index: 3;\n    pointer-events: none;\n    overflow: hidden;\n}\n\n.toolTips > div {\n    position: absolute;\n\n    --positionX: 50%;\n    --positionY: 50%;\n\n    top: var(--positionY);\n    left: var(--positionX);\n\n    /* border: 1px solid red; */\n}\n\n.toolTips > div > span {\n    position: absolute;\n    z-index: 3;\n    \n    opacity: 0%;\n    transition: 200ms;\n    \n    width: 150px;\n    \n    --tooltipBG: rgba(0, 0, 0, 0.856);\n    \n    background-color: var(--tooltipBG);\n    color: white;\n    text-align: center;\n    padding: 5px 7px;\n    border-radius: 8px;\n    pointer-events: none;\n    \n    /* default positioning */\n    bottom: 100%;\n    left: 50%;\n    --verticalOffset: -15px;\n    translate: -50% var(--verticalOffset);\n}\n\n.toolTips > div.show > span {\n    opacity: 100%;\n    pointer-events: auto;\n}\n\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left) {\n    left: 0%;\n    translate: -8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right) {\n    right: 0%;\n    left: auto;\n    translate: 8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom) {\n    --verticalOffset: 15px;\n    top: 100%;\n    bottom: auto;\n}\n\n.toolTips > div > span::after {\n    content: "";\n    position: absolute;\n    --size: 7px;\n    margin-left: calc(var(--size)*-1);\n    border-width: var(--size);\n    border-style: solid;\n    \n    /* default horizontal positioning */\n    left: 50%;\n    /* default vertical positioning */\n    top: 100%;\n    border-color: var(--tooltipBG) transparent transparent transparent;\n}\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left)::after {\n    left: 15%;\n}\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right)::after {\n    left: 85%;\n}\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom)::after {\n    top: auto;\n    bottom: 100%;\n    border-color: transparent transparent var(--tooltipBG) transparent;\n}',"",{version:3,sources:["webpack://./src/styles/tooltips.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,YAAY;IACZ,WAAW;IACX,OAAO;IACP,QAAQ;IACR,UAAU;IACV,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;;IAElB,gBAAgB;IAChB,gBAAgB;;IAEhB,qBAAqB;IACrB,sBAAsB;;IAEtB,2BAA2B;AAC/B;;AAEA;IACI,kBAAkB;IAClB,UAAU;;IAEV,WAAW;IACX,iBAAiB;;IAEjB,YAAY;;IAEZ,iCAAiC;;IAEjC,kCAAkC;IAClC,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,oBAAoB;;IAEpB,wBAAwB;IACxB,YAAY;IACZ,SAAS;IACT,uBAAuB;IACvB,qCAAqC;AACzC;;AAEA;IACI,aAAa;IACb,oBAAoB;AACxB;;AAEA;IACI,QAAQ;IACR,oCAAoC;AACxC;;AAEA;IACI,SAAS;IACT,UAAU;IACV,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,iCAAiC;IACjC,yBAAyB;IACzB,mBAAmB;;IAEnB,mCAAmC;IACnC,SAAS;IACT,iCAAiC;IACjC,SAAS;IACT,kEAAkE;AACtE;AACA;IACI,SAAS;AACb;AACA;IACI,SAAS;AACb;AACA;IACI,SAAS;IACT,YAAY;IACZ,kEAAkE;AACtE",sourcesContent:['.toolTips {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    top: 0%;\n    left: 0%;\n    z-index: 3;\n    pointer-events: none;\n    overflow: hidden;\n}\n\n.toolTips > div {\n    position: absolute;\n\n    --positionX: 50%;\n    --positionY: 50%;\n\n    top: var(--positionY);\n    left: var(--positionX);\n\n    /* border: 1px solid red; */\n}\n\n.toolTips > div > span {\n    position: absolute;\n    z-index: 3;\n    \n    opacity: 0%;\n    transition: 200ms;\n    \n    width: 150px;\n    \n    --tooltipBG: rgba(0, 0, 0, 0.856);\n    \n    background-color: var(--tooltipBG);\n    color: white;\n    text-align: center;\n    padding: 5px 7px;\n    border-radius: 8px;\n    pointer-events: none;\n    \n    /* default positioning */\n    bottom: 100%;\n    left: 50%;\n    --verticalOffset: -15px;\n    translate: -50% var(--verticalOffset);\n}\n\n.toolTips > div.show > span {\n    opacity: 100%;\n    pointer-events: auto;\n}\n\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left) {\n    left: 0%;\n    translate: -8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right) {\n    right: 0%;\n    left: auto;\n    translate: 8% var(--verticalOffset);\n}\n\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom) {\n    --verticalOffset: 15px;\n    top: 100%;\n    bottom: auto;\n}\n\n.toolTips > div > span::after {\n    content: "";\n    position: absolute;\n    --size: 7px;\n    margin-left: calc(var(--size)*-1);\n    border-width: var(--size);\n    border-style: solid;\n    \n    /* default horizontal positioning */\n    left: 50%;\n    /* default vertical positioning */\n    top: 100%;\n    border-color: var(--tooltipBG) transparent transparent transparent;\n}\n.toolTips > div > :is(body.triple span.triple-left, body.double span.double-left, body.single span.single-left)::after {\n    left: 15%;\n}\n.toolTips > div > :is(body.triple span.triple-right, body.double span.double-right, body.single span.single-right)::after {\n    left: 85%;\n}\n.toolTips > div > :is(body.triple span.triple-bottom, body.double span.double-bottom, body.single span.single-bottom)::after {\n    top: auto;\n    bottom: 100%;\n    border-color: transparent transparent var(--tooltipBG) transparent;\n}'],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<n.length;u++){var c=[].concat(n[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([o]).join("\n")}return[t].join("\n")}},486:function(n,t,e){var r;n=e.nmd(n),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",l=32,u=128,c=1/0,A=9007199254740991,d=NaN,p=4294967295,f=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],h="[object Arguments]",g="[object Array]",m="[object Boolean]",C="[object Date]",v="[object Error]",I="[object Function]",B="[object GeneratorFunction]",b="[object Map]",y="[object Number]",w="[object Object]",k="[object Promise]",x="[object RegExp]",_="[object Set]",E="[object String]",L="[object Symbol]",V="[object WeakMap]",S="[object ArrayBuffer]",j="[object DataView]",z="[object Float32Array]",W="[object Float64Array]",T="[object Int8Array]",D="[object Int16Array]",Y="[object Int32Array]",O="[object Uint8Array]",q="[object Uint8ClampedArray]",Z="[object Uint16Array]",R="[object Uint32Array]",U=/\b__p \+= '';/g,Q=/\b(__p \+=) '' \+/g,N=/(__e\(.*?\)|\b__t\)) \+\n'';/g,P=/&(?:amp|lt|gt|quot|#39);/g,M=/[&<>"']/g,X=RegExp(P.source),$=RegExp(M.source),F=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,H=/<%=([\s\S]+?)%>/g,G=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,K=/^\w*$/,nn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,tn=/[\\^$.*+?()[\]{}|]/g,en=RegExp(tn.source),rn=/^\s+/,on=/\s/,an=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,sn=/\{\n\/\* \[wrapped with (.+)\] \*/,ln=/,? & /,un=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,cn=/[()=,{}\[\]\/\s]/,An=/\\(\\)?/g,dn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,pn=/\w*$/,fn=/^[-+]0x[0-9a-f]+$/i,hn=/^0b[01]+$/i,gn=/^\[object .+?Constructor\]$/,mn=/^0o[0-7]+$/i,Cn=/^(?:0|[1-9]\d*)$/,vn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,In=/($^)/,Bn=/['\n\r\u2028\u2029\\]/g,bn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",yn="a-z\\xdf-\\xf6\\xf8-\\xff",wn="A-Z\\xc0-\\xd6\\xd8-\\xde",kn="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",xn="["+kn+"]",_n="["+bn+"]",En="\\d+",Ln="["+yn+"]",Vn="[^\\ud800-\\udfff"+kn+En+"\\u2700-\\u27bf"+yn+wn+"]",Sn="\\ud83c[\\udffb-\\udfff]",jn="[^\\ud800-\\udfff]",zn="(?:\\ud83c[\\udde6-\\uddff]){2}",Wn="[\\ud800-\\udbff][\\udc00-\\udfff]",Tn="["+wn+"]",Dn="(?:"+Ln+"|"+Vn+")",Yn="(?:"+Tn+"|"+Vn+")",On="(?:['’](?:d|ll|m|re|s|t|ve))?",qn="(?:['’](?:D|LL|M|RE|S|T|VE))?",Zn="(?:"+_n+"|"+Sn+")?",Rn="[\\ufe0e\\ufe0f]?",Un=Rn+Zn+"(?:\\u200d(?:"+[jn,zn,Wn].join("|")+")"+Rn+Zn+")*",Qn="(?:"+["[\\u2700-\\u27bf]",zn,Wn].join("|")+")"+Un,Nn="(?:"+[jn+_n+"?",_n,zn,Wn,"[\\ud800-\\udfff]"].join("|")+")",Pn=RegExp("['’]","g"),Mn=RegExp(_n,"g"),Xn=RegExp(Sn+"(?="+Sn+")|"+Nn+Un,"g"),$n=RegExp([Tn+"?"+Ln+"+"+On+"(?="+[xn,Tn,"$"].join("|")+")",Yn+"+"+qn+"(?="+[xn,Tn+Dn,"$"].join("|")+")",Tn+"?"+Dn+"+"+On,Tn+"+"+qn,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",En,Qn].join("|"),"g"),Fn=RegExp("[\\u200d\\ud800-\\udfff"+bn+"\\ufe0e\\ufe0f]"),Jn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Hn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Gn=-1,Kn={};Kn[z]=Kn[W]=Kn[T]=Kn[D]=Kn[Y]=Kn[O]=Kn[q]=Kn[Z]=Kn[R]=!0,Kn[h]=Kn[g]=Kn[S]=Kn[m]=Kn[j]=Kn[C]=Kn[v]=Kn[I]=Kn[b]=Kn[y]=Kn[w]=Kn[x]=Kn[_]=Kn[E]=Kn[V]=!1;var nt={};nt[h]=nt[g]=nt[S]=nt[j]=nt[m]=nt[C]=nt[z]=nt[W]=nt[T]=nt[D]=nt[Y]=nt[b]=nt[y]=nt[w]=nt[x]=nt[_]=nt[E]=nt[L]=nt[O]=nt[q]=nt[Z]=nt[R]=!0,nt[v]=nt[I]=nt[V]=!1;var tt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},et=parseFloat,rt=parseInt,it="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,ot="object"==typeof self&&self&&self.Object===Object&&self,at=it||ot||Function("return this")(),st=t&&!t.nodeType&&t,lt=st&&n&&!n.nodeType&&n,ut=lt&&lt.exports===st,ct=ut&&it.process,At=function(){try{return lt&&lt.require&&lt.require("util").types||ct&&ct.binding&&ct.binding("util")}catch(n){}}(),dt=At&&At.isArrayBuffer,pt=At&&At.isDate,ft=At&&At.isMap,ht=At&&At.isRegExp,gt=At&&At.isSet,mt=At&&At.isTypedArray;function Ct(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function vt(n,t,e,r){for(var i=-1,o=null==n?0:n.length;++i<o;){var a=n[i];t(r,a,e(a),n)}return r}function It(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function Bt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function bt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function yt(n,t){for(var e=-1,r=null==n?0:n.length,i=0,o=[];++e<r;){var a=n[e];t(a,e,n)&&(o[i++]=a)}return o}function wt(n,t){return!(null==n||!n.length)&&Wt(n,t,0)>-1}function kt(n,t,e){for(var r=-1,i=null==n?0:n.length;++r<i;)if(e(t,n[r]))return!0;return!1}function xt(n,t){for(var e=-1,r=null==n?0:n.length,i=Array(r);++e<r;)i[e]=t(n[e],e,n);return i}function _t(n,t){for(var e=-1,r=t.length,i=n.length;++e<r;)n[i+e]=t[e];return n}function Et(n,t,e,r){var i=-1,o=null==n?0:n.length;for(r&&o&&(e=n[++i]);++i<o;)e=t(e,n[i],i,n);return e}function Lt(n,t,e,r){var i=null==n?0:n.length;for(r&&i&&(e=n[--i]);i--;)e=t(e,n[i],i,n);return e}function Vt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var St=Ot("length");function jt(n,t,e){var r;return e(n,(function(n,e,i){if(t(n,e,i))return r=e,!1})),r}function zt(n,t,e,r){for(var i=n.length,o=e+(r?1:-1);r?o--:++o<i;)if(t(n[o],o,n))return o;return-1}function Wt(n,t,e){return t==t?function(n,t,e){for(var r=e-1,i=n.length;++r<i;)if(n[r]===t)return r;return-1}(n,t,e):zt(n,Dt,e)}function Tt(n,t,e,r){for(var i=e-1,o=n.length;++i<o;)if(r(n[i],t))return i;return-1}function Dt(n){return n!=n}function Yt(n,t){var e=null==n?0:n.length;return e?Rt(n,t)/e:d}function Ot(n){return function(t){return null==t?i:t[n]}}function qt(n){return function(t){return null==n?i:n[t]}}function Zt(n,t,e,r,i){return i(n,(function(n,i,o){e=r?(r=!1,n):t(e,n,i,o)})),e}function Rt(n,t){for(var e,r=-1,o=n.length;++r<o;){var a=t(n[r]);a!==i&&(e=e===i?a:e+a)}return e}function Ut(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Qt(n){return n?n.slice(0,se(n)+1).replace(rn,""):n}function Nt(n){return function(t){return n(t)}}function Pt(n,t){return xt(t,(function(t){return n[t]}))}function Mt(n,t){return n.has(t)}function Xt(n,t){for(var e=-1,r=n.length;++e<r&&Wt(t,n[e],0)>-1;);return e}function $t(n,t){for(var e=n.length;e--&&Wt(t,n[e],0)>-1;);return e}function Ft(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Jt=qt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Ht=qt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Gt(n){return"\\"+tt[n]}function Kt(n){return Fn.test(n)}function ne(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function te(n,t){return function(e){return n(t(e))}}function ee(n,t){for(var e=-1,r=n.length,i=0,o=[];++e<r;){var a=n[e];a!==t&&a!==s||(n[e]=s,o[i++]=e)}return o}function re(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function ie(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function oe(n){return Kt(n)?function(n){for(var t=Xn.lastIndex=0;Xn.test(n);)++t;return t}(n):St(n)}function ae(n){return Kt(n)?function(n){return n.match(Xn)||[]}(n):function(n){return n.split("")}(n)}function se(n){for(var t=n.length;t--&&on.test(n.charAt(t)););return t}var le=qt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ue=function n(t){var e,r=(t=null==t?at:ue.defaults(at.Object(),t,ue.pick(at,Hn))).Array,on=t.Date,bn=t.Error,yn=t.Function,wn=t.Math,kn=t.Object,xn=t.RegExp,_n=t.String,En=t.TypeError,Ln=r.prototype,Vn=yn.prototype,Sn=kn.prototype,jn=t["__core-js_shared__"],zn=Vn.toString,Wn=Sn.hasOwnProperty,Tn=0,Dn=(e=/[^.]+$/.exec(jn&&jn.keys&&jn.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Yn=Sn.toString,On=zn.call(kn),qn=at._,Zn=xn("^"+zn.call(Wn).replace(tn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Rn=ut?t.Buffer:i,Un=t.Symbol,Qn=t.Uint8Array,Nn=Rn?Rn.allocUnsafe:i,Xn=te(kn.getPrototypeOf,kn),Fn=kn.create,tt=Sn.propertyIsEnumerable,it=Ln.splice,ot=Un?Un.isConcatSpreadable:i,st=Un?Un.iterator:i,lt=Un?Un.toStringTag:i,ct=function(){try{var n=uo(kn,"defineProperty");return n({},"",{}),n}catch(n){}}(),At=t.clearTimeout!==at.clearTimeout&&t.clearTimeout,St=on&&on.now!==at.Date.now&&on.now,qt=t.setTimeout!==at.setTimeout&&t.setTimeout,ce=wn.ceil,Ae=wn.floor,de=kn.getOwnPropertySymbols,pe=Rn?Rn.isBuffer:i,fe=t.isFinite,he=Ln.join,ge=te(kn.keys,kn),me=wn.max,Ce=wn.min,ve=on.now,Ie=t.parseInt,Be=wn.random,be=Ln.reverse,ye=uo(t,"DataView"),we=uo(t,"Map"),ke=uo(t,"Promise"),xe=uo(t,"Set"),_e=uo(t,"WeakMap"),Ee=uo(kn,"create"),Le=_e&&new _e,Ve={},Se=qo(ye),je=qo(we),ze=qo(ke),We=qo(xe),Te=qo(_e),De=Un?Un.prototype:i,Ye=De?De.valueOf:i,Oe=De?De.toString:i;function qe(n){if(es(n)&&!Pa(n)&&!(n instanceof Qe)){if(n instanceof Ue)return n;if(Wn.call(n,"__wrapped__"))return Zo(n)}return new Ue(n)}var Ze=function(){function n(){}return function(t){if(!ts(t))return{};if(Fn)return Fn(t);n.prototype=t;var e=new n;return n.prototype=i,e}}();function Re(){}function Ue(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Qe(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Ne(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Pe(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Me(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Xe(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Me;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Pe(n);this.size=t.size}function Fe(n,t){var e=Pa(n),r=!e&&Na(n),i=!e&&!r&&Fa(n),o=!e&&!r&&!i&&cs(n),a=e||r||i||o,s=a?Ut(n.length,_n):[],l=s.length;for(var u in n)!t&&!Wn.call(n,u)||a&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||mo(u,l))||s.push(u);return s}function Je(n){var t=n.length;return t?n[Mr(0,t-1)]:i}function He(n,t){return Wo(_i(n),ar(t,0,n.length))}function Ge(n){return Wo(_i(n))}function Ke(n,t,e){(e!==i&&!Ra(n[t],e)||e===i&&!(t in n))&&ir(n,t,e)}function nr(n,t,e){var r=n[t];Wn.call(n,t)&&Ra(r,e)&&(e!==i||t in n)||ir(n,t,e)}function tr(n,t){for(var e=n.length;e--;)if(Ra(n[e][0],t))return e;return-1}function er(n,t,e,r){return Ar(n,(function(n,i,o){t(r,n,e(n),o)})),r}function rr(n,t){return n&&Ei(t,js(t),n)}function ir(n,t,e){"__proto__"==t&&ct?ct(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function or(n,t){for(var e=-1,o=t.length,a=r(o),s=null==n;++e<o;)a[e]=s?i:_s(n,t[e]);return a}function ar(n,t,e){return n==n&&(e!==i&&(n=n<=e?n:e),t!==i&&(n=n>=t?n:t)),n}function sr(n,t,e,r,o,a){var s,l=1&t,u=2&t,c=4&t;if(e&&(s=o?e(n,r,o,a):e(n)),s!==i)return s;if(!ts(n))return n;var A=Pa(n);if(A){if(s=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&Wn.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!l)return _i(n,s)}else{var d=po(n),p=d==I||d==B;if(Fa(n))return Bi(n,l);if(d==w||d==h||p&&!o){if(s=u||p?{}:ho(n),!l)return u?function(n,t){return Ei(n,Ao(n),t)}(n,function(n,t){return n&&Ei(t,zs(t),n)}(s,n)):function(n,t){return Ei(n,co(n),t)}(n,rr(s,n))}else{if(!nt[d])return o?n:{};s=function(n,t,e){var r,i=n.constructor;switch(t){case S:return bi(n);case m:case C:return new i(+n);case j:return function(n,t){var e=t?bi(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case z:case W:case T:case D:case Y:case O:case q:case Z:case R:return yi(n,e);case b:return new i;case y:case E:return new i(n);case x:return function(n){var t=new n.constructor(n.source,pn.exec(n));return t.lastIndex=n.lastIndex,t}(n);case _:return new i;case L:return r=n,Ye?kn(Ye.call(r)):{}}}(n,d,l)}}a||(a=new $e);var f=a.get(n);if(f)return f;a.set(n,s),ss(n)?n.forEach((function(r){s.add(sr(r,t,e,r,n,a))})):rs(n)&&n.forEach((function(r,i){s.set(i,sr(r,t,e,i,n,a))}));var g=A?i:(c?u?eo:to:u?zs:js)(n);return It(g||n,(function(r,i){g&&(r=n[i=r]),nr(s,i,sr(r,t,e,i,n,a))})),s}function lr(n,t,e){var r=e.length;if(null==n)return!r;for(n=kn(n);r--;){var o=e[r],a=t[o],s=n[o];if(s===i&&!(o in n)||!a(s))return!1}return!0}function ur(n,t,e){if("function"!=typeof n)throw new En(o);return Vo((function(){n.apply(i,e)}),t)}function cr(n,t,e,r){var i=-1,o=wt,a=!0,s=n.length,l=[],u=t.length;if(!s)return l;e&&(t=xt(t,Nt(e))),r?(o=kt,a=!1):t.length>=200&&(o=Mt,a=!1,t=new Xe(t));n:for(;++i<s;){var c=n[i],A=null==e?c:e(c);if(c=r||0!==c?c:0,a&&A==A){for(var d=u;d--;)if(t[d]===A)continue n;l.push(c)}else o(t,A,r)||l.push(c)}return l}qe.templateSettings={escape:F,evaluate:J,interpolate:H,variable:"",imports:{_:qe}},qe.prototype=Re.prototype,qe.prototype.constructor=qe,Ue.prototype=Ze(Re.prototype),Ue.prototype.constructor=Ue,Qe.prototype=Ze(Re.prototype),Qe.prototype.constructor=Qe,Ne.prototype.clear=function(){this.__data__=Ee?Ee(null):{},this.size=0},Ne.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},Ne.prototype.get=function(n){var t=this.__data__;if(Ee){var e=t[n];return e===a?i:e}return Wn.call(t,n)?t[n]:i},Ne.prototype.has=function(n){var t=this.__data__;return Ee?t[n]!==i:Wn.call(t,n)},Ne.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=Ee&&t===i?a:t,this},Pe.prototype.clear=function(){this.__data__=[],this.size=0},Pe.prototype.delete=function(n){var t=this.__data__,e=tr(t,n);return!(e<0||(e==t.length-1?t.pop():it.call(t,e,1),--this.size,0))},Pe.prototype.get=function(n){var t=this.__data__,e=tr(t,n);return e<0?i:t[e][1]},Pe.prototype.has=function(n){return tr(this.__data__,n)>-1},Pe.prototype.set=function(n,t){var e=this.__data__,r=tr(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Me.prototype.clear=function(){this.size=0,this.__data__={hash:new Ne,map:new(we||Pe),string:new Ne}},Me.prototype.delete=function(n){var t=so(this,n).delete(n);return this.size-=t?1:0,t},Me.prototype.get=function(n){return so(this,n).get(n)},Me.prototype.has=function(n){return so(this,n).has(n)},Me.prototype.set=function(n,t){var e=so(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Xe.prototype.add=Xe.prototype.push=function(n){return this.__data__.set(n,a),this},Xe.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Pe,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Pe){var r=e.__data__;if(!we||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Me(r)}return e.set(n,t),this.size=e.size,this};var Ar=Si(vr),dr=Si(Ir,!0);function pr(n,t){var e=!0;return Ar(n,(function(n,r,i){return e=!!t(n,r,i)})),e}function fr(n,t,e){for(var r=-1,o=n.length;++r<o;){var a=n[r],s=t(a);if(null!=s&&(l===i?s==s&&!us(s):e(s,l)))var l=s,u=a}return u}function hr(n,t){var e=[];return Ar(n,(function(n,r,i){t(n,r,i)&&e.push(n)})),e}function gr(n,t,e,r,i){var o=-1,a=n.length;for(e||(e=go),i||(i=[]);++o<a;){var s=n[o];t>0&&e(s)?t>1?gr(s,t-1,e,r,i):_t(i,s):r||(i[i.length]=s)}return i}var mr=ji(),Cr=ji(!0);function vr(n,t){return n&&mr(n,t,js)}function Ir(n,t){return n&&Cr(n,t,js)}function Br(n,t){return yt(t,(function(t){return Ga(n[t])}))}function br(n,t){for(var e=0,r=(t=mi(t,n)).length;null!=n&&e<r;)n=n[Oo(t[e++])];return e&&e==r?n:i}function yr(n,t,e){var r=t(n);return Pa(n)?r:_t(r,e(n))}function wr(n){return null==n?n===i?"[object Undefined]":"[object Null]":lt&&lt in kn(n)?function(n){var t=Wn.call(n,lt),e=n[lt];try{n[lt]=i;var r=!0}catch(n){}var o=Yn.call(n);return r&&(t?n[lt]=e:delete n[lt]),o}(n):function(n){return Yn.call(n)}(n)}function kr(n,t){return n>t}function xr(n,t){return null!=n&&Wn.call(n,t)}function _r(n,t){return null!=n&&t in kn(n)}function Er(n,t,e){for(var o=e?kt:wt,a=n[0].length,s=n.length,l=s,u=r(s),c=1/0,A=[];l--;){var d=n[l];l&&t&&(d=xt(d,Nt(t))),c=Ce(d.length,c),u[l]=!e&&(t||a>=120&&d.length>=120)?new Xe(l&&d):i}d=n[0];var p=-1,f=u[0];n:for(;++p<a&&A.length<c;){var h=d[p],g=t?t(h):h;if(h=e||0!==h?h:0,!(f?Mt(f,g):o(A,g,e))){for(l=s;--l;){var m=u[l];if(!(m?Mt(m,g):o(n[l],g,e)))continue n}f&&f.push(g),A.push(h)}}return A}function Lr(n,t,e){var r=null==(n=xo(n,t=mi(t,n)))?n:n[Oo(Ho(t))];return null==r?i:Ct(r,n,e)}function Vr(n){return es(n)&&wr(n)==h}function Sr(n,t,e,r,o){return n===t||(null==n||null==t||!es(n)&&!es(t)?n!=n&&t!=t:function(n,t,e,r,o,a){var s=Pa(n),l=Pa(t),u=s?g:po(n),c=l?g:po(t),A=(u=u==h?w:u)==w,d=(c=c==h?w:c)==w,p=u==c;if(p&&Fa(n)){if(!Fa(t))return!1;s=!0,A=!1}if(p&&!A)return a||(a=new $e),s||cs(n)?Ki(n,t,e,r,o,a):function(n,t,e,r,i,o,a){switch(e){case j:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case S:return!(n.byteLength!=t.byteLength||!o(new Qn(n),new Qn(t)));case m:case C:case y:return Ra(+n,+t);case v:return n.name==t.name&&n.message==t.message;case x:case E:return n==t+"";case b:var s=ne;case _:var l=1&r;if(s||(s=re),n.size!=t.size&&!l)return!1;var u=a.get(n);if(u)return u==t;r|=2,a.set(n,t);var c=Ki(s(n),s(t),r,i,o,a);return a.delete(n),c;case L:if(Ye)return Ye.call(n)==Ye.call(t)}return!1}(n,t,u,e,r,o,a);if(!(1&e)){var f=A&&Wn.call(n,"__wrapped__"),I=d&&Wn.call(t,"__wrapped__");if(f||I){var B=f?n.value():n,k=I?t.value():t;return a||(a=new $e),o(B,k,e,r,a)}}return!!p&&(a||(a=new $e),function(n,t,e,r,o,a){var s=1&e,l=to(n),u=l.length;if(u!=to(t).length&&!s)return!1;for(var c=u;c--;){var A=l[c];if(!(s?A in t:Wn.call(t,A)))return!1}var d=a.get(n),p=a.get(t);if(d&&p)return d==t&&p==n;var f=!0;a.set(n,t),a.set(t,n);for(var h=s;++c<u;){var g=n[A=l[c]],m=t[A];if(r)var C=s?r(m,g,A,t,n,a):r(g,m,A,n,t,a);if(!(C===i?g===m||o(g,m,e,r,a):C)){f=!1;break}h||(h="constructor"==A)}if(f&&!h){var v=n.constructor,I=t.constructor;v==I||!("constructor"in n)||!("constructor"in t)||"function"==typeof v&&v instanceof v&&"function"==typeof I&&I instanceof I||(f=!1)}return a.delete(n),a.delete(t),f}(n,t,e,r,o,a))}(n,t,e,r,Sr,o))}function jr(n,t,e,r){var o=e.length,a=o,s=!r;if(null==n)return!a;for(n=kn(n);o--;){var l=e[o];if(s&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++o<a;){var u=(l=e[o])[0],c=n[u],A=l[1];if(s&&l[2]){if(c===i&&!(u in n))return!1}else{var d=new $e;if(r)var p=r(c,A,u,n,t,d);if(!(p===i?Sr(A,c,3,r,d):p))return!1}}return!0}function zr(n){return!(!ts(n)||(t=n,Dn&&Dn in t))&&(Ga(n)?Zn:gn).test(qo(n));var t}function Wr(n){return"function"==typeof n?n:null==n?il:"object"==typeof n?Pa(n)?qr(n[0],n[1]):Or(n):pl(n)}function Tr(n){if(!bo(n))return ge(n);var t=[];for(var e in kn(n))Wn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function Dr(n,t){return n<t}function Yr(n,t){var e=-1,i=Xa(n)?r(n.length):[];return Ar(n,(function(n,r,o){i[++e]=t(n,r,o)})),i}function Or(n){var t=lo(n);return 1==t.length&&t[0][2]?wo(t[0][0],t[0][1]):function(e){return e===n||jr(e,n,t)}}function qr(n,t){return vo(n)&&yo(t)?wo(Oo(n),t):function(e){var r=_s(e,n);return r===i&&r===t?Es(e,n):Sr(t,r,3)}}function Zr(n,t,e,r,o){n!==t&&mr(t,(function(a,s){if(o||(o=new $e),ts(a))!function(n,t,e,r,o,a,s){var l=Eo(n,e),u=Eo(t,e),c=s.get(u);if(c)Ke(n,e,c);else{var A=a?a(l,u,e+"",n,t,s):i,d=A===i;if(d){var p=Pa(u),f=!p&&Fa(u),h=!p&&!f&&cs(u);A=u,p||f||h?Pa(l)?A=l:$a(l)?A=_i(l):f?(d=!1,A=Bi(u,!0)):h?(d=!1,A=yi(u,!0)):A=[]:os(u)||Na(u)?(A=l,Na(l)?A=Cs(l):ts(l)&&!Ga(l)||(A=ho(u))):d=!1}d&&(s.set(u,A),o(A,u,r,a,s),s.delete(u)),Ke(n,e,A)}}(n,t,s,e,Zr,r,o);else{var l=r?r(Eo(n,s),a,s+"",n,t,o):i;l===i&&(l=a),Ke(n,s,l)}}),zs)}function Rr(n,t){var e=n.length;if(e)return mo(t+=t<0?e:0,e)?n[t]:i}function Ur(n,t,e){t=t.length?xt(t,(function(n){return Pa(n)?function(t){return br(t,1===n.length?n[0]:n)}:n})):[il];var r=-1;t=xt(t,Nt(ao()));var i=Yr(n,(function(n,e,i){var o=xt(t,(function(t){return t(n)}));return{criteria:o,index:++r,value:n}}));return function(n,t){var r=n.length;for(n.sort((function(n,t){return function(n,t,e){for(var r=-1,i=n.criteria,o=t.criteria,a=i.length,s=e.length;++r<a;){var l=wi(i[r],o[r]);if(l)return r>=s?l:l*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}));r--;)n[r]=n[r].value;return n}(i)}function Qr(n,t,e){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=br(n,a);e(s,a)&&Hr(o,mi(a,n),s)}return o}function Nr(n,t,e,r){var i=r?Tt:Wt,o=-1,a=t.length,s=n;for(n===t&&(t=_i(t)),e&&(s=xt(n,Nt(e)));++o<a;)for(var l=0,u=t[o],c=e?e(u):u;(l=i(s,c,l,r))>-1;)s!==n&&it.call(s,l,1),it.call(n,l,1);return n}function Pr(n,t){for(var e=n?t.length:0,r=e-1;e--;){var i=t[e];if(e==r||i!==o){var o=i;mo(i)?it.call(n,i,1):ui(n,i)}}return n}function Mr(n,t){return n+Ae(Be()*(t-n+1))}function Xr(n,t){var e="";if(!n||t<1||t>A)return e;do{t%2&&(e+=n),(t=Ae(t/2))&&(n+=n)}while(t);return e}function $r(n,t){return So(ko(n,t,il),n+"")}function Fr(n){return Je(Rs(n))}function Jr(n,t){var e=Rs(n);return Wo(e,ar(t,0,e.length))}function Hr(n,t,e,r){if(!ts(n))return n;for(var o=-1,a=(t=mi(t,n)).length,s=a-1,l=n;null!=l&&++o<a;){var u=Oo(t[o]),c=e;if("__proto__"===u||"constructor"===u||"prototype"===u)return n;if(o!=s){var A=l[u];(c=r?r(A,u,l):i)===i&&(c=ts(A)?A:mo(t[o+1])?[]:{})}nr(l,u,c),l=l[u]}return n}var Gr=Le?function(n,t){return Le.set(n,t),n}:il,Kr=ct?function(n,t){return ct(n,"toString",{configurable:!0,enumerable:!1,value:tl(t),writable:!0})}:il;function ni(n){return Wo(Rs(n))}function ti(n,t,e){var i=-1,o=n.length;t<0&&(t=-t>o?0:o+t),(e=e>o?o:e)<0&&(e+=o),o=t>e?0:e-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=n[i+t];return a}function ei(n,t){var e;return Ar(n,(function(n,r,i){return!(e=t(n,r,i))})),!!e}function ri(n,t,e){var r=0,i=null==n?r:n.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=n[o];null!==a&&!us(a)&&(e?a<=t:a<t)?r=o+1:i=o}return i}return ii(n,t,il,e)}function ii(n,t,e,r){var o=0,a=null==n?0:n.length;if(0===a)return 0;for(var s=(t=e(t))!=t,l=null===t,u=us(t),c=t===i;o<a;){var A=Ae((o+a)/2),d=e(n[A]),p=d!==i,f=null===d,h=d==d,g=us(d);if(s)var m=r||h;else m=c?h&&(r||p):l?h&&p&&(r||!f):u?h&&p&&!f&&(r||!g):!f&&!g&&(r?d<=t:d<t);m?o=A+1:a=A}return Ce(a,4294967294)}function oi(n,t){for(var e=-1,r=n.length,i=0,o=[];++e<r;){var a=n[e],s=t?t(a):a;if(!e||!Ra(s,l)){var l=s;o[i++]=0===a?0:a}}return o}function ai(n){return"number"==typeof n?n:us(n)?d:+n}function si(n){if("string"==typeof n)return n;if(Pa(n))return xt(n,si)+"";if(us(n))return Oe?Oe.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function li(n,t,e){var r=-1,i=wt,o=n.length,a=!0,s=[],l=s;if(e)a=!1,i=kt;else if(o>=200){var u=t?null:Xi(n);if(u)return re(u);a=!1,i=Mt,l=new Xe}else l=t?[]:s;n:for(;++r<o;){var c=n[r],A=t?t(c):c;if(c=e||0!==c?c:0,a&&A==A){for(var d=l.length;d--;)if(l[d]===A)continue n;t&&l.push(A),s.push(c)}else i(l,A,e)||(l!==s&&l.push(A),s.push(c))}return s}function ui(n,t){return null==(n=xo(n,t=mi(t,n)))||delete n[Oo(Ho(t))]}function ci(n,t,e,r){return Hr(n,t,e(br(n,t)),r)}function Ai(n,t,e,r){for(var i=n.length,o=r?i:-1;(r?o--:++o<i)&&t(n[o],o,n););return e?ti(n,r?0:o,r?o+1:i):ti(n,r?o+1:0,r?i:o)}function di(n,t){var e=n;return e instanceof Qe&&(e=e.value()),Et(t,(function(n,t){return t.func.apply(t.thisArg,_t([n],t.args))}),e)}function pi(n,t,e){var i=n.length;if(i<2)return i?li(n[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=n[o],l=-1;++l<i;)l!=o&&(a[o]=cr(a[o]||s,n[l],t,e));return li(gr(a,1),t,e)}function fi(n,t,e){for(var r=-1,o=n.length,a=t.length,s={};++r<o;){var l=r<a?t[r]:i;e(s,n[r],l)}return s}function hi(n){return $a(n)?n:[]}function gi(n){return"function"==typeof n?n:il}function mi(n,t){return Pa(n)?n:vo(n,t)?[n]:Yo(vs(n))}var Ci=$r;function vi(n,t,e){var r=n.length;return e=e===i?r:e,!t&&e>=r?n:ti(n,t,e)}var Ii=At||function(n){return at.clearTimeout(n)};function Bi(n,t){if(t)return n.slice();var e=n.length,r=Nn?Nn(e):new n.constructor(e);return n.copy(r),r}function bi(n){var t=new n.constructor(n.byteLength);return new Qn(t).set(new Qn(n)),t}function yi(n,t){var e=t?bi(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function wi(n,t){if(n!==t){var e=n!==i,r=null===n,o=n==n,a=us(n),s=t!==i,l=null===t,u=t==t,c=us(t);if(!l&&!c&&!a&&n>t||a&&s&&u&&!l&&!c||r&&s&&u||!e&&u||!o)return 1;if(!r&&!a&&!c&&n<t||c&&e&&o&&!r&&!a||l&&e&&o||!s&&o||!u)return-1}return 0}function ki(n,t,e,i){for(var o=-1,a=n.length,s=e.length,l=-1,u=t.length,c=me(a-s,0),A=r(u+c),d=!i;++l<u;)A[l]=t[l];for(;++o<s;)(d||o<a)&&(A[e[o]]=n[o]);for(;c--;)A[l++]=n[o++];return A}function xi(n,t,e,i){for(var o=-1,a=n.length,s=-1,l=e.length,u=-1,c=t.length,A=me(a-l,0),d=r(A+c),p=!i;++o<A;)d[o]=n[o];for(var f=o;++u<c;)d[f+u]=t[u];for(;++s<l;)(p||o<a)&&(d[f+e[s]]=n[o++]);return d}function _i(n,t){var e=-1,i=n.length;for(t||(t=r(i));++e<i;)t[e]=n[e];return t}function Ei(n,t,e,r){var o=!e;e||(e={});for(var a=-1,s=t.length;++a<s;){var l=t[a],u=r?r(e[l],n[l],l,e,n):i;u===i&&(u=n[l]),o?ir(e,l,u):nr(e,l,u)}return e}function Li(n,t){return function(e,r){var i=Pa(e)?vt:er,o=t?t():{};return i(e,n,ao(r,2),o)}}function Vi(n){return $r((function(t,e){var r=-1,o=e.length,a=o>1?e[o-1]:i,s=o>2?e[2]:i;for(a=n.length>3&&"function"==typeof a?(o--,a):i,s&&Co(e[0],e[1],s)&&(a=o<3?i:a,o=1),t=kn(t);++r<o;){var l=e[r];l&&n(t,l,r,a)}return t}))}function Si(n,t){return function(e,r){if(null==e)return e;if(!Xa(e))return n(e,r);for(var i=e.length,o=t?i:-1,a=kn(e);(t?o--:++o<i)&&!1!==r(a[o],o,a););return e}}function ji(n){return function(t,e,r){for(var i=-1,o=kn(t),a=r(t),s=a.length;s--;){var l=a[n?s:++i];if(!1===e(o[l],l,o))break}return t}}function zi(n){return function(t){var e=Kt(t=vs(t))?ae(t):i,r=e?e[0]:t.charAt(0),o=e?vi(e,1).join(""):t.slice(1);return r[n]()+o}}function Wi(n){return function(t){return Et(Gs(Ns(t).replace(Pn,"")),n,"")}}function Ti(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=Ze(n.prototype),r=n.apply(e,t);return ts(r)?r:e}}function Di(n){return function(t,e,r){var o=kn(t);if(!Xa(t)){var a=ao(e,3);t=js(t),e=function(n){return a(o[n],n,o)}}var s=n(t,e,r);return s>-1?o[a?t[s]:s]:i}}function Yi(n){return no((function(t){var e=t.length,r=e,a=Ue.prototype.thru;for(n&&t.reverse();r--;){var s=t[r];if("function"!=typeof s)throw new En(o);if(a&&!l&&"wrapper"==io(s))var l=new Ue([],!0)}for(r=l?r:e;++r<e;){var u=io(s=t[r]),c="wrapper"==u?ro(s):i;l=c&&Io(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?l[io(c[0])].apply(l,c[3]):1==s.length&&Io(s)?l[u]():l.thru(s)}return function(){var n=arguments,r=n[0];if(l&&1==n.length&&Pa(r))return l.plant(r).value();for(var i=0,o=e?t[i].apply(this,n):r;++i<e;)o=t[i].call(this,o);return o}}))}function Oi(n,t,e,o,a,s,l,c,A,d){var p=t&u,f=1&t,h=2&t,g=24&t,m=512&t,C=h?i:Ti(n);return function i(){for(var u=arguments.length,v=r(u),I=u;I--;)v[I]=arguments[I];if(g)var B=oo(i),b=Ft(v,B);if(o&&(v=ki(v,o,a,g)),s&&(v=xi(v,s,l,g)),u-=b,g&&u<d){var y=ee(v,B);return Pi(n,t,Oi,i.placeholder,e,v,y,c,A,d-u)}var w=f?e:this,k=h?w[n]:n;return u=v.length,c?v=_o(v,c):m&&u>1&&v.reverse(),p&&A<u&&(v.length=A),this&&this!==at&&this instanceof i&&(k=C||Ti(k)),k.apply(w,v)}}function qi(n,t){return function(e,r){return function(n,t,e,r){return vr(n,(function(n,i,o){t(r,e(n),i,o)})),r}(e,n,t(r),{})}}function Zi(n,t){return function(e,r){var o;if(e===i&&r===i)return t;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=si(e),r=si(r)):(e=ai(e),r=ai(r)),o=n(e,r)}return o}}function Ri(n){return no((function(t){return t=xt(t,Nt(ao())),$r((function(e){var r=this;return n(t,(function(n){return Ct(n,r,e)}))}))}))}function Ui(n,t){var e=(t=t===i?" ":si(t)).length;if(e<2)return e?Xr(t,n):t;var r=Xr(t,ce(n/oe(t)));return Kt(t)?vi(ae(r),0,n).join(""):r.slice(0,n)}function Qi(n){return function(t,e,o){return o&&"number"!=typeof o&&Co(t,e,o)&&(e=o=i),t=fs(t),e===i?(e=t,t=0):e=fs(e),function(n,t,e,i){for(var o=-1,a=me(ce((t-n)/(e||1)),0),s=r(a);a--;)s[i?a:++o]=n,n+=e;return s}(t,e,o=o===i?t<e?1:-1:fs(o),n)}}function Ni(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=ms(t),e=ms(e)),n(t,e)}}function Pi(n,t,e,r,o,a,s,u,c,A){var d=8&t;t|=d?l:64,4&(t&=~(d?64:l))||(t&=-4);var p=[n,t,o,d?a:i,d?s:i,d?i:a,d?i:s,u,c,A],f=e.apply(i,p);return Io(n)&&Lo(f,p),f.placeholder=r,jo(f,n,t)}function Mi(n){var t=wn[n];return function(n,e){if(n=ms(n),(e=null==e?0:Ce(hs(e),292))&&fe(n)){var r=(vs(n)+"e").split("e");return+((r=(vs(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var Xi=xe&&1/re(new xe([,-0]))[1]==c?function(n){return new xe(n)}:ul;function $i(n){return function(t){var e=po(t);return e==b?ne(t):e==_?ie(t):function(n,t){return xt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Fi(n,t,e,a,c,A,d,p){var f=2&t;if(!f&&"function"!=typeof n)throw new En(o);var h=a?a.length:0;if(h||(t&=-97,a=c=i),d=d===i?d:me(hs(d),0),p=p===i?p:hs(p),h-=c?c.length:0,64&t){var g=a,m=c;a=c=i}var C=f?i:ro(n),v=[n,t,e,a,c,g,m,A,d,p];if(C&&function(n,t){var e=n[1],r=t[1],i=e|r,o=i<131,a=r==u&&8==e||r==u&&256==e&&n[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==e;if(!o&&!a)return n;1&r&&(n[2]=t[2],i|=1&e?0:4);var l=t[3];if(l){var c=n[3];n[3]=c?ki(c,l,t[4]):l,n[4]=c?ee(n[3],s):t[4]}(l=t[5])&&(c=n[5],n[5]=c?xi(c,l,t[6]):l,n[6]=c?ee(n[5],s):t[6]),(l=t[7])&&(n[7]=l),r&u&&(n[8]=null==n[8]?t[8]:Ce(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=i}(v,C),n=v[0],t=v[1],e=v[2],a=v[3],c=v[4],!(p=v[9]=v[9]===i?f?0:n.length:me(v[9]-h,0))&&24&t&&(t&=-25),t&&1!=t)I=8==t||16==t?function(n,t,e){var o=Ti(n);return function a(){for(var s=arguments.length,l=r(s),u=s,c=oo(a);u--;)l[u]=arguments[u];var A=s<3&&l[0]!==c&&l[s-1]!==c?[]:ee(l,c);return(s-=A.length)<e?Pi(n,t,Oi,a.placeholder,i,l,A,i,i,e-s):Ct(this&&this!==at&&this instanceof a?o:n,this,l)}}(n,t,p):t!=l&&33!=t||c.length?Oi.apply(i,v):function(n,t,e,i){var o=1&t,a=Ti(n);return function t(){for(var s=-1,l=arguments.length,u=-1,c=i.length,A=r(c+l),d=this&&this!==at&&this instanceof t?a:n;++u<c;)A[u]=i[u];for(;l--;)A[u++]=arguments[++s];return Ct(d,o?e:this,A)}}(n,t,e,a);else var I=function(n,t,e){var r=1&t,i=Ti(n);return function t(){return(this&&this!==at&&this instanceof t?i:n).apply(r?e:this,arguments)}}(n,t,e);return jo((C?Gr:Lo)(I,v),n,t)}function Ji(n,t,e,r){return n===i||Ra(n,Sn[e])&&!Wn.call(r,e)?t:n}function Hi(n,t,e,r,o,a){return ts(n)&&ts(t)&&(a.set(t,n),Zr(n,t,i,Hi,a),a.delete(t)),n}function Gi(n){return os(n)?i:n}function Ki(n,t,e,r,o,a){var s=1&e,l=n.length,u=t.length;if(l!=u&&!(s&&u>l))return!1;var c=a.get(n),A=a.get(t);if(c&&A)return c==t&&A==n;var d=-1,p=!0,f=2&e?new Xe:i;for(a.set(n,t),a.set(t,n);++d<l;){var h=n[d],g=t[d];if(r)var m=s?r(g,h,d,t,n,a):r(h,g,d,n,t,a);if(m!==i){if(m)continue;p=!1;break}if(f){if(!Vt(t,(function(n,t){if(!Mt(f,t)&&(h===n||o(h,n,e,r,a)))return f.push(t)}))){p=!1;break}}else if(h!==g&&!o(h,g,e,r,a)){p=!1;break}}return a.delete(n),a.delete(t),p}function no(n){return So(ko(n,i,Mo),n+"")}function to(n){return yr(n,js,co)}function eo(n){return yr(n,zs,Ao)}var ro=Le?function(n){return Le.get(n)}:ul;function io(n){for(var t=n.name+"",e=Ve[t],r=Wn.call(Ve,t)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==n)return i.name}return t}function oo(n){return(Wn.call(qe,"placeholder")?qe:n).placeholder}function ao(){var n=qe.iteratee||ol;return n=n===ol?Wr:n,arguments.length?n(arguments[0],arguments[1]):n}function so(n,t){var e,r,i=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof t?"string":"hash"]:i.map}function lo(n){for(var t=js(n),e=t.length;e--;){var r=t[e],i=n[r];t[e]=[r,i,yo(i)]}return t}function uo(n,t){var e=function(n,t){return null==n?i:n[t]}(n,t);return zr(e)?e:i}var co=de?function(n){return null==n?[]:(n=kn(n),yt(de(n),(function(t){return tt.call(n,t)})))}:gl,Ao=de?function(n){for(var t=[];n;)_t(t,co(n)),n=Xn(n);return t}:gl,po=wr;function fo(n,t,e){for(var r=-1,i=(t=mi(t,n)).length,o=!1;++r<i;){var a=Oo(t[r]);if(!(o=null!=n&&e(n,a)))break;n=n[a]}return o||++r!=i?o:!!(i=null==n?0:n.length)&&ns(i)&&mo(a,i)&&(Pa(n)||Na(n))}function ho(n){return"function"!=typeof n.constructor||bo(n)?{}:Ze(Xn(n))}function go(n){return Pa(n)||Na(n)||!!(ot&&n&&n[ot])}function mo(n,t){var e=typeof n;return!!(t=null==t?A:t)&&("number"==e||"symbol"!=e&&Cn.test(n))&&n>-1&&n%1==0&&n<t}function Co(n,t,e){if(!ts(e))return!1;var r=typeof t;return!!("number"==r?Xa(e)&&mo(t,e.length):"string"==r&&t in e)&&Ra(e[t],n)}function vo(n,t){if(Pa(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!us(n))||K.test(n)||!G.test(n)||null!=t&&n in kn(t)}function Io(n){var t=io(n),e=qe[t];if("function"!=typeof e||!(t in Qe.prototype))return!1;if(n===e)return!0;var r=ro(e);return!!r&&n===r[0]}(ye&&po(new ye(new ArrayBuffer(1)))!=j||we&&po(new we)!=b||ke&&po(ke.resolve())!=k||xe&&po(new xe)!=_||_e&&po(new _e)!=V)&&(po=function(n){var t=wr(n),e=t==w?n.constructor:i,r=e?qo(e):"";if(r)switch(r){case Se:return j;case je:return b;case ze:return k;case We:return _;case Te:return V}return t});var Bo=jn?Ga:ml;function bo(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||Sn)}function yo(n){return n==n&&!ts(n)}function wo(n,t){return function(e){return null!=e&&e[n]===t&&(t!==i||n in kn(e))}}function ko(n,t,e){return t=me(t===i?n.length-1:t,0),function(){for(var i=arguments,o=-1,a=me(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var l=r(t+1);++o<t;)l[o]=i[o];return l[t]=e(s),Ct(n,this,l)}}function xo(n,t){return t.length<2?n:br(n,ti(t,0,-1))}function _o(n,t){for(var e=n.length,r=Ce(t.length,e),o=_i(n);r--;){var a=t[r];n[r]=mo(a,e)?o[a]:i}return n}function Eo(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var Lo=zo(Gr),Vo=qt||function(n,t){return at.setTimeout(n,t)},So=zo(Kr);function jo(n,t,e){var r=t+"";return So(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(an,"{\n/* [wrapped with "+t+"] */\n")}(r,function(n,t){return It(f,(function(e){var r="_."+e[0];t&e[1]&&!wt(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(sn);return t?t[1].split(ln):[]}(r),e)))}function zo(n){var t=0,e=0;return function(){var r=ve(),o=16-(r-e);if(e=r,o>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(i,arguments)}}function Wo(n,t){var e=-1,r=n.length,o=r-1;for(t=t===i?r:t;++e<t;){var a=Mr(e,o),s=n[a];n[a]=n[e],n[e]=s}return n.length=t,n}var To,Do,Yo=(To=Ta((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(nn,(function(n,e,r,i){t.push(r?i.replace(An,"$1"):e||n)})),t}),(function(n){return 500===Do.size&&Do.clear(),n})),Do=To.cache,To);function Oo(n){if("string"==typeof n||us(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function qo(n){if(null!=n){try{return zn.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Zo(n){if(n instanceof Qe)return n.clone();var t=new Ue(n.__wrapped__,n.__chain__);return t.__actions__=_i(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ro=$r((function(n,t){return $a(n)?cr(n,gr(t,1,$a,!0)):[]})),Uo=$r((function(n,t){var e=Ho(t);return $a(e)&&(e=i),$a(n)?cr(n,gr(t,1,$a,!0),ao(e,2)):[]})),Qo=$r((function(n,t){var e=Ho(t);return $a(e)&&(e=i),$a(n)?cr(n,gr(t,1,$a,!0),i,e):[]}));function No(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var i=null==e?0:hs(e);return i<0&&(i=me(r+i,0)),zt(n,ao(t,3),i)}function Po(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r-1;return e!==i&&(o=hs(e),o=e<0?me(r+o,0):Ce(o,r-1)),zt(n,ao(t,3),o,!0)}function Mo(n){return null!=n&&n.length?gr(n,1):[]}function Xo(n){return n&&n.length?n[0]:i}var $o=$r((function(n){var t=xt(n,hi);return t.length&&t[0]===n[0]?Er(t):[]})),Fo=$r((function(n){var t=Ho(n),e=xt(n,hi);return t===Ho(e)?t=i:e.pop(),e.length&&e[0]===n[0]?Er(e,ao(t,2)):[]})),Jo=$r((function(n){var t=Ho(n),e=xt(n,hi);return(t="function"==typeof t?t:i)&&e.pop(),e.length&&e[0]===n[0]?Er(e,i,t):[]}));function Ho(n){var t=null==n?0:n.length;return t?n[t-1]:i}var Go=$r(Ko);function Ko(n,t){return n&&n.length&&t&&t.length?Nr(n,t):n}var na=no((function(n,t){var e=null==n?0:n.length,r=or(n,t);return Pr(n,xt(t,(function(n){return mo(n,e)?+n:n})).sort(wi)),r}));function ta(n){return null==n?n:be.call(n)}var ea=$r((function(n){return li(gr(n,1,$a,!0))})),ra=$r((function(n){var t=Ho(n);return $a(t)&&(t=i),li(gr(n,1,$a,!0),ao(t,2))})),ia=$r((function(n){var t=Ho(n);return t="function"==typeof t?t:i,li(gr(n,1,$a,!0),i,t)}));function oa(n){if(!n||!n.length)return[];var t=0;return n=yt(n,(function(n){if($a(n))return t=me(n.length,t),!0})),Ut(t,(function(t){return xt(n,Ot(t))}))}function aa(n,t){if(!n||!n.length)return[];var e=oa(n);return null==t?e:xt(e,(function(n){return Ct(t,i,n)}))}var sa=$r((function(n,t){return $a(n)?cr(n,t):[]})),la=$r((function(n){return pi(yt(n,$a))})),ua=$r((function(n){var t=Ho(n);return $a(t)&&(t=i),pi(yt(n,$a),ao(t,2))})),ca=$r((function(n){var t=Ho(n);return t="function"==typeof t?t:i,pi(yt(n,$a),i,t)})),Aa=$r(oa),da=$r((function(n){var t=n.length,e=t>1?n[t-1]:i;return e="function"==typeof e?(n.pop(),e):i,aa(n,e)}));function pa(n){var t=qe(n);return t.__chain__=!0,t}function fa(n,t){return t(n)}var ha=no((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,o=function(t){return or(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Qe&&mo(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:fa,args:[o],thisArg:i}),new Ue(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(i),n}))):this.thru(o)})),ga=Li((function(n,t,e){Wn.call(n,e)?++n[e]:ir(n,e,1)})),ma=Di(No),Ca=Di(Po);function va(n,t){return(Pa(n)?It:Ar)(n,ao(t,3))}function Ia(n,t){return(Pa(n)?Bt:dr)(n,ao(t,3))}var Ba=Li((function(n,t,e){Wn.call(n,e)?n[e].push(t):ir(n,e,[t])})),ba=$r((function(n,t,e){var i=-1,o="function"==typeof t,a=Xa(n)?r(n.length):[];return Ar(n,(function(n){a[++i]=o?Ct(t,n,e):Lr(n,t,e)})),a})),ya=Li((function(n,t,e){ir(n,e,t)}));function wa(n,t){return(Pa(n)?xt:Yr)(n,ao(t,3))}var ka=Li((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]})),xa=$r((function(n,t){if(null==n)return[];var e=t.length;return e>1&&Co(n,t[0],t[1])?t=[]:e>2&&Co(t[0],t[1],t[2])&&(t=[t[0]]),Ur(n,gr(t,1),[])})),_a=St||function(){return at.Date.now()};function Ea(n,t,e){return t=e?i:t,t=n&&null==t?n.length:t,Fi(n,u,i,i,i,i,t)}function La(n,t){var e;if("function"!=typeof t)throw new En(o);return n=hs(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=i),e}}var Va=$r((function(n,t,e){var r=1;if(e.length){var i=ee(e,oo(Va));r|=l}return Fi(n,r,t,e,i)})),Sa=$r((function(n,t,e){var r=3;if(e.length){var i=ee(e,oo(Sa));r|=l}return Fi(t,r,n,e,i)}));function ja(n,t,e){var r,a,s,l,u,c,A=0,d=!1,p=!1,f=!0;if("function"!=typeof n)throw new En(o);function h(t){var e=r,o=a;return r=a=i,A=t,l=n.apply(o,e)}function g(n){return A=n,u=Vo(C,t),d?h(n):l}function m(n){var e=n-c;return c===i||e>=t||e<0||p&&n-A>=s}function C(){var n=_a();if(m(n))return v(n);u=Vo(C,function(n){var e=t-(n-c);return p?Ce(e,s-(n-A)):e}(n))}function v(n){return u=i,f&&r?h(n):(r=a=i,l)}function I(){var n=_a(),e=m(n);if(r=arguments,a=this,c=n,e){if(u===i)return g(c);if(p)return Ii(u),u=Vo(C,t),h(c)}return u===i&&(u=Vo(C,t)),l}return t=ms(t)||0,ts(e)&&(d=!!e.leading,s=(p="maxWait"in e)?me(ms(e.maxWait)||0,t):s,f="trailing"in e?!!e.trailing:f),I.cancel=function(){u!==i&&Ii(u),A=0,r=c=a=u=i},I.flush=function(){return u===i?l:v(_a())},I}var za=$r((function(n,t){return ur(n,1,t)})),Wa=$r((function(n,t,e){return ur(n,ms(t)||0,e)}));function Ta(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new En(o);var e=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var a=n.apply(this,r);return e.cache=o.set(i,a)||o,a};return e.cache=new(Ta.Cache||Me),e}function Da(n){if("function"!=typeof n)throw new En(o);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}Ta.Cache=Me;var Ya=Ci((function(n,t){var e=(t=1==t.length&&Pa(t[0])?xt(t[0],Nt(ao())):xt(gr(t,1),Nt(ao()))).length;return $r((function(r){for(var i=-1,o=Ce(r.length,e);++i<o;)r[i]=t[i].call(this,r[i]);return Ct(n,this,r)}))})),Oa=$r((function(n,t){var e=ee(t,oo(Oa));return Fi(n,l,i,t,e)})),qa=$r((function(n,t){var e=ee(t,oo(qa));return Fi(n,64,i,t,e)})),Za=no((function(n,t){return Fi(n,256,i,i,i,t)}));function Ra(n,t){return n===t||n!=n&&t!=t}var Ua=Ni(kr),Qa=Ni((function(n,t){return n>=t})),Na=Vr(function(){return arguments}())?Vr:function(n){return es(n)&&Wn.call(n,"callee")&&!tt.call(n,"callee")},Pa=r.isArray,Ma=dt?Nt(dt):function(n){return es(n)&&wr(n)==S};function Xa(n){return null!=n&&ns(n.length)&&!Ga(n)}function $a(n){return es(n)&&Xa(n)}var Fa=pe||ml,Ja=pt?Nt(pt):function(n){return es(n)&&wr(n)==C};function Ha(n){if(!es(n))return!1;var t=wr(n);return t==v||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!os(n)}function Ga(n){if(!ts(n))return!1;var t=wr(n);return t==I||t==B||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ka(n){return"number"==typeof n&&n==hs(n)}function ns(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=A}function ts(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function es(n){return null!=n&&"object"==typeof n}var rs=ft?Nt(ft):function(n){return es(n)&&po(n)==b};function is(n){return"number"==typeof n||es(n)&&wr(n)==y}function os(n){if(!es(n)||wr(n)!=w)return!1;var t=Xn(n);if(null===t)return!0;var e=Wn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&zn.call(e)==On}var as=ht?Nt(ht):function(n){return es(n)&&wr(n)==x},ss=gt?Nt(gt):function(n){return es(n)&&po(n)==_};function ls(n){return"string"==typeof n||!Pa(n)&&es(n)&&wr(n)==E}function us(n){return"symbol"==typeof n||es(n)&&wr(n)==L}var cs=mt?Nt(mt):function(n){return es(n)&&ns(n.length)&&!!Kn[wr(n)]},As=Ni(Dr),ds=Ni((function(n,t){return n<=t}));function ps(n){if(!n)return[];if(Xa(n))return ls(n)?ae(n):_i(n);if(st&&n[st])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[st]());var t=po(n);return(t==b?ne:t==_?re:Rs)(n)}function fs(n){return n?(n=ms(n))===c||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function hs(n){var t=fs(n),e=t%1;return t==t?e?t-e:t:0}function gs(n){return n?ar(hs(n),0,p):0}function ms(n){if("number"==typeof n)return n;if(us(n))return d;if(ts(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=ts(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=Qt(n);var e=hn.test(n);return e||mn.test(n)?rt(n.slice(2),e?2:8):fn.test(n)?d:+n}function Cs(n){return Ei(n,zs(n))}function vs(n){return null==n?"":si(n)}var Is=Vi((function(n,t){if(bo(t)||Xa(t))Ei(t,js(t),n);else for(var e in t)Wn.call(t,e)&&nr(n,e,t[e])})),Bs=Vi((function(n,t){Ei(t,zs(t),n)})),bs=Vi((function(n,t,e,r){Ei(t,zs(t),n,r)})),ys=Vi((function(n,t,e,r){Ei(t,js(t),n,r)})),ws=no(or),ks=$r((function(n,t){n=kn(n);var e=-1,r=t.length,o=r>2?t[2]:i;for(o&&Co(t[0],t[1],o)&&(r=1);++e<r;)for(var a=t[e],s=zs(a),l=-1,u=s.length;++l<u;){var c=s[l],A=n[c];(A===i||Ra(A,Sn[c])&&!Wn.call(n,c))&&(n[c]=a[c])}return n})),xs=$r((function(n){return n.push(i,Hi),Ct(Ts,i,n)}));function _s(n,t,e){var r=null==n?i:br(n,t);return r===i?e:r}function Es(n,t){return null!=n&&fo(n,t,_r)}var Ls=qi((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Yn.call(t)),n[t]=e}),tl(il)),Vs=qi((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Yn.call(t)),Wn.call(n,t)?n[t].push(e):n[t]=[e]}),ao),Ss=$r(Lr);function js(n){return Xa(n)?Fe(n):Tr(n)}function zs(n){return Xa(n)?Fe(n,!0):function(n){if(!ts(n))return function(n){var t=[];if(null!=n)for(var e in kn(n))t.push(e);return t}(n);var t=bo(n),e=[];for(var r in n)("constructor"!=r||!t&&Wn.call(n,r))&&e.push(r);return e}(n)}var Ws=Vi((function(n,t,e){Zr(n,t,e)})),Ts=Vi((function(n,t,e,r){Zr(n,t,e,r)})),Ds=no((function(n,t){var e={};if(null==n)return e;var r=!1;t=xt(t,(function(t){return t=mi(t,n),r||(r=t.length>1),t})),Ei(n,eo(n),e),r&&(e=sr(e,7,Gi));for(var i=t.length;i--;)ui(e,t[i]);return e})),Ys=no((function(n,t){return null==n?{}:function(n,t){return Qr(n,t,(function(t,e){return Es(n,e)}))}(n,t)}));function Os(n,t){if(null==n)return{};var e=xt(eo(n),(function(n){return[n]}));return t=ao(t),Qr(n,e,(function(n,e){return t(n,e[0])}))}var qs=$i(js),Zs=$i(zs);function Rs(n){return null==n?[]:Pt(n,js(n))}var Us=Wi((function(n,t,e){return t=t.toLowerCase(),n+(e?Qs(t):t)}));function Qs(n){return Hs(vs(n).toLowerCase())}function Ns(n){return(n=vs(n))&&n.replace(vn,Jt).replace(Mn,"")}var Ps=Wi((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Ms=Wi((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),Xs=zi("toLowerCase"),$s=Wi((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()})),Fs=Wi((function(n,t,e){return n+(e?" ":"")+Hs(t)})),Js=Wi((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Hs=zi("toUpperCase");function Gs(n,t,e){return n=vs(n),(t=e?i:t)===i?function(n){return Jn.test(n)}(n)?function(n){return n.match($n)||[]}(n):function(n){return n.match(un)||[]}(n):n.match(t)||[]}var Ks=$r((function(n,t){try{return Ct(n,i,t)}catch(n){return Ha(n)?n:new bn(n)}})),nl=no((function(n,t){return It(t,(function(t){t=Oo(t),ir(n,t,Va(n[t],n))})),n}));function tl(n){return function(){return n}}var el=Yi(),rl=Yi(!0);function il(n){return n}function ol(n){return Wr("function"==typeof n?n:sr(n,1))}var al=$r((function(n,t){return function(e){return Lr(e,n,t)}})),sl=$r((function(n,t){return function(e){return Lr(n,e,t)}}));function ll(n,t,e){var r=js(t),i=Br(t,r);null!=e||ts(t)&&(i.length||!r.length)||(e=t,t=n,n=this,i=Br(t,js(t)));var o=!(ts(e)&&"chain"in e&&!e.chain),a=Ga(n);return It(i,(function(e){var r=t[e];n[e]=r,a&&(n.prototype[e]=function(){var t=this.__chain__;if(o||t){var e=n(this.__wrapped__),i=e.__actions__=_i(this.__actions__);return i.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,_t([this.value()],arguments))})})),n}function ul(){}var cl=Ri(xt),Al=Ri(bt),dl=Ri(Vt);function pl(n){return vo(n)?Ot(Oo(n)):function(n){return function(t){return br(t,n)}}(n)}var fl=Qi(),hl=Qi(!0);function gl(){return[]}function ml(){return!1}var Cl,vl=Zi((function(n,t){return n+t}),0),Il=Mi("ceil"),Bl=Zi((function(n,t){return n/t}),1),bl=Mi("floor"),yl=Zi((function(n,t){return n*t}),1),wl=Mi("round"),kl=Zi((function(n,t){return n-t}),0);return qe.after=function(n,t){if("function"!=typeof t)throw new En(o);return n=hs(n),function(){if(--n<1)return t.apply(this,arguments)}},qe.ary=Ea,qe.assign=Is,qe.assignIn=Bs,qe.assignInWith=bs,qe.assignWith=ys,qe.at=ws,qe.before=La,qe.bind=Va,qe.bindAll=nl,qe.bindKey=Sa,qe.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Pa(n)?n:[n]},qe.chain=pa,qe.chunk=function(n,t,e){t=(e?Co(n,t,e):t===i)?1:me(hs(t),0);var o=null==n?0:n.length;if(!o||t<1)return[];for(var a=0,s=0,l=r(ce(o/t));a<o;)l[s++]=ti(n,a,a+=t);return l},qe.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,i=[];++t<e;){var o=n[t];o&&(i[r++]=o)}return i},qe.concat=function(){var n=arguments.length;if(!n)return[];for(var t=r(n-1),e=arguments[0],i=n;i--;)t[i-1]=arguments[i];return _t(Pa(e)?_i(e):[e],gr(t,1))},qe.cond=function(n){var t=null==n?0:n.length,e=ao();return n=t?xt(n,(function(n){if("function"!=typeof n[1])throw new En(o);return[e(n[0]),n[1]]})):[],$r((function(e){for(var r=-1;++r<t;){var i=n[r];if(Ct(i[0],this,e))return Ct(i[1],this,e)}}))},qe.conforms=function(n){return function(n){var t=js(n);return function(e){return lr(e,n,t)}}(sr(n,1))},qe.constant=tl,qe.countBy=ga,qe.create=function(n,t){var e=Ze(n);return null==t?e:rr(e,t)},qe.curry=function n(t,e,r){var o=Fi(t,8,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},qe.curryRight=function n(t,e,r){var o=Fi(t,16,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},qe.debounce=ja,qe.defaults=ks,qe.defaultsDeep=xs,qe.defer=za,qe.delay=Wa,qe.difference=Ro,qe.differenceBy=Uo,qe.differenceWith=Qo,qe.drop=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,(t=e||t===i?1:hs(t))<0?0:t,r):[]},qe.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,0,(t=r-(t=e||t===i?1:hs(t)))<0?0:t):[]},qe.dropRightWhile=function(n,t){return n&&n.length?Ai(n,ao(t,3),!0,!0):[]},qe.dropWhile=function(n,t){return n&&n.length?Ai(n,ao(t,3),!0):[]},qe.fill=function(n,t,e,r){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Co(n,t,e)&&(e=0,r=o),function(n,t,e,r){var o=n.length;for((e=hs(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:hs(r))<0&&(r+=o),r=e>r?0:gs(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},qe.filter=function(n,t){return(Pa(n)?yt:hr)(n,ao(t,3))},qe.flatMap=function(n,t){return gr(wa(n,t),1)},qe.flatMapDeep=function(n,t){return gr(wa(n,t),c)},qe.flatMapDepth=function(n,t,e){return e=e===i?1:hs(e),gr(wa(n,t),e)},qe.flatten=Mo,qe.flattenDeep=function(n){return null!=n&&n.length?gr(n,c):[]},qe.flattenDepth=function(n,t){return null!=n&&n.length?gr(n,t=t===i?1:hs(t)):[]},qe.flip=function(n){return Fi(n,512)},qe.flow=el,qe.flowRight=rl,qe.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var i=n[t];r[i[0]]=i[1]}return r},qe.functions=function(n){return null==n?[]:Br(n,js(n))},qe.functionsIn=function(n){return null==n?[]:Br(n,zs(n))},qe.groupBy=Ba,qe.initial=function(n){return null!=n&&n.length?ti(n,0,-1):[]},qe.intersection=$o,qe.intersectionBy=Fo,qe.intersectionWith=Jo,qe.invert=Ls,qe.invertBy=Vs,qe.invokeMap=ba,qe.iteratee=ol,qe.keyBy=ya,qe.keys=js,qe.keysIn=zs,qe.map=wa,qe.mapKeys=function(n,t){var e={};return t=ao(t,3),vr(n,(function(n,r,i){ir(e,t(n,r,i),n)})),e},qe.mapValues=function(n,t){var e={};return t=ao(t,3),vr(n,(function(n,r,i){ir(e,r,t(n,r,i))})),e},qe.matches=function(n){return Or(sr(n,1))},qe.matchesProperty=function(n,t){return qr(n,sr(t,1))},qe.memoize=Ta,qe.merge=Ws,qe.mergeWith=Ts,qe.method=al,qe.methodOf=sl,qe.mixin=ll,qe.negate=Da,qe.nthArg=function(n){return n=hs(n),$r((function(t){return Rr(t,n)}))},qe.omit=Ds,qe.omitBy=function(n,t){return Os(n,Da(ao(t)))},qe.once=function(n){return La(2,n)},qe.orderBy=function(n,t,e,r){return null==n?[]:(Pa(t)||(t=null==t?[]:[t]),Pa(e=r?i:e)||(e=null==e?[]:[e]),Ur(n,t,e))},qe.over=cl,qe.overArgs=Ya,qe.overEvery=Al,qe.overSome=dl,qe.partial=Oa,qe.partialRight=qa,qe.partition=ka,qe.pick=Ys,qe.pickBy=Os,qe.property=pl,qe.propertyOf=function(n){return function(t){return null==n?i:br(n,t)}},qe.pull=Go,qe.pullAll=Ko,qe.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Nr(n,t,ao(e,2)):n},qe.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Nr(n,t,i,e):n},qe.pullAt=na,qe.range=fl,qe.rangeRight=hl,qe.rearg=Za,qe.reject=function(n,t){return(Pa(n)?yt:hr)(n,Da(ao(t,3)))},qe.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,i=[],o=n.length;for(t=ao(t,3);++r<o;){var a=n[r];t(a,r,n)&&(e.push(a),i.push(r))}return Pr(n,i),e},qe.rest=function(n,t){if("function"!=typeof n)throw new En(o);return $r(n,t=t===i?t:hs(t))},qe.reverse=ta,qe.sampleSize=function(n,t,e){return t=(e?Co(n,t,e):t===i)?1:hs(t),(Pa(n)?He:Jr)(n,t)},qe.set=function(n,t,e){return null==n?n:Hr(n,t,e)},qe.setWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:Hr(n,t,e,r)},qe.shuffle=function(n){return(Pa(n)?Ge:ni)(n)},qe.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&Co(n,t,e)?(t=0,e=r):(t=null==t?0:hs(t),e=e===i?r:hs(e)),ti(n,t,e)):[]},qe.sortBy=xa,qe.sortedUniq=function(n){return n&&n.length?oi(n):[]},qe.sortedUniqBy=function(n,t){return n&&n.length?oi(n,ao(t,2)):[]},qe.split=function(n,t,e){return e&&"number"!=typeof e&&Co(n,t,e)&&(t=e=i),(e=e===i?p:e>>>0)?(n=vs(n))&&("string"==typeof t||null!=t&&!as(t))&&!(t=si(t))&&Kt(n)?vi(ae(n),0,e):n.split(t,e):[]},qe.spread=function(n,t){if("function"!=typeof n)throw new En(o);return t=null==t?0:me(hs(t),0),$r((function(e){var r=e[t],i=vi(e,0,t);return r&&_t(i,r),Ct(n,this,i)}))},qe.tail=function(n){var t=null==n?0:n.length;return t?ti(n,1,t):[]},qe.take=function(n,t,e){return n&&n.length?ti(n,0,(t=e||t===i?1:hs(t))<0?0:t):[]},qe.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?ti(n,(t=r-(t=e||t===i?1:hs(t)))<0?0:t,r):[]},qe.takeRightWhile=function(n,t){return n&&n.length?Ai(n,ao(t,3),!1,!0):[]},qe.takeWhile=function(n,t){return n&&n.length?Ai(n,ao(t,3)):[]},qe.tap=function(n,t){return t(n),n},qe.throttle=function(n,t,e){var r=!0,i=!0;if("function"!=typeof n)throw new En(o);return ts(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),ja(n,t,{leading:r,maxWait:t,trailing:i})},qe.thru=fa,qe.toArray=ps,qe.toPairs=qs,qe.toPairsIn=Zs,qe.toPath=function(n){return Pa(n)?xt(n,Oo):us(n)?[n]:_i(Yo(vs(n)))},qe.toPlainObject=Cs,qe.transform=function(n,t,e){var r=Pa(n),i=r||Fa(n)||cs(n);if(t=ao(t,4),null==e){var o=n&&n.constructor;e=i?r?new o:[]:ts(n)&&Ga(o)?Ze(Xn(n)):{}}return(i?It:vr)(n,(function(n,r,i){return t(e,n,r,i)})),e},qe.unary=function(n){return Ea(n,1)},qe.union=ea,qe.unionBy=ra,qe.unionWith=ia,qe.uniq=function(n){return n&&n.length?li(n):[]},qe.uniqBy=function(n,t){return n&&n.length?li(n,ao(t,2)):[]},qe.uniqWith=function(n,t){return t="function"==typeof t?t:i,n&&n.length?li(n,i,t):[]},qe.unset=function(n,t){return null==n||ui(n,t)},qe.unzip=oa,qe.unzipWith=aa,qe.update=function(n,t,e){return null==n?n:ci(n,t,gi(e))},qe.updateWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:ci(n,t,gi(e),r)},qe.values=Rs,qe.valuesIn=function(n){return null==n?[]:Pt(n,zs(n))},qe.without=sa,qe.words=Gs,qe.wrap=function(n,t){return Oa(gi(t),n)},qe.xor=la,qe.xorBy=ua,qe.xorWith=ca,qe.zip=Aa,qe.zipObject=function(n,t){return fi(n||[],t||[],nr)},qe.zipObjectDeep=function(n,t){return fi(n||[],t||[],Hr)},qe.zipWith=da,qe.entries=qs,qe.entriesIn=Zs,qe.extend=Bs,qe.extendWith=bs,ll(qe,qe),qe.add=vl,qe.attempt=Ks,qe.camelCase=Us,qe.capitalize=Qs,qe.ceil=Il,qe.clamp=function(n,t,e){return e===i&&(e=t,t=i),e!==i&&(e=(e=ms(e))==e?e:0),t!==i&&(t=(t=ms(t))==t?t:0),ar(ms(n),t,e)},qe.clone=function(n){return sr(n,4)},qe.cloneDeep=function(n){return sr(n,5)},qe.cloneDeepWith=function(n,t){return sr(n,5,t="function"==typeof t?t:i)},qe.cloneWith=function(n,t){return sr(n,4,t="function"==typeof t?t:i)},qe.conformsTo=function(n,t){return null==t||lr(n,t,js(t))},qe.deburr=Ns,qe.defaultTo=function(n,t){return null==n||n!=n?t:n},qe.divide=Bl,qe.endsWith=function(n,t,e){n=vs(n),t=si(t);var r=n.length,o=e=e===i?r:ar(hs(e),0,r);return(e-=t.length)>=0&&n.slice(e,o)==t},qe.eq=Ra,qe.escape=function(n){return(n=vs(n))&&$.test(n)?n.replace(M,Ht):n},qe.escapeRegExp=function(n){return(n=vs(n))&&en.test(n)?n.replace(tn,"\\$&"):n},qe.every=function(n,t,e){var r=Pa(n)?bt:pr;return e&&Co(n,t,e)&&(t=i),r(n,ao(t,3))},qe.find=ma,qe.findIndex=No,qe.findKey=function(n,t){return jt(n,ao(t,3),vr)},qe.findLast=Ca,qe.findLastIndex=Po,qe.findLastKey=function(n,t){return jt(n,ao(t,3),Ir)},qe.floor=bl,qe.forEach=va,qe.forEachRight=Ia,qe.forIn=function(n,t){return null==n?n:mr(n,ao(t,3),zs)},qe.forInRight=function(n,t){return null==n?n:Cr(n,ao(t,3),zs)},qe.forOwn=function(n,t){return n&&vr(n,ao(t,3))},qe.forOwnRight=function(n,t){return n&&Ir(n,ao(t,3))},qe.get=_s,qe.gt=Ua,qe.gte=Qa,qe.has=function(n,t){return null!=n&&fo(n,t,xr)},qe.hasIn=Es,qe.head=Xo,qe.identity=il,qe.includes=function(n,t,e,r){n=Xa(n)?n:Rs(n),e=e&&!r?hs(e):0;var i=n.length;return e<0&&(e=me(i+e,0)),ls(n)?e<=i&&n.indexOf(t,e)>-1:!!i&&Wt(n,t,e)>-1},qe.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var i=null==e?0:hs(e);return i<0&&(i=me(r+i,0)),Wt(n,t,i)},qe.inRange=function(n,t,e){return t=fs(t),e===i?(e=t,t=0):e=fs(e),function(n,t,e){return n>=Ce(t,e)&&n<me(t,e)}(n=ms(n),t,e)},qe.invoke=Ss,qe.isArguments=Na,qe.isArray=Pa,qe.isArrayBuffer=Ma,qe.isArrayLike=Xa,qe.isArrayLikeObject=$a,qe.isBoolean=function(n){return!0===n||!1===n||es(n)&&wr(n)==m},qe.isBuffer=Fa,qe.isDate=Ja,qe.isElement=function(n){return es(n)&&1===n.nodeType&&!os(n)},qe.isEmpty=function(n){if(null==n)return!0;if(Xa(n)&&(Pa(n)||"string"==typeof n||"function"==typeof n.splice||Fa(n)||cs(n)||Na(n)))return!n.length;var t=po(n);if(t==b||t==_)return!n.size;if(bo(n))return!Tr(n).length;for(var e in n)if(Wn.call(n,e))return!1;return!0},qe.isEqual=function(n,t){return Sr(n,t)},qe.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:i)?e(n,t):i;return r===i?Sr(n,t,i,e):!!r},qe.isError=Ha,qe.isFinite=function(n){return"number"==typeof n&&fe(n)},qe.isFunction=Ga,qe.isInteger=Ka,qe.isLength=ns,qe.isMap=rs,qe.isMatch=function(n,t){return n===t||jr(n,t,lo(t))},qe.isMatchWith=function(n,t,e){return e="function"==typeof e?e:i,jr(n,t,lo(t),e)},qe.isNaN=function(n){return is(n)&&n!=+n},qe.isNative=function(n){if(Bo(n))throw new bn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return zr(n)},qe.isNil=function(n){return null==n},qe.isNull=function(n){return null===n},qe.isNumber=is,qe.isObject=ts,qe.isObjectLike=es,qe.isPlainObject=os,qe.isRegExp=as,qe.isSafeInteger=function(n){return Ka(n)&&n>=-9007199254740991&&n<=A},qe.isSet=ss,qe.isString=ls,qe.isSymbol=us,qe.isTypedArray=cs,qe.isUndefined=function(n){return n===i},qe.isWeakMap=function(n){return es(n)&&po(n)==V},qe.isWeakSet=function(n){return es(n)&&"[object WeakSet]"==wr(n)},qe.join=function(n,t){return null==n?"":he.call(n,t)},qe.kebabCase=Ps,qe.last=Ho,qe.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=hs(e))<0?me(r+o,0):Ce(o,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,o):zt(n,Dt,o,!0)},qe.lowerCase=Ms,qe.lowerFirst=Xs,qe.lt=As,qe.lte=ds,qe.max=function(n){return n&&n.length?fr(n,il,kr):i},qe.maxBy=function(n,t){return n&&n.length?fr(n,ao(t,2),kr):i},qe.mean=function(n){return Yt(n,il)},qe.meanBy=function(n,t){return Yt(n,ao(t,2))},qe.min=function(n){return n&&n.length?fr(n,il,Dr):i},qe.minBy=function(n,t){return n&&n.length?fr(n,ao(t,2),Dr):i},qe.stubArray=gl,qe.stubFalse=ml,qe.stubObject=function(){return{}},qe.stubString=function(){return""},qe.stubTrue=function(){return!0},qe.multiply=yl,qe.nth=function(n,t){return n&&n.length?Rr(n,hs(t)):i},qe.noConflict=function(){return at._===this&&(at._=qn),this},qe.noop=ul,qe.now=_a,qe.pad=function(n,t,e){n=vs(n);var r=(t=hs(t))?oe(n):0;if(!t||r>=t)return n;var i=(t-r)/2;return Ui(Ae(i),e)+n+Ui(ce(i),e)},qe.padEnd=function(n,t,e){n=vs(n);var r=(t=hs(t))?oe(n):0;return t&&r<t?n+Ui(t-r,e):n},qe.padStart=function(n,t,e){n=vs(n);var r=(t=hs(t))?oe(n):0;return t&&r<t?Ui(t-r,e)+n:n},qe.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),Ie(vs(n).replace(rn,""),t||0)},qe.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Co(n,t,e)&&(t=e=i),e===i&&("boolean"==typeof t?(e=t,t=i):"boolean"==typeof n&&(e=n,n=i)),n===i&&t===i?(n=0,t=1):(n=fs(n),t===i?(t=n,n=0):t=fs(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var o=Be();return Ce(n+o*(t-n+et("1e-"+((o+"").length-1))),t)}return Mr(n,t)},qe.reduce=function(n,t,e){var r=Pa(n)?Et:Zt,i=arguments.length<3;return r(n,ao(t,4),e,i,Ar)},qe.reduceRight=function(n,t,e){var r=Pa(n)?Lt:Zt,i=arguments.length<3;return r(n,ao(t,4),e,i,dr)},qe.repeat=function(n,t,e){return t=(e?Co(n,t,e):t===i)?1:hs(t),Xr(vs(n),t)},qe.replace=function(){var n=arguments,t=vs(n[0]);return n.length<3?t:t.replace(n[1],n[2])},qe.result=function(n,t,e){var r=-1,o=(t=mi(t,n)).length;for(o||(o=1,n=i);++r<o;){var a=null==n?i:n[Oo(t[r])];a===i&&(r=o,a=e),n=Ga(a)?a.call(n):a}return n},qe.round=wl,qe.runInContext=n,qe.sample=function(n){return(Pa(n)?Je:Fr)(n)},qe.size=function(n){if(null==n)return 0;if(Xa(n))return ls(n)?oe(n):n.length;var t=po(n);return t==b||t==_?n.size:Tr(n).length},qe.snakeCase=$s,qe.some=function(n,t,e){var r=Pa(n)?Vt:ei;return e&&Co(n,t,e)&&(t=i),r(n,ao(t,3))},qe.sortedIndex=function(n,t){return ri(n,t)},qe.sortedIndexBy=function(n,t,e){return ii(n,t,ao(e,2))},qe.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=ri(n,t);if(r<e&&Ra(n[r],t))return r}return-1},qe.sortedLastIndex=function(n,t){return ri(n,t,!0)},qe.sortedLastIndexBy=function(n,t,e){return ii(n,t,ao(e,2),!0)},qe.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=ri(n,t,!0)-1;if(Ra(n[e],t))return e}return-1},qe.startCase=Fs,qe.startsWith=function(n,t,e){return n=vs(n),e=null==e?0:ar(hs(e),0,n.length),t=si(t),n.slice(e,e+t.length)==t},qe.subtract=kl,qe.sum=function(n){return n&&n.length?Rt(n,il):0},qe.sumBy=function(n,t){return n&&n.length?Rt(n,ao(t,2)):0},qe.template=function(n,t,e){var r=qe.templateSettings;e&&Co(n,t,e)&&(t=i),n=vs(n),t=bs({},t,r,Ji);var o,a,s=bs({},t.imports,r.imports,Ji),l=js(s),u=Pt(s,l),c=0,A=t.interpolate||In,d="__p += '",p=xn((t.escape||In).source+"|"+A.source+"|"+(A===H?dn:In).source+"|"+(t.evaluate||In).source+"|$","g"),f="//# sourceURL="+(Wn.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Gn+"]")+"\n";n.replace(p,(function(t,e,r,i,s,l){return r||(r=i),d+=n.slice(c,l).replace(Bn,Gt),e&&(o=!0,d+="' +\n__e("+e+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=l+t.length,t})),d+="';\n";var h=Wn.call(t,"variable")&&t.variable;if(h){if(cn.test(h))throw new bn("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(U,""):d).replace(Q,"$1").replace(N,"$1;"),d="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=Ks((function(){return yn(l,f+"return "+d).apply(i,u)}));if(g.source=d,Ha(g))throw g;return g},qe.times=function(n,t){if((n=hs(n))<1||n>A)return[];var e=p,r=Ce(n,p);t=ao(t),n-=p;for(var i=Ut(r,t);++e<n;)t(e);return i},qe.toFinite=fs,qe.toInteger=hs,qe.toLength=gs,qe.toLower=function(n){return vs(n).toLowerCase()},qe.toNumber=ms,qe.toSafeInteger=function(n){return n?ar(hs(n),-9007199254740991,A):0===n?n:0},qe.toString=vs,qe.toUpper=function(n){return vs(n).toUpperCase()},qe.trim=function(n,t,e){if((n=vs(n))&&(e||t===i))return Qt(n);if(!n||!(t=si(t)))return n;var r=ae(n),o=ae(t);return vi(r,Xt(r,o),$t(r,o)+1).join("")},qe.trimEnd=function(n,t,e){if((n=vs(n))&&(e||t===i))return n.slice(0,se(n)+1);if(!n||!(t=si(t)))return n;var r=ae(n);return vi(r,0,$t(r,ae(t))+1).join("")},qe.trimStart=function(n,t,e){if((n=vs(n))&&(e||t===i))return n.replace(rn,"");if(!n||!(t=si(t)))return n;var r=ae(n);return vi(r,Xt(r,ae(t))).join("")},qe.truncate=function(n,t){var e=30,r="...";if(ts(t)){var o="separator"in t?t.separator:o;e="length"in t?hs(t.length):e,r="omission"in t?si(t.omission):r}var a=(n=vs(n)).length;if(Kt(n)){var s=ae(n);a=s.length}if(e>=a)return n;var l=e-oe(r);if(l<1)return r;var u=s?vi(s,0,l).join(""):n.slice(0,l);if(o===i)return u+r;if(s&&(l+=u.length-l),as(o)){if(n.slice(l).search(o)){var c,A=u;for(o.global||(o=xn(o.source,vs(pn.exec(o))+"g")),o.lastIndex=0;c=o.exec(A);)var d=c.index;u=u.slice(0,d===i?l:d)}}else if(n.indexOf(si(o),l)!=l){var p=u.lastIndexOf(o);p>-1&&(u=u.slice(0,p))}return u+r},qe.unescape=function(n){return(n=vs(n))&&X.test(n)?n.replace(P,le):n},qe.uniqueId=function(n){var t=++Tn;return vs(n)+t},qe.upperCase=Js,qe.upperFirst=Hs,qe.each=va,qe.eachRight=Ia,qe.first=Xo,ll(qe,(Cl={},vr(qe,(function(n,t){Wn.call(qe.prototype,t)||(Cl[t]=n)})),Cl),{chain:!1}),qe.VERSION="4.17.21",It(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){qe[n].placeholder=qe})),It(["drop","take"],(function(n,t){Qe.prototype[n]=function(e){e=e===i?1:me(hs(e),0);var r=this.__filtered__&&!t?new Qe(this):this.clone();return r.__filtered__?r.__takeCount__=Ce(e,r.__takeCount__):r.__views__.push({size:Ce(e,p),type:n+(r.__dir__<0?"Right":"")}),r},Qe.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),It(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Qe.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:ao(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),It(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Qe.prototype[n]=function(){return this[e](1).value()[0]}})),It(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Qe.prototype[n]=function(){return this.__filtered__?new Qe(this):this[e](1)}})),Qe.prototype.compact=function(){return this.filter(il)},Qe.prototype.find=function(n){return this.filter(n).head()},Qe.prototype.findLast=function(n){return this.reverse().find(n)},Qe.prototype.invokeMap=$r((function(n,t){return"function"==typeof n?new Qe(this):this.map((function(e){return Lr(e,n,t)}))})),Qe.prototype.reject=function(n){return this.filter(Da(ao(n)))},Qe.prototype.slice=function(n,t){n=hs(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Qe(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==i&&(e=(t=hs(t))<0?e.dropRight(-t):e.take(t-n)),e)},Qe.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Qe.prototype.toArray=function(){return this.take(p)},vr(Qe.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=qe[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(qe.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,l=t instanceof Qe,u=s[0],c=l||Pa(t),A=function(n){var t=o.apply(qe,_t([n],s));return r&&d?t[0]:t};c&&e&&"function"==typeof u&&1!=u.length&&(l=c=!1);var d=this.__chain__,p=!!this.__actions__.length,f=a&&!d,h=l&&!p;if(!a&&c){t=h?t:new Qe(this);var g=n.apply(t,s);return g.__actions__.push({func:fa,args:[A],thisArg:i}),new Ue(g,d)}return f&&h?n.apply(this,s):(g=this.thru(A),f?r?g.value()[0]:g.value():g)})})),It(["pop","push","shift","sort","splice","unshift"],(function(n){var t=Ln[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);qe.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(Pa(i)?i:[],n)}return this[e]((function(e){return t.apply(Pa(e)?e:[],n)}))}})),vr(Qe.prototype,(function(n,t){var e=qe[t];if(e){var r=e.name+"";Wn.call(Ve,r)||(Ve[r]=[]),Ve[r].push({name:t,func:e})}})),Ve[Oi(i,2).name]=[{name:"wrapper",func:i}],Qe.prototype.clone=function(){var n=new Qe(this.__wrapped__);return n.__actions__=_i(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=_i(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=_i(this.__views__),n},Qe.prototype.reverse=function(){if(this.__filtered__){var n=new Qe(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Qe.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Pa(n),r=t<0,i=e?n.length:0,o=function(n,t,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],a=o.size;switch(o.type){case"drop":n+=a;break;case"dropRight":t-=a;break;case"take":t=Ce(t,n+a);break;case"takeRight":n=me(n,t-a)}}return{start:n,end:t}}(0,i,this.__views__),a=o.start,s=o.end,l=s-a,u=r?s:a-1,c=this.__iteratees__,A=c.length,d=0,p=Ce(l,this.__takeCount__);if(!e||!r&&i==l&&p==l)return di(n,this.__actions__);var f=[];n:for(;l--&&d<p;){for(var h=-1,g=n[u+=t];++h<A;){var m=c[h],C=m.iteratee,v=m.type,I=C(g);if(2==v)g=I;else if(!I){if(1==v)continue n;break n}}f[d++]=g}return f},qe.prototype.at=ha,qe.prototype.chain=function(){return pa(this)},qe.prototype.commit=function(){return new Ue(this.value(),this.__chain__)},qe.prototype.next=function(){this.__values__===i&&(this.__values__=ps(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?i:this.__values__[this.__index__++]}},qe.prototype.plant=function(n){for(var t,e=this;e instanceof Re;){var r=Zo(e);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;e=e.__wrapped__}return o.__wrapped__=n,t},qe.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Qe){var t=n;return this.__actions__.length&&(t=new Qe(this)),(t=t.reverse()).__actions__.push({func:fa,args:[ta],thisArg:i}),new Ue(t,this.__chain__)}return this.thru(ta)},qe.prototype.toJSON=qe.prototype.valueOf=qe.prototype.value=function(){return di(this.__wrapped__,this.__actions__)},qe.prototype.first=qe.prototype.head,st&&(qe.prototype[st]=function(){return this}),qe}();at._=ue,(r=function(){return ue}.call(t,e,t,n))===i||(n.exports=r)}.call(this)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var l=n[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,A="".concat(u," ").concat(c);o[u]=c+1;var d=e(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var f=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=e(o[a]);t[s].references--}for(var l=r(n,i),u=0;u<o.length;u++){var c=e(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},535:(n,t,e)=>{"use strict";n.exports=e.p+"check.svg"}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";var n=e(379),t=e.n(n),r=e(795),i=e.n(r),o=e(569),a=e.n(o),s=e(565),l=e.n(s),u=e(216),c=e.n(u),A=e(589),d=e.n(A),p=e(756),f={};f.styleTagTransform=d(),f.setAttributes=l(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=c(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var h=e(195),g={};g.styleTagTransform=d(),g.setAttributes=l(),g.insert=a().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=c(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var m=e(973),C={};C.styleTagTransform=d(),C.setAttributes=l(),C.insert=a().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=c(),t()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;var v=e(540),I={};I.styleTagTransform=d(),I.setAttributes=l(),I.insert=a().bind(null,"head"),I.domAPI=i(),I.insertStyleElement=c(),t()(v.Z,I),v.Z&&v.Z.locals&&v.Z.locals;var B=e(11),b={};b.styleTagTransform=d(),b.setAttributes=l(),b.insert=a().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=c(),t()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;var y=e(887),w={};w.styleTagTransform=d(),w.setAttributes=l(),w.insert=a().bind(null,"head"),w.domAPI=i(),w.insertStyleElement=c(),t()(y.Z,w),y.Z&&y.Z.locals&&y.Z.locals;var k=e(250),x={};x.styleTagTransform=d(),x.setAttributes=l(),x.insert=a().bind(null,"head"),x.domAPI=i(),x.insertStyleElement=c(),t()(k.Z,x),k.Z&&k.Z.locals&&k.Z.locals;var _=e(421),E={};E.styleTagTransform=d(),E.setAttributes=l(),E.insert=a().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=c(),t()(_.Z,E),_.Z&&_.Z.locals&&_.Z.locals;var L=e(486),V=e.n(L);const S=document.querySelector(":root"),j=document.querySelector("body"),z=document.querySelector("#close-menu"),W=document.querySelector("#open-menu"),T=document.querySelector("#return"),D=document.querySelector(".loading-container"),Y=document.querySelector(".toolTips"),O=document.querySelector(".alertView"),q=document.querySelector(".alertView .alert-message"),Z=document.querySelector(".alertView .alertBtns-container"),R=document.querySelector(".alertView .alert-title"),U=document.querySelector(".menu-container"),Q=document.querySelector(".menu"),N=document.querySelector(".listView-container"),P=document.querySelector(".listView"),M=document.querySelector(".contentView-container"),X=document.querySelector(".contentView"),$=document.querySelector(".right-click-dropdown"),F=document.querySelector(".menu #allTasks"),J=document.querySelector(".menu #allNotes"),H=document.querySelector(".menu #tasks"),G=document.querySelector(".menu #notes"),K=[...document.querySelectorAll(".menu .newBtn-wrapper input")],nn=[...document.querySelectorAll(".menu .newBtn-wrapper .newBtn")],tn=document.querySelector(".listView #listName"),en=document.querySelector(".listView .listNameWrapper .newBtn"),rn=document.querySelector(".listView .options"),on=document.querySelector("#sortPriority"),an=document.querySelector("#showPriority"),sn=document.querySelector("#sortDate"),ln=document.querySelector("#showDate"),un=[on,sn,an,ln],cn=document.querySelector(".listView .listItems"),An=document.querySelector(".listView .completedItems"),dn=document.querySelector(".listView .completedTitle-wrapper"),pn=document.querySelector(".listView #completedTitle"),fn=document.querySelector(".listView #removeCompleted"),hn=document.querySelector(".contentView .itemTitle"),gn=document.querySelector(".contentView textarea.description"),mn=document.querySelector(".contentView .options select"),Cn=document.querySelector(".contentView .options input[type='date']"),vn=document.querySelector(".contentView .options #delete"),In=document.querySelector(".contentView .clear");let Bn,bn,yn=N,wn=["task",0],kn={UI:!1,Data:!1,Engine:!1};const xn=[j,Q,P,X],_n=["triple","double","single"];function En(n){let t=n.name,e={};return n.processes.forEach((n=>{e[n]=!1})),{loadingProcessStatus:e,name:t,...n.components}}const Ln=(()=>{let n=!1;function t(){let n;Sn.setLoadingStatus(Ln,"updatingDisplay",!0),n=S.clientWidth/Q.clientWidth<3?"double":"triple","single"!==n&&(yn=N),Bn=n,e()}function e(){!function(n,t=[]){t.forEach((t=>{t.classList.add(n)}))}(Bn,xn),_n.forEach((n=>{Bn!==n&&s(n,xn)})),"single"===Bn?i():s("hide",[N,M]),setTimeout((()=>{let n=!1;[...o(),P,rn,X].forEach((t=>{!0===a(t,"horizontal")&&(n=!0)})),r()&&"single"!==Bn?(Bn="triple"===Bn?"double":"single",e()):Sn.setLoadingStatus(Ln,"updatingDisplay",!1)}),300)}function r(){let n=!1;return[...o(),N,P,rn,M,X,U,Q].forEach((t=>{!0===a(t,"horizontal")&&(n=!0)})),n}function i(){[N,M].forEach((n=>{n!==yn?n.classList.add("hide"):n.classList.remove("hide")}))}function o(){return[...document.querySelectorAll(".listView ul li")]}function a(n,t="both"){return"both"===t||"horizontal"===t?n.scrollWidth>n.clientWidth||"both"===t&&n.scrollHeight>n.clientHeight:n.scrollHeight>n.clientHeight}function s(n,t=[]){t.forEach((t=>{t.classList.remove(n)}))}function l(n){return[...n.childNodes].reduce(((n,t)=>("#text"!==t.nodeName&&n.push(t),n)),[])}async function u(n=l(Y)){Sn.setLoadingStatus(Ln,"loadingTooltips",!0),await n.forEach((n=>{let t=l(n)[0],e=n.getAttribute("place"),r="; center";e=null===e?r:e+r,e=e.split(";").reduce(((n,t)=>{if(t.trim().length>0){let e;t.includes(":")?(e=t.trim().split(":"),e.unshift(e.shift()),e[1]=e[1].trim().split(" ")):e=["rest",t.trim().split(" ")],1===e[1].length&&(["center","right","left"].includes(e[1][0])?e[1].push("top"):["top","bottom"].includes(e[1][0])&&e[1].unshift("center"));let r=!1,i=!1;["top","bottom"].includes(e[1][0])&&(r=e[1][0]),["right","left","center"].includes(e[1][1])&&(i=e[1][1]),!1!==r&&(e[1][1]=r),!1!==i&&(e[1][0]=i);let o=!0;_n.includes(e[0])||"rest"===e[0]||(o=!1),e[1].forEach((n=>{["center","right","left","top","bottom"].includes(n)||(o=!1)})),o&&n.push(e)}return n}),[]),e=(()=>{let n=[[],[],[],[]];return e.forEach((t=>{"rest"===t[0]?n[3].push(t):"triple"===t[0]?n[0].push(t):"double"===t[0]?n[1].push(t):"single"===t[0]&&n[2].push(t)})),n.reduce(((n,t)=>(t.length>0&&n.push(t[0]),n)),[])})(),(()=>{let n=_n.slice(0);return e.reduce(((t,e)=>("rest"!==e[0]?(n.splice(n.indexOf(e[0]),1),e[1].forEach((n=>{t.push(e[0]+"-"+n)}))):e[1].forEach((e=>{n.forEach((n=>{t.push(n+"-"+e)}))})),t)),[])})().forEach((n=>{t.classList.add(n)}));let i={triple:{x:void 0,y:void 0},double:{x:void 0,y:void 0},single:{X:void 0,y:void 0}};(()=>{let n=_n.slice(0);e.forEach((t=>{let e=t[0],r=t[1][0],o=t[1][1];"rest"!==e?n.splice(n.indexOf(e),1):e=n,Array.isArray(e)||(e=[e]),e.forEach((n=>{"center"===r?i[n].x=n=>n.x+Math.round(n.width/2):"left"===r?i[n].x=n=>n.left:"right"===r&&(i[n].x=n=>n.right),"top"===o?i[n].y=n=>n.top:"bottom"===o&&(i[n].y=n=>n.bottom)}))}))})();let o=[...document.querySelectorAll(n.getAttribute("for"))],a=(t,e)=>{n.classList.add("show");let r=function(n){const t=n.getBoundingClientRect();return{left:Math.round(t.left+window.scrollX),right:Math.round(t.right+window.scrollX),top:Math.round(t.top+window.scrollY),bottom:Math.round(t.bottom+window.scrollY),x:Math.round(t.x+window.scrollX),y:Math.round(t.y+window.scrollY),width:Math.round(t.width),height:Math.round(t.height)}}(e),o=i[Bn].x(r),a=i[Bn].y(r);n.style=`--positionX: ${o}px; --positionY: ${a}px;`},s=t=>{n.classList.remove("show")};o.forEach((n=>{let t=!1;n.addEventListener("mouseover",(e=>{!1===t&&(t=!0,a(0,n))})),n.addEventListener("focus",(e=>{!1===t&&(t=!0,a(0,n))})),n.addEventListener("mouseout",(n=>{t=!1,s()})),n.addEventListener("blur",(n=>{t=!1,s()}))}))})),Sn.setLoadingStatus(Ln,"loadingTooltips",!1)}function c(){"single"===Bn&&(yn=M,i(),hn.focus())}function A(n,t,e){n.setAttribute(`data-${t}`,e)}function d(n,t){return"index"===t?Number(n.getAttribute(`data-${t}`)):n.getAttribute(`data-${t}`)}function p(n,t){let e=Vn.getListName(n,t),r=document.createElement("li");A(r,"type",n),A(r,"index",t),r.textContent=e,r.addEventListener("click",(e=>{jn(0,n,t)})),r.addEventListener("contextmenu",(e=>{!function(n,t){n.preventDefault();let e=Object.entries(t);for(;$.firstChild;)$.removeChild($.firstChild);e.forEach((n=>{let t=document.createElement("li");t.textContent=n[0],t.addEventListener("click",(()=>{n[1](),o()})),$.appendChild(t)})),$.style.left=n.clientX+"px",$.style.top=n.clientY+"px",$.classList.remove("collapse");let r=document.querySelector("body"),i=n=>{$.contains(n.target)||$.dispatchEvent(new Event("mouseleave"))},o=n=>{$.classList.add("collapse"),$.removeEventListener("mouseleave",o),r.removeEventListener("click",i)};r.addEventListener("click",i,!0),setTimeout((()=>{$.addEventListener("mouseleave",o)}),50)}(e,{"Delete this list":()=>Sn.deleteList(n,t)})})),r.addEventListener("animationend",(n=>{r.classList.contains("removing")&&r.remove()})),"task"===n?H.appendChild(r):G.appendChild(r)}function f(n){return m(wn[0],Vn.getList(...wn)).indexOf(n)}function h(n,t){let e=Vn.getItem(n,t),r=document.createElement("li");if(Vn.spawnNewItemElem(n,t),r.classList.add(n),"task"===n){let i=document.createElement("input");i.setAttribute("type","checkbox"),i.toggleAttribute("checked",e.checked),e.checked&&r.classList.add("checked"),i.addEventListener("click",(n=>{n.stopPropagation()})),i.addEventListener("input",(e=>{Vn.updateItem(n,t,{checked:e.target.checked}),e.target.checked?r.classList.add("checked"):r.classList.remove("checked")})),r.addEventListener("animationend",(n=>{if(r.classList.contains("checked")&&r.parentElement.classList.contains("listItems"))An.appendChild(r);else if(!1===r.classList.contains("checked")&&r.parentElement.classList.contains("completedItems")){let n=[...cn.children],e=f(t);if(0!==n.length)for(let t=0;t<n.length;t++){let i=f(d(n[t],"index"));if(i>e){cn.children[t].insertAdjacentElement("beforebegin",r);break}if(i+1===e||t+1===n.length){cn.children[t].insertAdjacentElement("afterend",r);break}}else cn.appendChild(r)}})),r.appendChild(i)}let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("value",e.title),i.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{title:i.value})})),i.addEventListener("keydown",(n=>{"Enter"!==n.key&&13!==n.keyCode||(n.ctrlKey?Sn.newItem():n.target.blur())})),i.addEventListener("click",(e=>{C(n,t),c()}));let o=document.createElement("div");if(o.classList.add("textContainer"),o.addEventListener("click",(n=>{i.click()})),o.appendChild(i),r.appendChild(o),Vn.updateItemElem(n,t,{titleElem:i}),"task"===n){let i=document.createElement("select");i.classList.add("priority");let o=["low","normal","high","urgent"];o.forEach((n=>{let t=document.createElement("option");t.setAttribute("value",n),t.textContent=n[0].toUpperCase()+n.slice(1),n===e.priority&&t.toggleAttribute("selected",!0),i.appendChild(t)})),r.classList.add(e.priority),i.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{priority:i.value}),o.forEach((n=>{r.classList.remove(n)})),r.classList.add(i.value)})),r.appendChild(i),Vn.updateItemElem(n,t,{priorityElem:i});let a=document.createElement("input");a.setAttribute("type","date"),a.value="No due date"===e.date?"":e.date,""===a.value&&a.classList.add("noDate"),a.addEventListener("input",(e=>{Sn.updateItemProperty(n,t,"listView",{date:a.value})}));let s=document.createElement("div");s.classList.add("date-container"),s.appendChild(a);let l=document.createElement("p");if(l.textContent="No due date",s.appendChild(l),navigator.userAgent.toLowerCase().indexOf("firefox")>-1==0&&navigator.userAgent.toLowerCase().indexOf("android")>-1==0){let n=document.createElement("span");s.appendChild(n)}r.appendChild(s),Vn.updateItemElem(n,t,{dateElem:a})}return r.addEventListener("animationend",(n=>{r.classList.contains("removing")&&r.remove()})),A(r,"index",t),!0===e.checked?An.appendChild(r):cn.appendChild(r),Vn.updateItemElem(n,t,{elem:r}),i}function g(n,t){wn=[n,t],[F,...H.children,J,...G.children].forEach((e=>{d(e,"index")!==t||d(e,"type")!==n?e.classList.remove("selected"):e.classList.add("selected")})),0===t?(en.style.display="none",tn.toggleAttribute("disabled",!0)):(en.style.display="initial",tn.toggleAttribute("disabled",!1)),"note"===n?(rn.style.display="none",dn.style.display="none",An.style.display="none"):(rn.style.display="grid",dn.style.display="grid",An.style.display="grid"),tn.value=Vn.getListName(n,t),Vn.getListOptions(n,t).forEach(((n,t)=>{if(un[t].checked=n,t>1){let n=new Event("input");un[t].dispatchEvent(n)}}));let e=m(n,Vn.getList(n,t));[cn,An].forEach((n=>{for(;n.firstChild;)n.removeChild(n.firstChild)})),Vn.clearItemElems(),e.forEach(((t,e)=>{h(n,t)})),cn.children.length>0?C(n,d(cn.children[0],"index")):I(),u()}function m(n,t=Vn.getList(...wn)){let e=null;return un[0].checked&&(e="priority"),un[1].checked&&(e=null!==e?"both":"date"),null!==e&&("priority"===e?t=Vn.sortByPriority(n,t):"date"===e?t=Vn.sortByDate(n,t):"both"===e&&(t=Vn.mixSorted(Vn.sortByPriority(n,t),Vn.sortByDate(n,t)))),t}function C(n,t){bn=[n,t],[...cn.children,...An.children].forEach((n=>{d(n,"index")!==t?n.classList.remove("selected"):n.classList.add("selected")}));let e=Vn.getItem(n,t);hn.value=e.title,gn.value=e.textBody,"task"===n&&(mn.value=e.priority,Cn.value="No due date"===e.date?"":e.date,"No due date"===e.date&&!1===Cn.classList.contains("noDate")?Cn.classList.add("noDate"):"No due date"!==e.date&&Cn.classList.contains("noDate")&&Cn.classList.remove("noDate")),In.style.display="none",["clear","task","note"].forEach((n=>{X.classList.remove(n)})),X.classList.add(n)}function v(n,t){if(V().isEqual(bn,[n,t])){let e=Vn.getItem(n,t).checked,r=e?An.children:cn.children;if(r.length<2)e&&cn.children.length>0?C(n,d(cn.children[0],"index")):I();else for(let e=0;e<r.length;e++)d(r[e],"index")===t&&(e===r.length-1?C(n,d(r[e-1],"index")):C(n,d(r[e+1],"index")))}let e=[...cn.children,...An.children];for(let n=0;n<e.length;n++)if(d(e[n],"index")===t){e[n].classList.add("removing");break}}function I(){bn=null,hn.value="",gn.value="",mn.value="normal",Cn.value="",In.style.display="grid",["clear","task","note"].forEach((n=>{X.classList.remove(n)})),X.classList.add("clear")}return En({name:"UI",processes:["updatingDisplay","loadingTooltips"],components:{updateDisplay:function(){t()},initiate:function(){t(),u()},hideMenu:function(){[U,Q].forEach((n=>{n.classList.remove("visible")}))},switchToContentView:c,updateSingleView:i,loadingScreenVisible:n,showLoadingScreen:function(){D.style.opacity="100%",D.style.pointerEvents="initial",n=!0},hideLoadingScreen:function(){D.style.opacity="0%",D.style.pointerEvents="none",n=!1},loadData:function(){[Vn.getList("taskLists"),Vn.getList("noteLists")].forEach(((n,t)=>{let e=0===t?"task":"note";n.forEach((n=>{p(e,n)}))})),g(...wn)},alert:function(n,t){for(""!==n&&(R.textContent=n),q.textContent=t;Z.firstChild;)Z.removeChild(Z.firstChild);for(let n=2;n<arguments.length;n++){let t=document.createElement("button");t.textContent=arguments[n][0],t.addEventListener("click",(t=>{O.style.display="none",arguments[n][1]()})),Z.appendChild(t)}O.style.display="grid"},createMenuListElement:p,loadList:g,loadItem:C,getListViewOptionsData:function(){return un.reduce(((n,t)=>(n.push(t.checked),n)),[])},createListItemElement:h,updateItem:function(n,t,e,r){let i=V().isEqual(bn,[n,t]),o="listView"===e?"contentView":"listView";function a(e,r){if(r+="Elem","listView"===e)return Vn.getItemElem(n,t,r);switch(r){case"titleElem":return hn;case"priorityElem":return mn;case"dateElem":return Cn;case"textBodyElem":return gn}}Object.entries(r).forEach((n=>{let t=a(o,n[0]);["title","priority","date"].includes(n[0])&&("contentView"===o&&!0!==i||(t.value=n[1]),"date"===n[0]&&(""===n[1]?"contentView"===o?(a("listView","date").classList.add("noDate"),i&&t.classList.add("noDate")):(t.classList.add("noDate"),a("contentView","date").classList.add("noDate")):"contentView"===o?(a("listView","date").classList.remove("noDate"),i&&t.classList.remove("noDate")):(t.classList.remove("noDate"),a("contentView","date").classList.remove("noDate"))))}))},removeItem:v,removeList:function(n,t){wn[0]===n&&0===wn[1]&&[...cn.children,...An.children].forEach((e=>{let r=d(e,"index");Vn.getItem(n,r).listIndex===t&&v(n,r)}));let e="task"===n?[F,...H.children]:[J,...G.children];for(let r=0;r<e.length;r++)d(e[r],"index")===t&&(V().isEqual(wn,[n,t])&&(r===e.length-1?g(n,d(e[r-1],"index")):g(n,d(e[r+1],"index"))),e[r].classList.add("removing"))},getDataAttribute:d,updateListName:function(n,t,e){let r="task"===n?H.children:G.children;for(let n=0;n<r.length;n++)if(d(r[n],"index")===t){r[n].textContent=e;break}},viewOverflow:r}})})(),Vn=(()=>{const n=["taskLists","noteLists","taskItems","noteItems","taskList_0","noteList_0"];let t={task:{},note:{}};function e(n,t){let e=A.get(n+"Lists"),r=o(e);e.push(r),A.set(n+"Lists",e);let i=n+"List_"+r;return A.set(i+"_name",t),A.set(i+"_options",[!1,!1,!0,!0]),A.set(i,[]),r}function r(n,t){let e=a(n,t),r=n+"List_"+t,i=A.get(r),s=A.get(n+"Items"),l=o(s);s.push(l),A.set(n+"Items",s),i.push(l),A.set(r,i);let u=n+"Item_"+l;return A.set(u,e),l}function i(n,t){let e=n+"Item_"+t;if(A.exists(e)){let r=n+"List_"+A.get(e).listIndex,i=A.get(r);i.splice(i.indexOf(t),1),A.set(r,i);let o=A.get(n+"Items");o.splice(o.indexOf(t),1),A.set(n+"Items",o),A.remove(e)}else console.error(`Item doesn't exist: ${e}`)}function o(n){for(let t=0;t<n.length+1;t++)if(!n.includes(t))return t}function a(n,t){let e={type:n,listIndex:t,title:"",textBody:""};return"task"===n&&(e.priority="normal",e.date="No due date",e.checked=!1),e}function s(n,t){let e=n=n.trim().toLowerCase();if("task"===n&&"list"===n||(n=n.includes("task")?"task":"note"),"tasklists"===e||"notelists"===e)return A.get(n+"Lists").slice(1);"all tasks"!==e&&"all notes"!==e||(t=0);let r=n+"List_"+t;if(A.exists(r))return A.get(r+"_name")==="All "+n[0].toUpperCase()+n.slice(1)+"s"?A.get(n+"Items"):A.get(r);console.error(`List doesn't exist: ${r}`)}function l(n,t){let e=n+"Item_"+t;if(A.exists(e))return A.get(e);console.error(`Item doesn't exist: ${e}`)}function u(){localStorage.clear(),A.set("TOP_Project_ToDoList_StorageExists",!0),n.forEach((n=>A.set(n,[]))),e("task","All Tasks"),e("note","All Notes")}function c(n=wn[0],t=wn[1],e=Ln.getListViewOptionsData()){let r=n+"List_"+t+"_options";A.set(r,e)}const A={set:(n,t)=>localStorage.setItem(n,JSON.stringify(t)),get:n=>JSON.parse(localStorage.getItem(n)),remove:n=>localStorage.removeItem(n),exists:n=>null!==localStorage.getItem(n)};function d(n,t,e){e=Object.entries(e);let r=A.get(n+"Item_"+t);e.forEach((n=>{r[n[0]]=n[1]})),A.set(n+"Item_"+t,r)}return En({name:"Data",processes:["verifyingData","loadingData"],components:{getNewIndex:o,createItem:a,getList:s,getListName:function(n,t){let e=n+"List_"+t;if(A.exists(e))return A.get(e+"_name");console.error(`List doesn't exist: ${e}`)},getItem:l,initiate:function(){let t;if(Sn.setLoadingStatus(Vn,"loadingData",!0),!0===A.get("TOP_Project_ToDoList_StorageExists")?(console.log("We have pre-existing data"),t=function(){Sn.setLoadingStatus(Vn,"verifyingData",!0),console.groupCollapsed("verifyData()");let t=!0;if(n.reduce(((n,t)=>(!1===A.exists(t)&&(console.warn("the following defaultList doesn't exist:",t),n=!1),n)),!0)){console.groupCollapsed("verifying sublists and items");let n=["taskLists","noteLists"].reduce(((n,t)=>(A.get(t).forEach((e=>{let r=t.slice(0,t.length-1)+"_"+e;console.group("checking sublist:",r),Number.isInteger(e)?!1===A.exists(r)||!1===A.exists(r+"_name")?(console.warn("The sublist doesn't exist or sublist_name doesn't exist"),console.warn("Sublist exists?",A.exists(r)),console.warn("Sublist_name exists?",A.exists(r+"_name")),n=!1):""===A.get(r+"_name").trim()?(console.warn("subList_name is empty"),n=!1):!1===A.exists(r+"_options")?(console.warn("subList_options doesn't exist"),n=!1):Array.isArray(A.get(r+"_options"))?A.get(r+"_options").reduce(((t,e,r)=>("boolean"!=typeof e&&console.warn(`subList_options array contains an item with invalid value. Not a boolean. Item index is: ${r}`),n)),!0)?(console.log("verifying the items of subList",r),!1===A.get(r).reduce(((n,t)=>{let e=r.slice(0,4)+"Item_"+t;if(console.group("checking item:",e),Number.isInteger(t))if(!1===A.exists(e))console.warn("this item (",e,") doesn't exist"),n=!1;else{let t=A.get(e);console.log("verifying item's contents"),function(n,t){"string"!=typeof t&&(t=void 0);let e=Object.prototype.toString.call(n);return e=e.slice(8,e.length-1).toLowerCase(),void 0===t?e:e===t}(t,"object")?"task"!==t.type&&"note"!==t.type?(console.warn("item.type is invalid:",t.type),n=!1):Number.isInteger(t.listIndex)?"string"!=typeof t.title||"string"!=typeof t.textBody?(console.warn("item's title or textBody is not a string"),console.warn("item's title:",t.title),console.warn("item's textBody",t.textBody),n=!1):"task"===t.type&&(console.log("item is a task, verifying properties unique to task items"),"string"!=typeof t.date||"boolean"!=typeof t.checked?(console.warn("item.date is not a string or item.checked is not a boolean"),console.warn("typeof item.date:",typeof t.date),console.warn("typeof item.checked:",typeof t.checked),n=!1):"low"!==t.priority&&"normal"!==t.priority&&"high"!==t.priority&&"urgent"!==t.priority&&(console.warn("item.priority contains an invalid value:",t.priority),n=!1)):(console.warn("item's listIndex is not an Integer"),n=!1):(console.warn("item isn't an object"),n=!1)}else console.warn("item index is not an integer:",t),n=!1;return console.groupEnd("checking item:",e),n}),!0)&&(console.warn("items verification failed for:",r),n=!1)):(console.warn("sublist_options array's item verification failed"),n=!1):(console.warn("subList_options is invalid. Not an Array"),n=!1):(console.warn("The sublist index is not an integer:",e),n=!1),console.groupEnd("checking sublist:",r)})),n)),!0);console.groupEnd("verifying sublists and items"),!1===n&&(console.warn("subLists(and/or their items') verification failed"),t=!1),console.groupCollapsed("verifying items in taskItems and noteItems"),["taskItems","noteItems"].forEach((n=>{console.group("verifying items of:",n);let e=n.slice(0,4);A.get(n).forEach((n=>{let r=e+"Item_"+n;if(console.log("verifying that",r,"exists in its list"),Number.isInteger(n))if(!1===A.exists(r))console.warn(r,"doesn't exist at all"),t=!1;else{let i=A.get(r).listIndex,o=e+"List_"+i;Number.isInteger(i)?!1===A.exists(o)?(console.warn(o,"doesn't exist"),t=!1):!1===A.get(e+"List_"+i).includes(n)&&(console.warn("item doesn't exist in its list"),t=!1):(console.warn("item's listIndex is not an integer:",i),t=!1)}else console.warn("itemIndex is not an integer:",n),t=!1})),console.groupEnd("verifying items of:",n)})),console.groupEnd("verifying items in taskItems and noteItems")}else console.warn("all/some/one of the default lists were/was not found"),t=!1;return!0!==t&&!1!==t||Sn.setLoadingStatus(Vn,"verifyingData",!1),console.groupEnd("verifyData()"),t?console.log("verifyData() --\x3e result: PASSED"):console.warn("verifyData() --\x3e result: FAILED"),t}()):(console.log("Found no pre-existing data"),u(),t="new"),void 0!==t)return Sn.setLoadingStatus(Vn,"loadingData",!1),t},loadAnew:u,spawnNewItem:r,spawnNewList:e,removeItem:i,removeList:function(n,t){let e=n+"List_"+t;if(A.exists(e)){s(n,t).forEach((t=>i(n,t)));let r=A.get(n+"Lists");r.splice(r.indexOf(t),1),A.set(n+"Lists",r),A.remove(e+"_name"),A.remove(e+"_options"),A.remove(e)}else console.error(`List doesn't exist: ${e}`)},logLocalStorage:function(){console.table(V().sortBy(Object.entries(localStorage)))},updateListOptions:c,getListOptions:function(n,t){let e=n+"List_"+t+"_options";if(A.exists(e))return A.get(e);console.warn(`Data entry doesn't exist: ${e}`)},updateItem:d,getItemPosition:function(n,t){return s(n,wn[1]).indexOf(t)},clearItemElems:function(){t={task:{},note:{}}},updateItemElem:function(n,e,r){Object.entries(r).forEach((r=>{t[n][e][r[0]]=r[1]}))},spawnNewItemElem:function(n,e){t[n][e]={elem:void 0,titleElem:void 0,priorityElem:void 0,dateElem:void 0}},getItemElem:function(n,e,r){return t[n][e][r]},updateListName:function(n,t,e){let r=n+"List_"+t;A.set(r+"_name",e)},sortByDate:function(n,t=s(...wn)){return t.slice(0).sort(((t,e)=>(t=l(n,t).date,e=l(n,e).date,[t="No due date"===t?null:new Date(t),e="No due date"===e?null:new Date(e)].includes(null)?null!==t?-1:null!==e?1:0:t.getTime()===e.getTime()?0:t.getTime()-e.getTime())))},sortByPriority:function(n,t=s(...wn)){let e=["urgent","high","normal","low"];return t.sort(((t,r)=>(t=e.indexOf(l(n,t).priority))-e.indexOf(l(n,r).priority)))},mixSorted:function(){let n=arguments[0].reduce(((n,t,e)=>(n.push([t,e]),n)),[]);for(let t=1;t<arguments.length;t++)arguments[t].forEach(((t,e)=>{let r=arguments[0].indexOf(t);n[r][1]+=e}));return n.forEach(((t,e)=>{n[e][1]=t[1]/arguments.length})),n=n.sort(((n,t)=>n[1]-t[1])),n.reduce(((n,t)=>(n.push(t[0]),n)),[])},loadSampleData:function(){let n=e("task","Sample Task List"),t=e("note","Sample Note List");c("task",0,[!1,!1,!0,!1]);let i=r("task",n);d("task",i,{title:"Feed the dog"}),i=r("task",n),d("task",i,{title:"Feed the cat"}),i=r("task",n),d("task",i,{title:"Feed the neighbour's kid"}),i=r("task",n),d("task",i,{title:"Feed the monster in the closet",checked:!0}),i=r("note",t),d("note",i,{title:"Note to self",textBody:"Death is everything for the living and nothing for the dead."}),i=r("note",t),d("note",i,{title:"Another note",textBody:"just some description, don't mind me..."}),i=r("note",t),d("note",i,{title:"yet another note"})}}})})(),Sn=(()=>{const n={start:()=>{Ln.showLoadingScreen()},finish:()=>{let n=!0;Object.values(kn).forEach((t=>{!0===t&&(n=!1)})),n&&Ln.hideLoadingScreen()}};function t(t,e,r){if(!0===r)t.loadingProcessStatus[e]=!0,kn[t.name]=!0,!1===Ln.loadingScreenVisible&&n.start();else if(!1===r){t.loadingProcessStatus[e]=!1;let r=!0;Object.values(t.loadingProcessStatus).forEach((n=>{!0===n&&(r=!1)})),r&&(kn[t.name]=!1,n.finish())}}return En({name:"Engine",processes:["resetingData"],components:{initialise:function(){Ln.initiate();let n=Vn.initiate();!1===n?Ln.alert("Alert","Found old data, but it seems corrupted. Your data is going to be reset.",["Ok",()=>{Sn.resetData()}]):"new"===n?Ln.alert("Hello","This is a fresh start. Would you like to load sample lists?",["Sure",()=>{Vn.loadSampleData(),Ln.loadData()}],["No thanks",()=>{Ln.loadData()}]):Ln.loadData()},loading:n,setLoadingStatus:t,newList:function(n,t){let e=Vn.spawnNewList(n,t);Ln.createMenuListElement(n,e),Ln.loadList(n,e)},resetData:async function(){t(Sn,"resetingData",!0),await Vn.loadAnew(),await Ln.loadData(),t(Sn,"resetingData",!1)},deleteList:function(n,t){Ln.removeList(n,t),Vn.removeList(n,t)},newItem:function(){let n=wn[0],t=Vn.spawnNewItem(n,wn[1]);Ln.createListItemElement(n,t).focus(),Ln.loadItem(n,t)},updateItemProperty:function(n,t,e,r){Object.entries(r).forEach((e=>{let r=e[1];"date"===e[0]&&""===r&&(r="No due date"),Vn.updateItem(n,t,{[e[0]]:r})})),Ln.updateItem(n,t,e,r)},deleteItem:async function(n,t){let e=!1,r=Vn.getList(...wn);(V().isEqual(bn,[n,t])||r.includes(t))&&(e=!0),e&&await Ln.removeItem(n,t),Vn.removeItem(n,t)},updateListName:function(n,t,e){Ln.updateListName(n,t,e),Vn.updateListName(n,t,e)}}})})();function jn(n,t,e){Ln.loadList(t,e),z.click(),Ln.viewOverflow()&&Ln.updateDisplay()}(()=>{let n=[],t=window.innerWidth;window.onresize=e=>{n.push(0),setTimeout((()=>{if(n.pop(),0===n.length){let n=!1;("triple"!==Bn&&window.innerWidth-t>0||"single"!==Bn&&t-window.innerWidth>0&&Ln.viewOverflow())&&(n=!0),n&&Ln.updateDisplay(),t=window.innerWidth}}),200)}})(),W.addEventListener("click",(n=>{"triple"!=Bn&&[U,Q].forEach((n=>{n.classList.add("visible")}))})),z.addEventListener("click",(n=>{Ln.hideMenu()})),Q.addEventListener("click",(n=>{n.stopPropagation()})),U.addEventListener("click",(n=>{Ln.hideMenu()})),T.addEventListener("click",(n=>{yn=N,Ln.updateSingleView()})),nn.forEach(((n,t)=>{n.addEventListener("click",(n=>{K[t].style.display="initial",n.target.style.display="none",K[t].focus()}))})),K.forEach(((n,t)=>{n.addEventListener("blur",(n=>{if(n.target.style.display="none",nn[t].style.display="initial",""!==n.target.value.trim()){let e=0===t?"task":"note";Sn.newList(e,n.target.value.trim()),z.click()}n.target.value=""})),n.addEventListener("keypress",(n=>{"Enter"===n.key&&n.target.blur()}))})),F.addEventListener("click",(n=>{jn(0,"task",0)})),J.addEventListener("click",(n=>{jn(0,"note",0)})),an.addEventListener("input",(n=>{!1===n.target.checked?P.classList.add("hidePriority"):P.classList.remove("hidePriority")})),ln.addEventListener("input",(n=>{!1===n.target.checked?P.classList.add("hideDate"):P.classList.remove("hideDate")})),on.addEventListener("input",(n=>{Vn.updateListOptions(),Ln.loadList(...wn)})),sn.addEventListener("input",(n=>{Vn.updateListOptions(),Ln.loadList(...wn)})),un.forEach((n=>{n.addEventListener("input",(n=>{Vn.updateListOptions()}))})),en.addEventListener("click",(n=>{Sn.newItem()})),pn.addEventListener("click",(n=>{An.classList.contains("collapse")?(An.classList.remove("collapse"),pn.classList.remove("collapse")):(An.classList.add("collapse"),pn.classList.add("collapse"))})),hn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{title:hn.value})})),gn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{textBody:gn.value});let t=gn;if(t.scrollHeight>t.clientHeight)t.style.height=t.scrollHeight+4+"px";else{let n=t.clientHeight-1;for(;n!==t.clientHeight;)n=t.clientHeight,t.style.height=t.scrollHeight+3+"px";t.style.height=t.scrollHeight+4+"px"}})),mn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{priority:mn.value})})),Cn.addEventListener("input",(n=>{Sn.updateItemProperty(bn[0],bn[1],"contentView",{date:Cn.value})})),vn.addEventListener("click",(n=>{Ln.alert("","Are you sure you want to delete this?",["Yes",()=>{Sn.deleteItem(...bn),"single"===Bn&&yn===M&&(yn=N,Ln.updateSingleView())}],["No",()=>{}])})),fn.addEventListener("click",(n=>{Ln.alert("","All completed tasks in this list will be deleted. Are you sure?",["Yes",()=>{[...An.children].forEach((n=>{Sn.deleteItem(wn[0],Ln.getDataAttribute(n,"index"))}))}],["No",()=>{}])})),tn.addEventListener("input",(n=>{Sn.updateListName(...wn,n.target.value)})),tn.addEventListener("keydown",(n=>{"Enter"!==n.key&&13!==n.keyCode||tn.blur()})),Sn.initialise()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,